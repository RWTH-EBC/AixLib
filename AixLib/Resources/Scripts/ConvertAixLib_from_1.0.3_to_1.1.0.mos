// Conversion script for IBPSA library
//  from: Version 3.0
//  to:   Version 4.0
clear

convertClear();

// Conversion for https://github.com/ibpsa/modelica-ibpsa/issues/1542
convertClass("AixLib.Airflow.Multizone.MediumColumnDynamic", {"massDynamics"}, fill("",0), true);
convertClass("AixLib.Fluid.Actuators.Valves.ThreeWayEqualPercentageLinear", {"massDynamics"}, fill("",0), true);
convertClass("AixLib.Fluid.Actuators.Valves.ThreeWayLinear", {"massDynamics"}, fill("",0), true);
convertClass("AixLib.Fluid.Actuators.Valves.ThreeWayTable", {"massDynamics"}, fill("",0), true);
convertClass("AixLib.Fluid.HeatExchangers.Radiators.RadiatorEN442_2", {"massDynamics"}, fill("",0), true);
convertClass("AixLib.Fluid.Movers.FlowControlled_dp", {"massDynamics"}, fill("",0), true);
convertClass("AixLib.Fluid.Movers.FlowControlled_m_flow", {"massDynamics"}, fill("",0), true);
convertClass("AixLib.Fluid.Movers.SpeedControlled_Nrpm", {"massDynamics"}, fill("",0), true);
convertClass("AixLib.Fluid.Movers.SpeedControlled_y", {"massDynamics"}, fill("",0), true);
convertClass("AixLib.Fluid.Storage.Stratified", {"massDynamics"}, fill("",0), true);
convertClass("AixLib.Fluid.Storage.StratifiedEnhanced", {"massDynamics"}, fill("",0), true);
convertClass("AixLib.Fluid.Storage.StratifiedEnhancedInternalHex", {"massDynamics"}, fill("",0), true);
convertClass("AixLib.Fluid.HeatExchangers.EvaporatorCondenser", {"massDynamics"}, fill("",0), true);
convertClass("AixLib.Fluid.HeatExchangers.HeaterCooler_u", {"massDynamics"}, fill("",0), true);
convertClass("AixLib.Fluid.Humidifiers.Humidifier_u", {"massDynamics"}, fill("",0), true);
convertClass("AixLib.Fluid.Interfaces.TwoPortHeatMassExchanger", {"massDynamics"}, fill("",0), true);
convertClass("AixLib.Fluid.Geothermal.Borefields.BaseClasses.Boreholes.BaseClasses.InternalHEXOneUTube", {"massDynamics"}, fill("",0), true);
convertClass("AixLib.Fluid.Geothermal.Borefields.BaseClasses.Boreholes.BaseClasses.InternalHEXTwoUTube", {"massDynamics"}, fill("",0), true);
convertClass("AixLib.Fluid.HeatExchangers.PrescribedOutlet", {"massDynamics"}, fill("",0), true);
convertClass("AixLib.Fluid.Interfaces.PrescribedOutlet", {"massDynamics"}, fill("",0), true);
convertClass("AixLib.ThermalZones.ReducedOrder.RC.FourElements", {"massDynamics"}, fill("",0), true);
convertClass("AixLib.ThermalZones.ReducedOrder.RC.OneElement", {"massDynamics"}, fill("",0), true);
convertClass("AixLib.ThermalZones.ReducedOrder.RC.ThreeElements", {"massDynamics"}, fill("",0), true);
convertClass("AixLib.ThermalZones.ReducedOrder.RC.TwoElements", {"massDynamics"}, fill("",0), true);
convertClass("AixLib.Fluid.HeatExchangers.ActiveBeams.Cooling", {"massDynamics"}, fill("",0), true);
convertClass("AixLib.Fluid.HeatExchangers.ActiveBeams.CoolingAndHeating", {"massDynamics"}, fill("",0), true);
convertClass("AixLib.Fluid.HeatExchangers.WetCoilEffectivenessNTU", {"massDynamics"}, fill("",0), true);
convertClass("AixLib.Fluid.Delays.DelayFirstOrder", {"massDynamics"}, fill("",0), true);

convertClass("AixLib.Fluid.Storage.StratifiedEnhancedInternalHex", {"massDynamicsHex"}, fill("",0), true);

convertElement("AixLib.Fluid.Humidifiers.SteamHumidifier_X",
  "massDynamics",
  "energyDynamics");
convertElement("AixLib.Fluid.Humidifiers.SprayAirWasher_X",
  "massDynamics",
  "energyDynamics");

// Conversion for https://github.com/ibpsa/modelica-ibpsa/issues/1522
convertClass("AixLib.Controls.Continuous.PIDHysteresisTimer",
             "AixLib.Obsolete.Controls.Continuous.PIDHysteresisTimer");
convertClass("AixLib.Controls.Continuous.PIDHysteresis",
             "AixLib.Obsolete.Controls.Continuous.PIDHysteresis");

// Conversion for https://github.com/ibpsa/modelica-ibpsa/issues/1477
convertModifiers("AixLib.BoundaryConditions.SolarGeometry.IncidenceAngle", {"lat"}, fill("",0), true);
convertModifiers("AixLib.BoundaryConditions.SolarGeometry.BaseClasses.IncidenceAngle", {"lat"}, fill("",0), true);
convertModifiers("AixLib.BoundaryConditions.SolarGeometry.ZenithAngle", {"lat"}, fill("",0), true);
convertModifiers("AixLib.BoundaryConditions.SolarIrradiation.DiffusePerez", {"lat"}, fill("",0), true);
convertModifiers("AixLib.BoundaryConditions.SolarIrradiation.DirectTiltedSurface", {"lat"}, fill("",0), true);

// Refactoring for https://github.com/ibpsa/modelica-ibpsa/issues/1494
convertClass("AixLib.Fluid.FixedResistances.PlugFlowPipe",
             "AixLib.Obsolete.Fluid.FixedResistances.PlugFlowPipe");
convertClass("AixLib.Fluid.FixedResistances.BaseClasses.PlugFlowCore",
             "AixLib.Obsolete.Fluid.FixedResistances.BaseClasses.PlugFlowCore");

// Conversion for https://github.com/ibpsa/modelica-ibpsa/issues/1498
convertClass("AixLib.Utilities.Math.Polynominal",
             "AixLib.Utilities.Math.Polynomial");
convertClass("AixLib.Utilities.Math.Examples.Polynominal",
             "AixLib.Utilities.Math.Examples.Polynomial");

// Conversion for https://github.com/ibpsa/modelica-ibpsa/issues/1498
convertModifiers("AixLib.Fluid.Movers.FlowControlled_dp",
                {"y_start"}, fill("",0), true);
convertModifiers("AixLib.Fluid.Movers.FlowControlled_m_flow",
                {"y_start"}, fill("",0), true);

// Conversion for https://github.com/ibpsa/modelica-ibpsa/issues/1365
convertModifiers("AixLib.Controls.Continuous.LimPID", {"reverseAction"}, {"reverseActing=not %reverseAction%"});
convertModifiers("AixLib.Controls.Continuous.PIDHysteresis", {"reverseAction"}, {"reverseActing=not %reverseAction%"});
convertModifiers("AixLib.Controls.Continuous.PIDHysteresisTimer", {"reverseAction"}, {"reverseActing=not %reverseAction%"});


// Conversion for https://github.com/ibpsa/modelica-ibpsa/issues/1362
convertModifiers("AixLib.Airflow.Multizone.BaseClasses.PowerLawResistance", {"m_flow_small"}, fill("",0), true);
convertModifiers("AixLib.Airflow.Multizone.BaseClasses.TwoWayFlowElement", {"m1_flow_small", "m2_flow_small"}, fill("",0), true);
convertModifiers("AixLib.Airflow.Multizone.EffectiveAirLeakageArea", {"m_flow_small"}, fill("",0), true);
convertModifiers("AixLib.Airflow.Multizone.Orifice", {"m_flow_small"}, fill("",0), true);
convertModifiers("AixLib.Airflow.Multizone.DoorDiscretizedOpen", {"m1_flow_small", "m2_flow_small"}, fill("",0), true);
convertModifiers("AixLib.Airflow.Multizone.DoorDiscretizedOperable", {"m1_flow_small", "m2_flow_small"}, fill("",0), true);
convertModifiers("AixLib.Airflow.Multizone.ZonalFlow_ACS", {"m1_flow_small", "m2_flow_small"}, fill("",0), true);
convertModifiers("AixLib.Airflow.Multizone.ZonalFlow_m_flow", {"m1_flow_small", "m2_flow_small"}, fill("",0), true);

convertClass("AixLib.Fluid.Sources.FixedBoundary",
             "AixLib.Obsolete.Fluid.Sources.FixedBoundary");
convertClass("AixLib.Controls.SetPoints.HotWaterTemperatureReset",
             "AixLib.Controls.SetPoints.SupplyReturnTemperatureReset");

//refactoring of alpha to hCon or hRad
convertElement(
    "AixLib.ThermalZones.ReducedOrder.RC.OneElement",
    "alphaWin",
    "hConWin");
convertElement(
    "AixLib.ThermalZones.ReducedOrder.RC.OneElement",
    "alphaExt",
    "hConExt");
convertElement(
    "AixLib.ThermalZones.ReducedOrder.RC.OneElement",
    "alphaExtWallConst",
    "hConExtWall_const");
convertElement(
    "AixLib.ThermalZones.ReducedOrder.RC.OneElement",
    "alphaWinConst",
    "hConWin_const");
convertElement(
    "AixLib.ThermalZones.ReducedOrder.RC.ThreeElements",
    "alphaFloor",
    "hConFloor");
convertElement(
    "AixLib.ThermalZones.ReducedOrder.RC.ThreeElements",
    "alphaFloorConst",
    "hConFloor_const");
convertElement(
    "AixLib.ThermalZones.ReducedOrder.RC.TwoElements",
    "alphaInt",
    "hConInt");
convertElement(
    "AixLib.ThermalZones.ReducedOrder.RC.TwoElements",
    "alphaIntWall",
    "hConIntWall");
convertElement(
    "AixLib.ThermalZones.ReducedOrder.RC.FourElements",
    "alphaRoof",
    "hConRoof");
convertElement(
    "AixLib.ThermalZones.ReducedOrder.RC.FourElements",
    "alphaRoofConst",
    "hConRoof_const");
convertElement(
    "AixLib.ThermalZones.ReducedOrder.RC.OneElement",
    "alphaRad",
    "hRad");
convertElement(
    "AixLib.ThermalZones.ReducedOrder.EquivalentAirTemperature.BaseClasses.PartialVDI6007",
    "alphaWallOut",
    "hConWallOut");
convertElement(
    "AixLib.ThermalZones.ReducedOrder.EquivalentAirTemperature.BaseClasses.PartialVDI6007",
    "alphaRad",
    "hRad");
convertElement(
    "AixLib.ThermalZones.ReducedOrder.EquivalentAirTemperature.VDI6007WithWindow",
    "alphaWinOut",
    "hConWinOut");

// Refactoring damper models.
convertElement(
    "AixLib.Fluid.Actuators.Dampers.PressureIndependent",
    "dp_nominal",
    "dpDamper_nominal");
convertModifiers(
    "AixLib.Fluid.Actuators.Dampers.Exponential",
    {"k1=0.45", "v_nominal=1"},
    {"k1=%k1%",
    "dpDamper_nominal=%k1% * 1.2 * %v_nominal%^2 / 2"},
    true);
convertModifiers(
    "AixLib.Fluid.Actuators.Dampers.VAVBoxExponential",
    {"dp_nominal", "k1=0.45", "v_nominal=1", "dp_nominalIncludesDamper=true"},
    {"k1=%k1%",
    "dpDamper_nominal=%k1% * 1.2 * %v_nominal%^2 / 2",
    "dpFixed_nominal=if %dp_nominalIncludesDamper% then %dp_nominal% - %k1% * 1.2 * %v_nominal%^2 / 2 else %dp_nominal%"},
    true);
convertModifiers(
    "AixLib.Fluid.Actuators.Dampers.MixingBox",
    {"dpOut_nominal", "dpRec_nominal", "dpExh_nominal", "k1=0.45", "v_nominal=1", "dp_nominalIncludesDamper=false"},
    {"k1=%k1%",
    "dpDamOut_nominal=%k1% * 1.2 * %v_nominal%^2 / 2",
    "dpFixOut_nominal=if %dp_nominalIncludesDamper% then %dpOut_nominal% - %k1% * 1.2 * %v_nominal%^2 / 2 else %dpOut_nominal%",
    "dpDamRec_nominal=%k1% * 1.2 * %v_nominal%^2 / 2",
    "dpFixRec_nominal=if %dp_nominalIncludesDamper% then %dpRec_nominal% - %k1% * 1.2 * %v_nominal%^2 / 2 else %dpRec_nominal%",
    "dpDamExh_nominal=%k1% * 1.2 * %v_nominal%^2 / 2",
    "dpFixExh_nominal=if %dp_nominalIncludesDamper% then %dpExh_nominal% - %k1% * 1.2 * %v_nominal%^2 / 2 else %dpExh_nominal%"},
    true);
convertClass(
    "AixLib.Fluid.Actuators.Dampers.VAVBoxExponential",
    "AixLib.Fluid.Actuators.Dampers.Exponential");
