// Conversion script for IBPSA library
//  from: Version 3.0
//  to:   Version 4.0

convertClear();
// Conversion for https://github.com/ibpsa/modelica-ibpsa/issues/1956
convertModifiers("AixLib.Fluid.SolarCollectors.ASHRAE93",
                {"nPanelsSer"}, fill("",0), true);
convertModifiers("AixLib.Fluid.SolarCollectors.EN12975",
                {"nPanelsSer"}, fill("",0), true);

// Conversion for https://github.com/ibpsa/modelica-ibpsa/issues/1926
convertElement("AixLib.Fluid.Movers.FlowControlled_dp", "use_inputFilter", "use_riseTime");
convertElement("AixLib.Fluid.Movers.FlowControlled_m_flow", "use_inputFilter", "use_riseTime");
convertElement("AixLib.Fluid.Movers.SpeedControlled_y", "use_inputFilter", "use_riseTime");
convertElement("AixLib.Fluid.Movers.Preconfigured.FlowControlled_dp", "use_inputFilter", "use_riseTime");
convertElement("AixLib.Fluid.Movers.Preconfigured.FlowControlled_m_flow", "use_inputFilter", "use_riseTime");
convertElement("AixLib.Fluid.Movers.Preconfigured.SpeedControlled_y", "use_inputFilter", "use_riseTime");

convertElement("AixLib.Fluid.Actuators.Dampers.Exponential", "riseTime", "strokeTime");
convertElement("AixLib.Fluid.Actuators.Dampers.MixingBox", "riseTime", "strokeTime");
convertElement("AixLib.Fluid.Actuators.Dampers.MixingBoxMinimumFlow", "riseTime", "strokeTime");
convertElement("AixLib.Fluid.Actuators.Dampers.PressureIndependent", "riseTime", "strokeTime");
convertElement("AixLib.Fluid.Actuators.Valves.ThreeWayEqualPercentageLinear", "riseTime", "strokeTime");
convertElement("AixLib.Fluid.Actuators.Valves.ThreeWayLinear", "riseTime", "strokeTime");
convertElement("AixLib.Fluid.Actuators.Valves.ThreeWayTable", "riseTime", "strokeTime");
convertElement("AixLib.Fluid.Actuators.Valves.TwoWayButterfly", "riseTime", "strokeTime");
convertElement("AixLib.Fluid.Actuators.Valves.TwoWayEqualPercentage", "riseTime", "strokeTime");
convertElement("AixLib.Fluid.Actuators.Valves.TwoWayLinear", "riseTime", "strokeTime");
convertElement("AixLib.Fluid.Actuators.Valves.TwoWayPolynomial", "riseTime", "strokeTime");
convertElement("AixLib.Fluid.Actuators.Valves.TwoWayPressureIndependent", "riseTime", "strokeTime");
convertElement("AixLib.Fluid.Actuators.Valves.TwoWayQuickOpening", "riseTime", "strokeTime");
convertElement("AixLib.Fluid.Actuators.Valves.TwoWayTable", "riseTime", "strokeTime");

convertElement("AixLib.Fluid.Actuators.Dampers.Exponential", "use_inputFilter", "use_strokeTime");
convertElement("AixLib.Fluid.Actuators.Dampers.MixingBox", "use_inputFilter", "use_strokeTime");
convertElement("AixLib.Fluid.Actuators.Dampers.MixingBoxMinimumFlow", "use_inputFilter", "use_strokeTime");
convertElement("AixLib.Fluid.Actuators.Dampers.PressureIndependent", "use_inputFilter", "use_strokeTime");
convertElement("AixLib.Fluid.Actuators.Valves.ThreeWayEqualPercentageLinear", "use_inputFilter", "use_strokeTime");
convertElement("AixLib.Fluid.Actuators.Valves.ThreeWayLinear", "use_inputFilter", "use_strokeTime");
convertElement("AixLib.Fluid.Actuators.Valves.ThreeWayTable", "use_inputFilter", "use_strokeTime");
convertElement("AixLib.Fluid.Actuators.Valves.TwoWayButterfly", "use_inputFilter", "use_strokeTime");
convertElement("AixLib.Fluid.Actuators.Valves.TwoWayEqualPercentage", "use_inputFilter", "use_strokeTime");
convertElement("AixLib.Fluid.Actuators.Valves.TwoWayLinear", "use_inputFilter", "use_strokeTime");
convertElement("AixLib.Fluid.Actuators.Valves.TwoWayPolynomial", "use_inputFilter", "use_strokeTime");
convertElement("AixLib.Fluid.Actuators.Valves.TwoWayPressureIndependent", "use_inputFilter", "use_strokeTime");
convertElement("AixLib.Fluid.Actuators.Valves.TwoWayQuickOpening", "use_inputFilter", "use_strokeTime");
convertElement("AixLib.Fluid.Actuators.Valves.TwoWayTable", "use_inputFilter", "use_strokeTime");


convertModifiers("AixLib.Fluid.Actuators.Dampers.Exponential", {"order"}, fill("",0), true);
convertModifiers("AixLib.Fluid.Actuators.Dampers.MixingBox", {"order"}, fill("",0), true);
convertModifiers("AixLib.Fluid.Actuators.Dampers.MixingBoxMinimumFlow", {"order"}, fill("",0), true);
convertModifiers("AixLib.Fluid.Actuators.Dampers.PressureIndependent", {"order"}, fill("",0), true);
convertModifiers("AixLib.Fluid.Actuators.Valves.ThreeWayEqualPercentageLinear", {"order"}, fill("",0), true);
convertModifiers("AixLib.Fluid.Actuators.Valves.ThreeWayLinear", {"order"}, fill("",0), true);
convertModifiers("AixLib.Fluid.Actuators.Valves.ThreeWayTable", {"order"}, fill("",0), true);
convertModifiers("AixLib.Fluid.Actuators.Valves.TwoWayButterfly", {"order"}, fill("",0), true);
convertModifiers("AixLib.Fluid.Actuators.Valves.TwoWayEqualPercentage", {"order"}, fill("",0), true);
convertModifiers("AixLib.Fluid.Actuators.Valves.TwoWayLinear", {"order"}, fill("",0), true);
convertModifiers("AixLib.Fluid.Actuators.Valves.TwoWayPolynomial", {"order"}, fill("",0), true);
convertModifiers("AixLib.Fluid.Actuators.Valves.TwoWayPressureIndependent", {"order"}, fill("",0), true);
convertModifiers("AixLib.Fluid.Actuators.Valves.TwoWayQuickOpening", {"order"}, fill("",0), true);
convertModifiers("AixLib.Fluid.Actuators.Valves.TwoWayTable", {"order"}, fill("",0), true);


// Conversion for https://github.com/ibpsa/modelica-ibpsa/issues/1885
convertModifiers("AixLib.Fluid.Geothermal.Borefields.BaseClasses.PartialBorefield",
                {"dynFil"}, fill("",0), true);
convertModifiers("AixLib.Fluid.Geothermal.Borefields.BaseClasses.Boreholes.OneUTube",
                {"dynFil"}, fill("",0), true);
convertModifiers("AixLib.Fluid.Geothermal.Borefields.BaseClasses.Boreholes.TwoUTube",
                {"dynFil"}, fill("",0), true);


// Conversion for https://github.com/ibpsa/modelica-ibpsa/issues/1614
convertModifiers("AixLib.Fluid.Storage.ExpansionVessel", {"p"}, fill("",0), true);
