#  image_name : registry.git.rwth-aachen.de/ebc/ebc_intern/dymola-docker:Dymola_2022-miniconda
#  ci_stage_html_check : HTML_Check
# ci_stage_html_whitelist : create_html_whitelist
#  ci_stage_open_PR : open_PR
#  html_praefix : correct_HTML_
# python_version : myenv
# ModelicaPyCI.syntax.html_tidy : modelicapyci_html_tidy_module
# arg_correct_html: --filter-whitelist-flag  --log-flag  --whitelist-library IBPSA --library AixLib --packages Airflow BoundaryConditions Controls DataBase Electrical Examples Fluid Media Obsolete Resources Systems ThermalZones Types UsersGuide Utilities 
# result_dir : result
# expire_in_time : 7h
# commit_string : None
# library : AixLib
# PR_main_branch_rule : None
# ci_html_commit : ci_html
# ModelicaPyCI.api_script.api_github : modelicapyci_api_github_module
# arg_PR : --filter-whitelist-flag  --correct-view-flag  --log-flag  --whitelist-library IBPSA --library AixLib --packages Airflow BoundaryConditions Controls DataBase Electrical Examples Fluid Media Obsolete Resources Systems ThermalZones Types UsersGuide Utilities 
# arg_wh : --filter-whitelist-flag  --log-flag  --whitelist-library IBPSA 
# bot_create_html_file_commit : CI message from ebc-aixlib-bot. Push new files with corrected html Syntax .

include: 'bin/ci-tests/scripts/utilities.yml'

image: registry.git.rwth-aachen.de/ebc/ebc_intern/dymola-docker:Dymola_2022-miniconda
stages:
    - HTML_Check
    - create_html_whitelist
    - open_PR

variables:
    Praefix_Branch: correct_HTML_
    Newbranch: $Praefix_Branch$CI_COMMIT_REF_NAME



.html_rules:PR:
    rules:
        - if: $CI_PIPELINE_SOURCE == "external_pull_request_event"  &&  None
          when: on_success
        - if: $CI_PIPELINE_SOURCE == "push"  && (None)
          when: on_success
        - if: $CI_COMMIT_MESSAGE  =~ /ci_html/ && $CI_PIPELINE_SOURCE == "push"
          when: always

.html_rules:push:
    rules:
        - if: $CI_PIPELINE_SOURCE == "push"  &&  None
          when: on_success
        - if:  (None)
          when: never


Check_HTML:PR:
    stage: HTML_Check
    before_script:
        - !reference [.clone_ci_templates, script]

    script:
        - python -m ModelicaPyCI.syntax.html_tidy --filter-whitelist-flag  --correct-view-flag  --log-flag  --whitelist-library IBPSA --library AixLib --packages Airflow BoundaryConditions Controls DataBase Electrical Examples Fluid Media Obsolete Resources Systems ThermalZones Types UsersGuide Utilities 
    artifacts:
        paths:
            - result/
        expire_in: 7h
    rules:
        - !reference [.html_rules:PR , rules]

Check_HTML:push:
    stage: HTML_Check
    before_script:
        - !reference [.github_ssh_auth, script]
        - !reference [.clone_ci_templates, script]
    script:
        - python -m ModelicaPyCI.syntax.html_tidy --filter-whitelist-flag  --correct-view-flag  --log-flag  --whitelist-library IBPSA --library AixLib --packages Airflow BoundaryConditions Controls DataBase Electrical Examples Fluid Media Obsolete Resources Systems ThermalZones Types UsersGuide Utilities 
    artifacts:
        paths:
            - result/
        expire_in: 7h
    rules:
        - !reference [.html_rules:push , rules]



Open_Pull_HTML_Request:
    stage: open_PR
    before_script:
        - !reference [.github_ssh_auth, script]
        - !reference [.clone_ci_templates, script]
    script:
        - python -m ModelicaPyCI.api_script.api_github --correct-html-flag  --create-pr-flag  --github-token $GITHUB_API_TOKEN --main-branch master --working-branch $CI_COMMIT_REF_NAME --github-repository RWTH-EBC/AixLib 
    rules:
        - if: $CI_COMMIT_MESSAGE =~ /CI message from ebc-aixlib-bot. Push new files with corrected html Syntax ./ && $CI_COMMIT_BRANCH =~ /^correct_HTML_.*$/ && $CI_PIPELINE_SOURCE == "push"
          when: on_success


html_whitelist_job:
    stage: create_html_whitelist
    before_script:
        - !reference [.clone_ci_templates, script]
        - !reference [.github_ssh_auth, script]

    script:
        - mkdir whitelist && cd whitelist
        - git clone --single-branch --branch $CI_COMMIT_REF_NAME git@github.com:$Github_Repository.git
        - cd $CI_PROJECT_NAME
        - python -m ModelicaPyCI.syntax.html_tidy --filter-whitelist-flag  --log-flag  --whitelist-library IBPSA         - message="CI message from ebc-aixlib-bot. Update or created new whitelist. Please pull the new whitelist before push again."
        - git add rci_html_whitelist.txt
        - git commit -m "$message"
        - git push git@github.com:$Github_Repository.git
    artifacts:
        paths:
            - result/
        expire_in: 7 day
    rules:
        - if: $CI_COMMIT_MESSAGE =~ /ci_create_html_whitelist/ && $CI_PIPELINE_SOURCE == "push"
          when: always
