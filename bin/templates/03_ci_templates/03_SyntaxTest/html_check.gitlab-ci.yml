stages:    - build    - HTML_Check    - create_html_whitelist    - deploy    - openMR    - postvariables:        Praefix_Branch: "Correct_HTML_"        Newbranch: $Praefix_Branch$CI_COMMIT_REF_NAMEtrigger_check_HTML:    stage: build    before_script:        - export PIP_CACHE_DIR="/opt/cache/pip"        - source activate python36          - export PYTHONIOENCODING=utf-8 # just in case    script:        - python bin/CITests/03_SyntaxTests/html_tidy_errors.py --s AixLib --correct-view --log  --align --font        - if cat bin/Configfiles/exit.sh | grep "exit 1"; then             echo "Test was not successful!" ;            exit 1;          else             exit 0;           fi    artifacts:        paths:            - AixLib/HTML-logfile.txt        expire_in: 7 day    except:        refs:            - external_pull_requests     only:        variables:            - $CI_COMMIT_MESSAGE =~ /ci_correct_html/            HTML_Merge_Checks:    stage: HTML_Check    before_script:        - export PIP_CACHE_DIR="/opt/cache/pip"        - source activate python36          - export PYTHONIOENCODING=utf-8 # just in case    script:        - python bin/CITests/03_SyntaxTests/html_tidy_errors.py --s AixLib --correct-view --log  --align --font        - if cat bin/Configfiles/exit.sh | grep "exit 1"; then             echo "HTML Check was not successfully" ;            echo "Read HTML - logfile!" ;            exit 1 ;          else             exit 0;           fi    artifacts:        when: on_failure        paths:            - AixLib/HTML-logfile.txt        expire_in: 7 day     only:        refs:            - external_pull_requests    except:        variables:            - $CI_COMMIT_MESSAGE  =~ /ci_update_ref/            - $CI_COMMIT_MESSAGE  =~ /ci_dif_ref/            - $CI_COMMIT_MESSAGE  =~ /ci_correct_html/            - $CI_COMMIT_MESSAGE  =~ /ci_create_whitelist/            - $CI_COMMIT_MESSAGE  =~ /Update WhiteList_CheckModel.txt and HTML_IBPSA_WhiteList.txt/            - $CI_COMMIT_MESSAGE  =~ /Automatic push of CI with new regression reference files. Please pull the new files before push again./            - $CI_COMMIT_MESSAGE  =~ /New reference files were pushed to this branch. The job was successfully and the newly added files are tested in another commit./            - $CI_COMMIT_MESSAGE  =~ /ci_show_ref/            - $CI_COMMIT_MESSAGE  =~ /ci_regression_test/            - $CI_COMMIT_MESSAGE  =~ /ci_check/            - $CI_COMMIT_MESSAGE  =~ /ci_simulate/            - $CI_COMMIT_MESSAGE  =~ /ci_create_html_whitelist/            - $CI_COMMIT_MESSAGE  =~ /ci_html/            - $CI_COMMIT_MESSAGE  =~ /ci_setting/  HTML_Check:    stage: HTML_Check    before_script:        - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'        - eval $(ssh-agent -s)        - mkdir -p ~/.ssh        - ssh-keyscan github.com >> ~/.ssh/known_hosts        - ssh-agent -a /tmp/ssh_agent.sock > /dev/null        - echo "$GITHUB_PRIVATE_KEY" > ~/.ssh/id_rsa        - chmod 600 ~/.ssh/id_rsa        - git config --global user.name "$GITLAB_USER_NAME"        - git config --global user.email "$GITLAB_USER_EMAIL"        - export PIP_CACHE_DIR="/opt/cache/pip"        - source activate python36          - export PYTHONIOENCODING=utf-8 # just in case    script:        - python bin/CITests/03_SyntaxTests/html_tidy_errors.py --s AixLib --correct-view --log  --align --font        - if cat bin/Configfiles/exit.sh | grep "exit 1"; then             mkdir CorrectedVersion &&  cd CorrectedVersion ;            git clone --single-branch --branch $CI_COMMIT_REF_NAME git@github.com:$Github_Repository.git;            cd $CI_PROJECT_NAME ;            python bin/CITests/03_SyntaxTests/html_tidy_errors.py --s AixLib --correct-overwrite --align --font --log;            git checkout -B $Newbranch;            message=ci_correct_html;            git add . ;            echo $message;            git commit -m "$message" ;            git push --force git@github.com:$Github_Repository.git;            wait ;            exit 1;          else             exit 0;           fi    artifacts:        when: on_failure        paths:            - AixLib/HTML-logfile.txt        expire_in: 7 day     except:        refs:            - external_pull_requests            - /^Correct_HTML.*$/            - IBPSA_Merge         variables:            - $CI_COMMIT_MESSAGE  =~ /ci_update_ref/            - $CI_COMMIT_MESSAGE  =~ /ci_dif_ref/            - $CI_COMMIT_MESSAGE  =~ /ci_correct_html/            - $CI_COMMIT_MESSAGE  =~ /ci_create_whitelist/            - $CI_COMMIT_MESSAGE  =~ /Update WhiteList_CheckModel.txt and HTML_IBPSA_WhiteList.txt/            - $CI_COMMIT_MESSAGE  =~ /Automatic push of CI with new regression reference files. Please pull the new files before push again./            - $CI_COMMIT_MESSAGE  =~ /New reference files were pushed to this branch. The job was successfully and the newly added files are tested in another commit./            - $CI_COMMIT_MESSAGE  =~ /ci_show_ref/            - $CI_COMMIT_MESSAGE  =~ /ci_regression_test/            - $CI_COMMIT_MESSAGE  =~ /ci_check/            - $CI_COMMIT_MESSAGE  =~ /ci_simulate/            - $CI_COMMIT_MESSAGE  =~ /ci_create_html_whitelist/            - $CI_COMMIT_MESSAGE  =~ /ci_html/            - $CI_COMMIT_MESSAGE  =~ /ci_setting/CI_HTML_Check:    stage: HTML_Check    before_script:        - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'        - eval $(ssh-agent -s)        - mkdir -p ~/.ssh        - ssh-keyscan github.com >> ~/.ssh/known_hosts        - ssh-agent -a /tmp/ssh_agent.sock > /dev/null        - echo "$GITHUB_PRIVATE_KEY" > ~/.ssh/id_rsa        - chmod 600 ~/.ssh/id_rsa        - git config --global user.name "$GITLAB_USER_NAME"        - git config --global user.email "$GITLAB_USER_EMAIL"        - export PIP_CACHE_DIR="/opt/cache/pip"        - source activate python36          - export PYTHONIOENCODING=utf-8 # just in case    script:        - python bin/CITests/03_SyntaxTests/html_tidy_errors.py --s AixLib --correct-view --log  --align --font        - if cat bin/Configfiles/exit.sh | grep "exit 1"; then             mkdir CorrectedVersion &&  cd CorrectedVersion ;            git clone --single-branch --branch $CI_COMMIT_REF_NAME git@github.com:$Github_Repository.git;            cd $CI_PROJECT_NAME;            python bin/CITests/03_SyntaxTests/html_tidy_errors.py --s AixLib --correct-overwrite --align --font --log;            git checkout -B $Newbranch;            message="ci_correct_html";            git add . ;            echo $message;            git commit -m "$message" ;            git push --force git@github.com:$Github_Repository.git;            wait ;            exit 1;          else             exit 0;           fi    artifacts:        when: on_failure        paths:            - AixLib/HTML-logfile.txt        expire_in: 7 day     only:        variables:            - $CI_COMMIT_MESSAGE  =~ /ci_html/Open_Pull_Request:    stage: openMR    before_script:        - source activate python36          - pip install --upgrade pip &&  apt-get update -y && apt-get install zip unzip -y        - pip install requests        - export PYTHONIOENCODING=utf-8 # just in case        - git config --global user.name "$GITLAB_USER_NAME"        - git config --global user.email "$GITLAB_USER_EMAIL"    script:        - python bin/CITests/04_api_script/api_github.py --github-repo $Github_Repository --working-branch $CI_COMMIT_REF_NAME --github-token $GITHUB_API_TOKEN --create-pr --correct-html    except:        refs:            - external_pull_requests     only:        variables:            - $CI_COMMIT_MESSAGE =~ /ci_correct_html/           html_whitelist_job:    stage: create_html_whitelist    before_script:        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&        - export PIP_CACHE_DIR="/opt/cache/pip"        - source activate python36          - export PYTHONIOENCODING=utf-8         - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'        - eval $(ssh-agent -s)        - mkdir -p ~/.ssh        - ssh-keyscan github.com >> ~/.ssh/known_hosts        - ssh-agent -a /tmp/ssh_agent.sock > /dev/null        - echo "$GITHUB_PRIVATE_KEY" > ~/.ssh/id_rsa        - chmod 600 ~/.ssh/id_rsa        - git config --global user.name "$GITLAB_USER_NAME"        - git config --global user.email "$GITLAB_USER_EMAIL"    script:        - mkdir whitelist && cd whitelist        - git clone --single-branch --branch $CI_COMMIT_REF_NAME git@github.com:$Github_Repository.git        - cd $CI_PROJECT_NAME        - python bin/CITests/03_SyntaxTests/html_tidy_errors.py --WhiteList --git-url https://github.com/ibpsa/modelica-ibpsa.git --wh-library IBPSA					        - message=Automatic push of CI - Update html_whitelist. Please pull the new files before push again. [skip ci]        - git add bin/ci_whitelist/html_whitelist.txt        - git commit -m "$message"        - git push git@github.com:$Github_Repository.git    artifacts:        paths:            - whitelist/$CI_PROJECT_NAME/bin/ci_whitelist/html_whitelist.txt        expire_in: 7 day     only:        variables:            - $CI_COMMIT_MESSAGE =~ /ci_create_html_whitelist/          except:        refs:            - external_pull_requests