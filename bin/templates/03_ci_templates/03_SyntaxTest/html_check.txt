stages:
    - build
    - HTML_Check
    - create_html_whitelist
    - deploy
    - openMR
    - post

variables:
        Praefix_Branch: "Correct_HTML_"
        Newbranch: ${Praefix_Branch}${CI_COMMIT_REF_NAME}    

trigger_check_HTML:
    stage: build
    before_script:
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate ${python_version}
        - export PYTHONIOENCODING=utf-8 # just in case
    script:
        - python bin/CITests/03_SyntaxTests/html_tidy_errors.py --s ${library} --correct-view --log  --align --font
        - if cat ${exit_file} | grep "exit 1"; then 
            echo "Test was not successful!" ;
            exit 1;
          else 
            exit 0; 
          fi
    artifacts:
        paths:
            - ${library}/HTML-logfile.txt
        expire_in: 7 day
    except:
        refs:
            - external_pull_requests 
    only:
        variables:
            - $CI_COMMIT_MESSAGE =~ /${html_commit}/
            
HTML_Merge_Checks:
    stage: HTML_Check
    before_script:
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate ${python_version}
        - export PYTHONIOENCODING=utf-8 # just in case
    script:
        - python bin/CITests/03_SyntaxTests/html_tidy_errors.py --s ${library} --correct-view --log  --align --font
        - if cat ${exit_file} | grep "exit 1"; then 
            echo "HTML Check was not successfully" ;
            echo "Read HTML - logfile!" ;
            exit 1 ;
          else 
            exit 0; 
          fi
    artifacts:
        when: on_failure
        paths:
            - ${library}/HTML-logfile.txt
        expire_in: 7 day 
    only:
        refs:
            - external_pull_requests

    except:
        variables:
            %for commit in except_commit_list:
            - $CI_COMMIT_MESSAGE  =~ /${commit}/
            %endfor
        refs:
            - master
            - development
  
HTML_Check:
    stage: HTML_Check
    before_script:
        - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
        - eval $(ssh-agent -s)
        - mkdir -p ~/.ssh
        - ssh-keyscan github.com >> ~/.ssh/known_hosts
        - ssh-agent -a /tmp/ssh_agent.sock > /dev/null
        - echo "${GITHUB_PRIVATE_KEY}" > ~/.ssh/id_rsa
        - chmod 600 ~/.ssh/id_rsa
        - git config --global user.name "${GITLAB_USER_NAME}" 
        - git config --global user.email "${GITLAB_USER_EMAIL}"
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate ${python_version}
        - export PYTHONIOENCODING=utf-8 # just in case
    script:
        - python bin/CITests/03_SyntaxTests/html_tidy_errors.py --s ${library} --correct-view --log  --align --font
        - if cat ${exit_file} | grep "exit 1"; then 
            mkdir CorrectedVersion &&  cd CorrectedVersion ;
            git clone --single-branch --branch $CI_COMMIT_REF_NAME git@github.com:${Github_Repository}.git;
            cd ${CI_PROJECT_NAME};
            python bin/CITests/03_SyntaxTests/html_tidy_errors.py --s ${library} --correct-overwrite --align --font --log;
            git checkout -B $Newbranch;
            message="ci_correct_html";
            git add . ;
            echo $message;
            git commit -m "$message" ;
            git push --force git@github.com:${Github_Repository}.git;
            wait ;
            exit 1;
          else 
            exit 0; 
          fi
    artifacts:
        when: on_failure
        paths:
            - ${library}/HTML-logfile.txt
        expire_in: 7 day 
    
    except:
        refs:
            - external_pull_requests
            - /^Correct_HTML.*$/
            ${merge_branch}
        variables:
            %for commit in except_commit_list:
            - $CI_COMMIT_MESSAGE  =~ /${commit}/
            %endfor

CI_HTML_Check:
    stage: HTML_Check
    before_script:
        - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
        - eval $(ssh-agent -s)
        - mkdir -p ~/.ssh
        - ssh-keyscan github.com >> ~/.ssh/known_hosts
        - ssh-agent -a /tmp/ssh_agent.sock > /dev/null
        - echo "${GITHUB_PRIVATE_KEY}" > ~/.ssh/id_rsa
        - chmod 600 ~/.ssh/id_rsa
        - git config --global user.name "${GITLAB_USER_NAME}" 
        - git config --global user.email "${GITLAB_USER_EMAIL}"
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate ${python_version}
        - export PYTHONIOENCODING=utf-8 # just in case
    script:
        - python bin/CITests/03_SyntaxTests/html_tidy_errors.py --s ${library} --correct-view --log  --align --font
        - if cat ${exit_file} | grep "exit 1"; then 
            mkdir CorrectedVersion &&  cd CorrectedVersion ;
            git clone --single-branch --branch $CI_COMMIT_REF_NAME git@github.com:${Github_Repository}.git;
            cd ${CI_PROJECT_NAME};
            python bin/CITests/03_SyntaxTests/html_tidy_errors.py --s ${library} --correct-overwrite --align --font --log;
            git checkout -B $Newbranch;
            message="ci_correct_html";
            git add . ;
            echo $message;
            git commit -m "$message" ;
            git push --force git@github.com:${Github_Repository}.git;
            wait ;
            exit 1;
          else 
            exit 0; 
          fi
    artifacts:
        when: on_failure
        paths:
            - ${library}/HTML-logfile.txt
        expire_in: 7 day 
    only:
        variables:
            - $CI_COMMIT_MESSAGE  =~ /${ci_html_commit}/


Open_Pull_Request:
    stage: openMR
    before_script:
        - source activate ${python_version}
        - pip install --upgrade pip &&  apt-get update -y && apt-get install zip unzip -y
        - pip install requests
        - export PYTHONIOENCODING=utf-8 # just in case
        - git config --global user.name "${GITLAB_USER_NAME}" 
        - git config --global user.email "${GITLAB_USER_EMAIL}"
    script:
        - python bin/CITests/04_api_script/api_github.py --github-repo ${Github_Repository} --working-branch $CI_COMMIT_REF_NAME --github-token ${GITHUB_API_TOKEN} --create-pr --correct-html
    except:
        refs:
            - external_pull_requests 
    only:
        variables:
            - $CI_COMMIT_MESSAGE =~ /${html_commit}/
           
html_whitelist_job:
    stage: create_html_whitelist
    before_script:
        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate ${python_version}
        - export PYTHONIOENCODING=utf-8 
        - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
        - eval $(ssh-agent -s)
        - mkdir -p ~/.ssh
        - ssh-keyscan github.com >> ~/.ssh/known_hosts
        - ssh-agent -a /tmp/ssh_agent.sock > /dev/null
        - echo "${GITHUB_PRIVATE_KEY}" > ~/.ssh/id_rsa
        - chmod 600 ~/.ssh/id_rsa
        - git config --global user.name "${GITLAB_USER_NAME}"
        - git config --global user.email "${GITLAB_USER_EMAIL}"
    script:
        - mkdir whitelist && cd whitelist
        - git clone --single-branch --branch $CI_COMMIT_REF_NAME git@github.com:${Github_Repository}.git
        - cd ${CI_PROJECT_NAME}
        - python bin/CITests/03_SyntaxTests/html_tidy_errors.py --WhiteList ${git}					
        - message="Automatic push of CI - Update html_whitelist. Please pull the new files before push again. [skip ci]" 
        - git add ${html_wh_file}
        - git commit -m "$message"
        - git push git@github.com:${Github_Repository}.git
    artifacts:
        paths:
            - whitelist/${CI_PROJECT_NAME}/${html_wh_file}
        expire_in: 7 day 
    only:
        variables:
            - $CI_COMMIT_MESSAGE =~ /${create_html_wh_commit}/      
    except:
        refs:
            - external_pull_requests