 = true


rCheck = checkModel("AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpSpeedControlled");
Check of AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpSpeedControlled
The model has the same number of unknowns and equations: 153
The model could not be deduced to be symbolically well-posed.
The model has
  141+2*(size(pump.maxMinTable.columns, 1)+pump.deMultiplex2.n1+pump.deMultiplex2.n2)  +pump.criticalDamping.n+pump.vol.dynBal.nPorts
scalar unknowns and
  131+2*size(pump.maxMinTable.columns, 1)+pump.deMultiplex2.n1+pump.deMultiplex2.n2  +pump.criticalDamping.n+(if vessle.use_Xi_in then 1 else (if vessle.use_X_in   then 0 else 1))+(if  not vessle.use_p_in then 1 else 0)+2*vessle.nPorts+(if    not vessle.use_T_in then 1 else 0)+(if  not pump.vol.dynBal.use_mWat_flow   then 1 else 0)+3*pump.vol.dynBal.nPorts
scalar equations.
However, exploiting the given numerical settings of parameters gives the same number of unknowns and equations:
  153
Check of AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpSpeedControlled successful.
Declaring variable: Boolean rCheck ;

Modelica.Utilities.Streams.print("    { \"file\" :  \"AixLib/Resources/Scripts/Dymola/Fluid/Movers/PumpsPolynomialBased/Examples/PumpSpeedControlled.mos\",", "AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpSpeedControlled.statistics.log");
Modelica.Utilities.Streams.print("      \"model\" : \"AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpSpeedControlled\",", "AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpSpeedControlled.statistics.log");
Modelica.Utilities.Streams.print("      \"check\" : {", "AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpSpeedControlled.statistics.log");
Modelica.Utilities.Streams.print("        \"command\" : \"checkModel(\\\"AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpSpeedControlled\\\");\",", "AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpSpeedControlled.statistics.log");
Modelica.Utilities.Streams.print("        \"result\"  : " + String(rCheck), "AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpSpeedControlled.statistics.log");
Modelica.Utilities.Streams.print("      },", "AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpSpeedControlled.statistics.log");


rScript=RunScript("modelica://AixLib/Resources/Scripts/Dymola/Fluid/Movers/PumpsPolynomialBased/Examples/PumpSpeedControlled.mos");
simulateModel("AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpSpeedControlled", tolerance=1e-6, stopTime=600.0, method="dassl", resultFile="AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpSpeedControlled");
Translation of AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpSpeedControlled
The DAE has 153 scalar unknowns and 153 scalar equations.
 
Statistics
 
Original Model
  Number of components: 35
  Variables: 381
  Constants: 13 (13 scalars)
  Parameters: 173 (369 scalars)
  Unknowns: 195 (157 scalars)
  Differentiated variables: 5 scalars
  Equations: 161
  Nontrivial: 135
Translated Model
  Constants: 128 scalars
  Free parameters: 187 scalars
  Parameter depending: 93 scalars
  Outputs: 7 scalars
  Continuous time states: 3 scalars
  Time-varying variables: 34 scalars
  Alias variables: 97 scalars
  Number of mixed real/discrete systems of equations: 0
  Sizes of linear systems of equations: { }
  Sizes after manipulation of the linear systems: { }
  Sizes of nonlinear systems of equations: {1}
  Sizes after manipulation of the nonlinear systems: {0}
  Number of numerical Jacobians: 0
  Initialization problem
    Sizes of nonlinear systems of equations: {1}
    Sizes after manipulation of the nonlinear systems: {1}
    Number of numerical Jacobians: 0
 
Selected continuous time states
Statically selected continuous time states
pump.criticalDamping.x[1]
pump.criticalDamping.x[2]
simpleValve.actPos.y
Finished
Finished
 = true

Declaring variable: Boolean rScript ;

savelog("AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpSpeedControlled.translation.log"); = true


rCheck = checkModel("AixLib.Fluid.BoilerCHP.Examples.CHPSystem");
Check of AixLib.Fluid.BoilerCHP.Examples.CHPSystem
The model has the same number of unknowns and equations: 367
The model could not be deduced to be symbolically well-posed.
The model has
  361+combinedHeatPower.vol.dynBal.nPorts+size(combinedHeatPower.combiTable1Ds.columns,   1)
scalar unknowns and
  347+size(combinedHeatPower.combiTable1Ds.columns, 1)+2*source.nPorts+(if  not   source.use_m_flow_in then 1 else 0)+(if  not source.use_T_in then 1 else 0)+(  if  not source.use_X_in then 1 else 0)+2*sink.nPorts+(if  not sink.use_p_in   then 1 else 0)+(if  not sink.use_T_in then 1 else 0)+(if  not sink.use_X_in   then 1 else 0)+(if  not combinedHeatPower.vol.dynBal.use_mWat_flow then 1   else 0)+3*combinedHeatPower.vol.dynBal.nPorts
scalar equations.
However, exploiting the given numerical settings of parameters gives the same number of unknowns and equations:
  367
Check of AixLib.Fluid.BoilerCHP.Examples.CHPSystem successful.
Declaring variable: Boolean rCheck ;

Modelica.Utilities.Streams.print("    { \"file\" :  \"AixLib/Resources/Scripts/Dymola/Fluid/BoilerCHP/Examples/CHPSystem.mos\",", "AixLib.Fluid.BoilerCHP.Examples.CHPSystem.statistics.log");
Modelica.Utilities.Streams.print("      \"model\" : \"AixLib.Fluid.BoilerCHP.Examples.CHPSystem\",", "AixLib.Fluid.BoilerCHP.Examples.CHPSystem.statistics.log");
Modelica.Utilities.Streams.print("      \"check\" : {", "AixLib.Fluid.BoilerCHP.Examples.CHPSystem.statistics.log");
Modelica.Utilities.Streams.print("        \"command\" : \"checkModel(\\\"AixLib.Fluid.BoilerCHP.Examples.CHPSystem\\\");\",", "AixLib.Fluid.BoilerCHP.Examples.CHPSystem.statistics.log");
Modelica.Utilities.Streams.print("        \"result\"  : " + String(rCheck), "AixLib.Fluid.BoilerCHP.Examples.CHPSystem.statistics.log");
Modelica.Utilities.Streams.print("      },", "AixLib.Fluid.BoilerCHP.Examples.CHPSystem.statistics.log");


rScript=RunScript("modelica://AixLib/Resources/Scripts/Dymola/Fluid/BoilerCHP/Examples/CHPSystem.mos");
simulateModel("AixLib.Fluid.BoilerCHP.Examples.CHPSystem", tolerance=1e-06, stopTime=1200, method="dassl",  resultFile="AixLib.Fluid.BoilerCHP.Examples.CHPSystem");
Translation of AixLib.Fluid.BoilerCHP.Examples.CHPSystem
The DAE has 367 scalar unknowns and 367 scalar equations.
 
Statistics
 
Original Model
  Number of components: 105
  Variables: 789
  Constants: 8 (8 scalars)
  Parameters: 363 (397 scalars)
  Unknowns: 418 (371 scalars)
  Differentiated variables: 8 scalars
  Equations: 404
  Nontrivial: 360
Translated Model
  Constants: 183 scalars
  Free parameters: 140 scalars
  Parameter depending: 115 scalars
  Continuous time states: 6 scalars
  Time-varying variables: 112 scalars
  Alias variables: 226 scalars
  Number of mixed real/discrete systems of equations: 0
  Sizes of linear systems of equations: { }
  Sizes after manipulation of the linear systems: { }
  Sizes of nonlinear systems of equations: {8, 9}
  Sizes after manipulation of the nonlinear systems: {1, 1}
  Number of numerical Jacobians: 0
  Initialization problem
    Sizes of linear systems of equations: {5}
    Sizes after manipulation of the linear systems: {0}
 
Selected continuous time states
Statically selected continuous time states
combinedHeatPower.elControl.I.y
combinedHeatPower.senTCold.T
combinedHeatPower.senTHot.T
combinedHeatPower.thControl.PI.I.y
combinedHeatPower.thControl.PI1.I.y
combinedHeatPower.vol.dynBal.medium.T
Finished
Finished
 = true

Declaring variable: Boolean rScript ;

savelog("AixLib.Fluid.BoilerCHP.Examples.CHPSystem.translation.log"); = true


rCheck = checkModel("AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Examples.Test_EnthalpyExchanger");
Check of AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Examples.Test_EnthalpyExchanger
The model has the same number of unknowns and equations: 5083
The model could not be deduced to be symbolically well-posed.
The model has
  3373+32*enthalpyExchanger.n+16*enthalpyExchanger.airDuct2.heatTransfer.n+18*  enthalpyExchanger.airDuct2.massTransfer.n+16*enthalpyExchanger.airDuct1.heatTransfer.n  +18*enthalpyExchanger.airDuct1.massTransfer.n+5*enthalpyExchanger.membrane.heatTransfer.n  +enthalpyExchanger.membrane.massTransfer.n+2*enthalpyExchanger.airDuct2.vol[1].dynBal.nPorts  +2*enthalpyExchanger.airDuct2.vol[2].dynBal.nPorts+2*enthalpyExchanger.airDuct2.vol[3].dynBal.nPorts  +2*enthalpyExchanger.airDuct2.vol[4].dynBal.nPorts+2*enthalpyExchanger.airDuct2.vol[5].dynBal.nPorts  +2*enthalpyExchanger.airDuct2.vol[6].dynBal.nPorts+2*enthalpyExchanger.airDuct2.vol[7].dynBal.nPorts  +2*enthalpyExchanger.airDuct2.vol[8].dynBal.nPorts+2*enthalpyExchanger.airDuct2.vol[9].dynBal.nPorts  +2*enthalpyExchanger.airDuct2.vol[10].dynBal.nPorts+2*enthalpyExchanger.airDuct2.vol[11].dynBal.nPorts  +2*enthalpyExchanger.airDuct2.vol[12].dynBal.nPorts+2*enthalpyExchanger.airDuct2.vol[13].dynBal.nPorts  +2*enthalpyExchanger.airDuct2.vol[14].dynBal.nPorts+2*enthalpyExchanger.airDuct2.vol[15].dynBal.nPorts  +2*enthalpyExchanger.airDuct1.vol[1].dynBal.nPorts+2*enthalpyExchanger.airDuct1.vol[2].dynBal.nPorts  +2*enthalpyExchanger.airDuct1.vol[3].dynBal.nPorts+2*enthalpyExchanger.airDuct1.vol[4].dynBal.nPorts  +2*enthalpyExchanger.airDuct1.vol[5].dynBal.nPorts+2*enthalpyExchanger.airDuct1.vol[6].dynBal.nPorts  +2*enthalpyExchanger.airDuct1.vol[7].dynBal.nPorts+2*enthalpyExchanger.airDuct1.vol[8].dynBal.nPorts  +2*enthalpyExchanger.airDuct1.vol[9].dynBal.nPorts+2*enthalpyExchanger.airDuct1.vol[10].dynBal.nPorts  +2*enthalpyExchanger.airDuct1.vol[11].dynBal.nPorts+2*enthalpyExchanger.airDuct1.vol[12].dynBal.nPorts  +2*enthalpyExchanger.airDuct1.vol[13].dynBal.nPorts+2*enthalpyExchanger.airDuct1.vol[14].dynBal.nPorts  +2*enthalpyExchanger.airDuct1.vol[15].dynBal.nPorts
scalar unknowns and
  3043+17*enthalpyExchanger.airDuct2.heatTransfer.n+19*enthalpyExchanger.airDuct2.massTransfer.n  +3*(if enthalpyExchanger.couFloArr then 2*enthalpyExchanger.n else 0)+17*  enthalpyExchanger.airDuct1.heatTransfer.n+19*enthalpyExchanger.airDuct1.massTransfer.n  +7*enthalpyExchanger.membrane.heatTransfer.n+3*enthalpyExchanger.membrane.massTransfer.n  +2*(if enthalpyExchanger.useConPer then 1 else 0)+32*enthalpyExchanger.n+(if   souAirHot.use_Xi_in then 2 else (if souAirHot.use_X_in then 1 else 3))+3*  souAirHot.nPorts+(if  not souAirHot.use_p_in then 1 else 0)+(if  not   souAirHot.use_T_in then 1 else 0)+(if sinAirHot.use_Xi_in then 2 else (if   sinAirHot.use_X_in then 1 else 3))+3*sinAirHot.nPorts+(if  not   sinAirHot.use_p_in then 1 else 0)+(if  not sinAirHot.use_T_in then 1 else 0)+(  if souAirCol.use_Xi_in then 2 else (if souAirCol.use_X_in then 1 else 3))+3*  souAirCol.nPorts+(if  not souAirCol.use_p_in then 1 else 0)+(if  not   souAirCol.use_T_in then 1 else 0)+(if sinAirCol.use_Xi_in then 2 else (if   sinAirCol.use_X_in then 1 else 3))+3*sinAirCol.nPorts+(if  not   sinAirCol.use_p_in then 1 else 0)+(if  not sinAirCol.use_T_in then 1 else 0)+5  *enthalpyExchanger.airDuct2.vol[1].dynBal.nPorts+5*enthalpyExchanger.airDuct2.vol[2].dynBal.nPorts  +5*enthalpyExchanger.airDuct2.vol[3].dynBal.nPorts+5*enthalpyExchanger.airDuct2.vol[4].dynBal.nPorts  +5*enthalpyExchanger.airDuct2.vol[5].dynBal.nPorts+5*enthalpyExchanger.airDuct2.vol[6].dynBal.nPorts  +5*enthalpyExchanger.airDuct2.vol[7].dynBal.nPorts+5*enthalpyExchanger.airDuct2.vol[8].dynBal.nPorts  +5*enthalpyExchanger.airDuct2.vol[9].dynBal.nPorts+5*enthalpyExchanger.airDuct2.vol[10].dynBal.nPorts  +5*enthalpyExchanger.airDuct2.vol[11].dynBal.nPorts+5*enthalpyExchanger.airDuct2.vol[12].dynBal.nPorts  +5*enthalpyExchanger.airDuct2.vol[13].dynBal.nPorts+5*enthalpyExchanger.airDuct2.vol[14].dynBal.nPorts  +5*enthalpyExchanger.airDuct2.vol[15].dynBal.nPorts+5*enthalpyExchanger.airDuct1.vol[1].dynBal.nPorts  +5*enthalpyExchanger.airDuct1.vol[2].dynBal.nPorts+5*enthalpyExchanger.airDuct1.vol[3].dynBal.nPorts  +5*enthalpyExchanger.airDuct1.vol[4].dynBal.nPorts+5*enthalpyExchanger.airDuct1.vol[5].dynBal.nPorts  +5*enthalpyExchanger.airDuct1.vol[6].dynBal.nPorts+5*enthalpyExchanger.airDuct1.vol[7].dynBal.nPorts  +5*enthalpyExchanger.airDuct1.vol[8].dynBal.nPorts+5*enthalpyExchanger.airDuct1.vol[9].dynBal.nPorts  +5*enthalpyExchanger.airDuct1.vol[10].dynBal.nPorts+5*enthalpyExchanger.airDuct1.vol[11].dynBal.nPorts  +5*enthalpyExchanger.airDuct1.vol[12].dynBal.nPorts+5*enthalpyExchanger.airDuct1.vol[13].dynBal.nPorts  +5*enthalpyExchanger.airDuct1.vol[14].dynBal.nPorts+5*enthalpyExchanger.airDuct1.vol[15].dynBal.nPorts
scalar equations.
However, exploiting the given numerical settings of parameters gives the same number of unknowns and equations:
  5083
Check of AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Examples.Test_EnthalpyExchanger successful.
Declaring variable: Boolean rCheck ;

Modelica.Utilities.Streams.print("    { \"file\" :  \"AixLib/Resources/Scripts/Dymola/Fluid/MassExchangers/MembraneBasedEnthalpyExchangers/Examples/Test_EnthalpyExchanger.mos\",", "AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Examples.Test_EnthalpyExchanger.statistics.log");
Modelica.Utilities.Streams.print("      \"model\" : \"AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Examples.Test_EnthalpyExchanger\",", "AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Examples.Test_EnthalpyExchanger.statistics.log");
Modelica.Utilities.Streams.print("      \"check\" : {", "AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Examples.Test_EnthalpyExchanger.statistics.log");
Modelica.Utilities.Streams.print("        \"command\" : \"checkModel(\\\"AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Examples.Test_EnthalpyExchanger\\\");\",", "AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Examples.Test_EnthalpyExchanger.statistics.log");
Modelica.Utilities.Streams.print("        \"result\"  : " + String(rCheck), "AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Examples.Test_EnthalpyExchanger.statistics.log");
Modelica.Utilities.Streams.print("      },", "AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Examples.Test_EnthalpyExchanger.statistics.log");


rScript=RunScript("modelica://AixLib/Resources/Scripts/Dymola/Fluid/MassExchangers/MembraneBasedEnthalpyExchangers/Examples/Test_EnthalpyExchanger.mos");
simulateModel("AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Examples.Test_EnthalpyExchanger", stopTime=7200, outputInterval=10, method="dassl", tolerance=1e-6, resultFile="AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Examples.Test_EnthalpyExchanger");
Translation of AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Examples.Test_EnthalpyExchanger
The DAE has 5083 scalar unknowns and 5083 scalar equations.
Redundant consistent initial conditions.
Removed the following equations which are redundant and consistent: 
  if (enthalpyExchanger.airDuct2.vol[1].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[1].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[1].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[1].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[1].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[1].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[1].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[2].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[2].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[2].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[2].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[2].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[2].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[2].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[3].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[3].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[3].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[3].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[3].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[3].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[3].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[4].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[4].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[4].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[4].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[4].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[4].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[4].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[5].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[5].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[5].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[5].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[5].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[5].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[5].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[6].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[6].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[6].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[6].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[6].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[6].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[6].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[7].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[7].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[7].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[7].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[7].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[7].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[7].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[8].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[8].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[8].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[8].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[8].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[8].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[8].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[9].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[9].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[9].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[9].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[9].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[9].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[9].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[10].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[10].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[10].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[10].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[10].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[10].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[10].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[11].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[11].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[11].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[11].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[11].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[11].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[11].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[12].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[12].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[12].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[12].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[12].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[12].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[12].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[13].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[13].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[13].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[13].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[13].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[13].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[13].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[14].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[14].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[14].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[14].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[14].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[14].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[14].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[15].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[15].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[15].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[15].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[15].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[15].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[15].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[1].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[1].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[1].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[1].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[1].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[1].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[1].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[2].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[2].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[2].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[2].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[2].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[2].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[2].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[3].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[3].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[3].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[3].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[3].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[3].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[3].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[4].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[4].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[4].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[4].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[4].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[4].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[4].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[5].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[5].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[5].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[5].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[5].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[5].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[5].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[6].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[6].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[6].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[6].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[6].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[6].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[6].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[7].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[7].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[7].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[7].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[7].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[7].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[7].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[8].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[8].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[8].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[8].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[8].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[8].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[8].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[9].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[9].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[9].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[9].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[9].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[9].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[9].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[10].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[10].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[10].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[10].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[10].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[10].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[10].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[11].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[11].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[11].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[11].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[11].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[11].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[11].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[12].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[12].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[12].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[12].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[12].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[12].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[12].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[13].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[13].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[13].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[13].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[13].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[13].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[13].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[14].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[14].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[14].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[14].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[14].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[14].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[14].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[15].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[15].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[15].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[15].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[15].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[15].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[15].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
 
This required evaluation of 
the interactive parameters 
    sinAirCol.p(start = 101325)
    sinAirHot.p(start = 101325)
 
The redundancies involve
initial equations: 
  enthalpyExchanger.airDuct2.vol[1].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[2].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[3].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[4].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[5].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[6].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[7].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[8].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[9].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[10].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[11].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[12].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[13].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[14].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[15].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[1].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[2].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[3].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[4].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[5].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[6].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[7].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[8].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[9].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[10].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[11].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[12].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[13].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[14].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[15].dynBal.medium.p = 101325.0;
 
 
Statistics
 
Original Model
  Number of components: 556
  Variables: 6183
  Constants: 154 (154 scalars)
  Parameters: 2180 (2384 scalars)
  Unknowns: 3849 (5219 scalars)
  Differentiated variables: 117 scalars
  Equations: 2512
  Nontrivial: 1919
Translated Model
  Constants: 2169 scalars
  Free parameters: 163 scalars
  Parameter depending: 1007 scalars
  Continuous time states: 87 scalars
  Time-varying variables: 1614 scalars
  Alias variables: 2804 scalars
  Number of mixed real/discrete systems of equations: 0
  Sizes of linear systems of equations: {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,   2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3}
  Sizes after manipulation of the linear systems: {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}
  Sizes of nonlinear systems of equations: {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1}
  Sizes after manipulation of the nonlinear systems: {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0}
  Number of numerical Jacobians: 0
 
Selected continuous time states
Statically selected continuous time states
enthalpyExchanger.airDuct1.senRelHum.phi
enthalpyExchanger.airDuct1.senTem.T
enthalpyExchanger.airDuct1.vol[1].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[1].dynBal.U
enthalpyExchanger.airDuct1.vol[2].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[2].dynBal.U
enthalpyExchanger.airDuct1.vol[3].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[3].dynBal.U
enthalpyExchanger.airDuct1.vol[4].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[4].dynBal.U
enthalpyExchanger.airDuct1.vol[5].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[5].dynBal.U
enthalpyExchanger.airDuct1.vol[6].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[6].dynBal.U
enthalpyExchanger.airDuct1.vol[7].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[7].dynBal.U
enthalpyExchanger.airDuct1.vol[8].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[8].dynBal.U
enthalpyExchanger.airDuct1.vol[9].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[9].dynBal.U
enthalpyExchanger.airDuct1.vol[10].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[10].dynBal.U
enthalpyExchanger.airDuct1.vol[11].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[11].dynBal.U
enthalpyExchanger.airDuct1.vol[12].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[12].dynBal.U
enthalpyExchanger.airDuct1.vol[13].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[13].dynBal.U
enthalpyExchanger.airDuct1.vol[14].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[14].dynBal.U
enthalpyExchanger.airDuct1.vol[15].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[15].dynBal.U
enthalpyExchanger.airDuct2.senRelHum.phi
enthalpyExchanger.airDuct2.senTem.T
enthalpyExchanger.airDuct2.vol[1].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[1].dynBal.U
enthalpyExchanger.airDuct2.vol[2].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[2].dynBal.U
enthalpyExchanger.airDuct2.vol[3].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[3].dynBal.U
enthalpyExchanger.airDuct2.vol[4].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[4].dynBal.U
enthalpyExchanger.airDuct2.vol[5].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[5].dynBal.U
enthalpyExchanger.airDuct2.vol[6].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[6].dynBal.U
enthalpyExchanger.airDuct2.vol[7].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[7].dynBal.U
enthalpyExchanger.airDuct2.vol[8].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[8].dynBal.U
enthalpyExchanger.airDuct2.vol[9].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[9].dynBal.U
enthalpyExchanger.airDuct2.vol[10].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[10].dynBal.U
enthalpyExchanger.airDuct2.vol[11].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[11].dynBal.U
enthalpyExchanger.airDuct2.vol[12].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[12].dynBal.U
enthalpyExchanger.airDuct2.vol[13].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[13].dynBal.U
enthalpyExchanger.airDuct2.vol[14].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[14].dynBal.U
enthalpyExchanger.airDuct2.vol[15].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[15].dynBal.U
enthalpyExchanger.membrane.heatTransfer.Ts[1]
enthalpyExchanger.membrane.heatTransfer.Ts[2]
enthalpyExchanger.membrane.heatTransfer.Ts[3]
enthalpyExchanger.membrane.heatTransfer.Ts[4]
enthalpyExchanger.membrane.heatTransfer.Ts[5]
enthalpyExchanger.membrane.heatTransfer.Ts[6]
enthalpyExchanger.membrane.heatTransfer.Ts[7]
enthalpyExchanger.membrane.heatTransfer.Ts[8]
enthalpyExchanger.membrane.heatTransfer.Ts[9]
enthalpyExchanger.membrane.heatTransfer.Ts[10]
enthalpyExchanger.membrane.heatTransfer.Ts[11]
enthalpyExchanger.membrane.heatTransfer.Ts[12]
enthalpyExchanger.membrane.heatTransfer.Ts[13]
enthalpyExchanger.membrane.heatTransfer.Ts[14]
enthalpyExchanger.membrane.heatTransfer.Ts[15]
senMasFraColIn.X
senMasFraColOut.X
senMasFraHotIn.X
senMasFraHotOut.X
senTemColIn.T
senTemColOut.T
senTemHotIn.T
senTemHotOut.T
Finished
Finished
 = true

Declaring variable: Boolean rScript ;

savelog("AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Examples.Test_EnthalpyExchanger.translation.log"); = true


rCheck = checkModel("AixLib.Fluid.HeatPumps.ModularReversible.Examples.TableData3D_OneRoomRadiator");
Check of AixLib.Fluid.HeatPumps.ModularReversible.Examples.TableData3D_OneRoomRadiator
The model has the same number of unknowns and equations: 1661
The model could not be deduced to be symbolically well-posed.
The model has
  1618+2*(rad.nEle+vol.dynBal.nPorts)+max([size(timTab.columns, 1); size(  timTab.offset, 1)])+rad.vol[1].dynBal.nPorts+rad.vol[2].dynBal.nPorts+  rad.vol[3].dynBal.nPorts+rad.vol[4].dynBal.nPorts+rad.vol[5].dynBal.nPorts+  rad.sumCon.nin+rad.sumRad.nin+heaPum.con.vol.dynBal.nPorts+heaPum.eva.vol.dynBal.nPorts  +size(heaPum.safCtr.opeEnv.bouMapHea.tabBou.columns, 1)+heaPum.safCtr.opeEnv.bouMapHea.nor.nu  +size(heaPum.safCtr.opeEnv.bouMapCoo.tabBou.columns, 1)+heaPum.safCtr.opeEnv.bouMapCoo.nor.nu
scalar unknowns and
  1578+max([size(timTab.columns, 1); size(timTab.offset, 1)])+(if weaDat.pAtmSou   == AixLib.BoundaryConditions.Types.DataSource.Parameter then 1 else 0)+(if   weaDat.TDewPoiSou == AixLib.BoundaryConditions.Types.DataSource.Parameter   then 1 else 0)+(if weaDat.TDryBulSou == AixLib.BoundaryConditions.Types.DataSource.  Parameter then 1 else 0)+(if weaDat.TBlaSkySou == AixLib.BoundaryConditions.Types.DataSource.  Parameter then 1 else 0)+(if weaDat.relHumSou == AixLib.BoundaryConditions.Types.DataSource.  Parameter then 1 else 0)+(if weaDat.opaSkyCovSou == AixLib.BoundaryConditions.Types.DataSource.  Parameter then 1 else 0)+(if weaDat.ceiHeiSou == AixLib.BoundaryConditions.Types.DataSource.  Parameter then 1 else 0)+(if weaDat.totSkyCovSou == AixLib.BoundaryConditions.Types.DataSource.  Parameter then 1 else 0)+(if weaDat.winSpeSou == AixLib.BoundaryConditions.Types.DataSource.  Parameter then 1 else 0)+(if weaDat.winDirSou == AixLib.BoundaryConditions.Types.DataSource.  Parameter then 1 else 0)+(if weaDat.HInfHorSou == AixLib.BoundaryConditions.Types.DataSource.  Parameter then 1 else 0)+(if weaDat.HSou == AixLib.BoundaryConditions.Types.RadiationDataSource.  Input_HDirNor_HDifHor then 2 else 1)+(if weaDat.HSou == AixLib.BoundaryConditions.Types.RadiationDataSource.  Input_HDirNor_HGloHor then 2 else 1)+(if weaDat.HSou == AixLib.BoundaryConditions.Types.RadiationDataSource.  Input_HGloHor_HDifHor then 2 else 1)+(if sou.use_Xi_in then 1 else (if   sou.use_X_in then 0 else 1))+(if  not sou.use_p_in then 1 else 0)+2*sou.nPorts  +(if  not sou.use_T_in then 1 else 0)+(if sin.use_Xi_in then 1 else (if   sin.use_X_in then 0 else 1))+(if  not sin.use_p_in then 1 else 0)+2*sin.nPorts  +(if  not sin.use_T_in then 1 else 0)+(if preSou.use_Xi_in then 1 else (if   preSou.use_X_in then 0 else 1))+(if  not preSou.use_p_in then 1 else 0)+2*  preSou.nPorts+(if  not preSou.use_T_in then 1 else 0)+(if  not   vol.dynBal.use_mWat_flow then 1 else 0)+5*vol.dynBal.nPorts+(if  not   rad.vol[1].dynBal.use_mWat_flow then 1 else 0)+3*rad.vol[1].dynBal.nPorts+(if    not rad.vol[2].dynBal.use_mWat_flow then 1 else 0)+3*rad.vol[2].dynBal.nPorts  +(if  not rad.vol[3].dynBal.use_mWat_flow then 1 else 0)+3*rad.vol[3].dynBal.nPorts  +(if  not rad.vol[4].dynBal.use_mWat_flow then 1 else 0)+3*rad.vol[4].dynBal.nPorts  +(if  not rad.vol[5].dynBal.use_mWat_flow then 1 else 0)+3*rad.vol[5].dynBal.nPorts  +(if  not pumHeaPum.vol.steBal.use_mWat_flow then 1 else 0)+(if  not   pumHeaPumSou.vol.steBal.use_mWat_flow then 1 else 0)+(if  not heaPum.con.vol.dynBal.use_mWat_flow   then 1 else 0)+3*heaPum.con.vol.dynBal.nPorts+(if  not heaPum.eva.vol.dynBal.use_mWat_flow   then 1 else 0)+3*heaPum.eva.vol.dynBal.nPorts+size(heaPum.safCtr.opeEnv.bouMapHea.tabBou.columns,   1)+size(heaPum.safCtr.opeEnv.bouMapCoo.tabBou.columns, 1)+2*rad.nEle
scalar equations.
However, exploiting the given numerical settings of parameters gives the same number of unknowns and equations:
  1661
Check of AixLib.Fluid.HeatPumps.ModularReversible.Examples.TableData3D_OneRoomRadiator successful.
Declaring variable: Boolean rCheck ;

Modelica.Utilities.Streams.print("    { \"file\" :  \"AixLib/Resources/Scripts/Dymola/Fluid/HeatPumps/ModularReversible/Examples/TableData3D_OneRoomRadiator.mos\",", "AixLib.Fluid.HeatPumps.ModularReversible.Examples.TableData3D_OneRoomRadiator.statistics.log");
Modelica.Utilities.Streams.print("      \"model\" : \"AixLib.Fluid.HeatPumps.ModularReversible.Examples.TableData3D_OneRoomRadiator\",", "AixLib.Fluid.HeatPumps.ModularReversible.Examples.TableData3D_OneRoomRadiator.statistics.log");
Modelica.Utilities.Streams.print("      \"check\" : {", "AixLib.Fluid.HeatPumps.ModularReversible.Examples.TableData3D_OneRoomRadiator.statistics.log");
Modelica.Utilities.Streams.print("        \"command\" : \"checkModel(\\\"AixLib.Fluid.HeatPumps.ModularReversible.Examples.TableData3D_OneRoomRadiator\\\");\",", "AixLib.Fluid.HeatPumps.ModularReversible.Examples.TableData3D_OneRoomRadiator.statistics.log");
Modelica.Utilities.Streams.print("        \"result\"  : " + String(rCheck), "AixLib.Fluid.HeatPumps.ModularReversible.Examples.TableData3D_OneRoomRadiator.statistics.log");
Modelica.Utilities.Streams.print("      },", "AixLib.Fluid.HeatPumps.ModularReversible.Examples.TableData3D_OneRoomRadiator.statistics.log");


rScript=RunScript("modelica://AixLib/Resources/Scripts/Dymola/Fluid/HeatPumps/ModularReversible/Examples/TableData3D_OneRoomRadiator.mos");
simulateModel("AixLib.Fluid.HeatPumps.ModularReversible.Examples.TableData3D_OneRoomRadiator", stopTime=86400, method="CVode", tolerance=1e-08, resultFile="AixLib.Fluid.HeatPumps.ModularReversible.Examples.TableData3D_OneRoomRadiator");
Translation of AixLib.Fluid.HeatPumps.ModularReversible.Examples.TableData3D_OneRoomRadiator
The DAE has 1661 scalar unknowns and 1661 scalar equations.
 
Statistics
 
Original Model
  Number of components: 454
  Variables: 3594
  Constants: 78 (78 scalars)
  Parameters: 1724 (2060 scalars)
  Unknowns: 1792 (1704 scalars)
  Differentiated variables: 22 scalars
  Equations: 1679
  Nontrivial: 1400
Translated Model
  Constants: 1492 scalars
  Free parameters: 250 scalars
  Parameter depending: 755 scalars
  Outputs: 24 scalars
  Continuous time states: 14 scalars
  Time-varying variables: 359 scalars
  Alias variables: 986 scalars
  Number of mixed real/discrete systems of equations: 0
  Sizes of linear systems of equations: {2, 2, 2, 2, 2, 4}
  Sizes after manipulation of the linear systems: {0, 0, 0, 0, 0, 0}
  Sizes of nonlinear systems of equations: {3}
  Sizes after manipulation of the nonlinear systems: {1}
  Number of numerical Jacobians: 0
  Initialization problem
    Sizes of nonlinear systems of equations: {11, 1, 1, 2}
    Sizes after manipulation of the nonlinear systems: {5, 1, 1, 1}
    Sizes of simplified homotopy nonlinear systems of equations: {2}
    Sizes after manipulation of the simplified homotopy nonlinear systems: {1}
    Number of numerical Jacobians: 0
 
Selected continuous time states
Statically selected continuous time states
heaPum.con.vol.dynBal.U
heaPum.eva.vol.dynBal.U
oneRooRadHeaPumCtr.PIDCoo.I.y
oneRooRadHeaPumCtr.PIDHea.I.y
rad.vol[1].dynBal.U
rad.vol[2].dynBal.U
rad.vol[3].dynBal.U
rad.vol[4].dynBal.U
rad.vol[5].dynBal.U
temRet.T
temSup.T
vol.dynBal.m
vol.dynBal.medium.Xi[1]
vol.hOut_internal
Finished
Finished
 = true

Declaring variable: Boolean rScript ;

savelog("AixLib.Fluid.HeatPumps.ModularReversible.Examples.TableData3D_OneRoomRadiator.translation.log"); = true


rCheck = checkModel("AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.PlugFlowPipeZeta");
Check of AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.PlugFlowPipeZeta
Warning: Local "m_flow_small" conflict with inherited. Should be identical
Warning: Component m_flow_small(min = << Empty >>),
  but previously m_flow_small(min = 0).
  The components are not identical.
 
  For element m_flow_small found at
 
  File: /tmp/tmp-AixLib-0-1z_uh3gx/AixLib/Fluid/DistrictHeatingCooling/Pipes/PlugFlowPipeZeta.mo, line 36
  Conflict with element from
  File: /tmp/tmp-AixLib-0-1z_uh3gx/AixLib/Fluid/Interfaces/PartialTwoPortInterface.mo, line 10
 Component context: pip
  Component declared as PlugFlowPipeZeta pip in AixLib.Fluid.DistrictHeatingCooling.Pipes
  File: /tmp/tmp-AixLib-0-1z_uh3gx/AixLib/Fluid/DistrictHeatingCooling/Pipes/Examples/PlugFlowPipeZeta.mo, line 18
The model has the same number of unknowns and equations: 187
The model could not be deduced to be symbolically well-posed.
The model has
  185+pip.vol.dynBal.nPorts
scalar unknowns and
  171+(if sin.use_Xi_in then 1 else (if sin.use_X_in then 0 else 1))+(if  not   sin.use_p_in then 1 else 0)+2*sin.nPorts+(if  not sin.use_T_in then 1 else 0)+  (if sou.use_Xi_in then 1 else (if sou.use_X_in then 0 else 1))+(if  not   sou.use_m_flow_in then 1 else 0)+2*sou.nPorts+(if  not sou.use_T_in then 1   else 0)+(if  not pip.vol.dynBal.use_mWat_flow then 1 else 0)+3*  pip.vol.dynBal.nPorts
scalar equations.
However, exploiting the given numerical settings of parameters gives the same number of unknowns and equations:
  187
Check of AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.PlugFlowPipeZeta successful.
Declaring variable: Boolean rCheck ;

Modelica.Utilities.Streams.print("    { \"file\" :  \"AixLib/Resources/Scripts/Dymola/Fluid/DistrictHeatingCooling/Pipes/Examples/PlugFlowPipeZeta.mos\",", "AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.PlugFlowPipeZeta.statistics.log");
Modelica.Utilities.Streams.print("      \"model\" : \"AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.PlugFlowPipeZeta\",", "AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.PlugFlowPipeZeta.statistics.log");
Modelica.Utilities.Streams.print("      \"check\" : {", "AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.PlugFlowPipeZeta.statistics.log");
Modelica.Utilities.Streams.print("        \"command\" : \"checkModel(\\\"AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.PlugFlowPipeZeta\\\");\",", "AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.PlugFlowPipeZeta.statistics.log");
Modelica.Utilities.Streams.print("        \"result\"  : " + String(rCheck), "AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.PlugFlowPipeZeta.statistics.log");
Modelica.Utilities.Streams.print("      },", "AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.PlugFlowPipeZeta.statistics.log");


rScript=RunScript("modelica://AixLib/Resources/Scripts/Dymola/Fluid/DistrictHeatingCooling/Pipes/Examples/PlugFlowPipeZeta.mos");
simulateModel("AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.PlugFlowPipeZeta", stopTime=1000, method="dassl", tolerance=1e-6, resultFile="AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.PlugFlowPipeZeta");
Translation of AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.PlugFlowPipeZeta
Warning: Local "m_flow_small" conflict with inherited. Should be identical
Warning: Component m_flow_small(min = << Empty >>),
  but previously m_flow_small(min = 0).
  The components are not identical.
 
  For element m_flow_small found at
 
  File: /tmp/tmp-AixLib-0-1z_uh3gx/AixLib/Fluid/DistrictHeatingCooling/Pipes/PlugFlowPipeZeta.mo, line 36
  Conflict with element from
  File: /tmp/tmp-AixLib-0-1z_uh3gx/AixLib/Fluid/Interfaces/PartialTwoPortInterface.mo, line 10
 Component context: pip
  Component declared as PlugFlowPipeZeta pip in AixLib.Fluid.DistrictHeatingCooling.Pipes
  File: /tmp/tmp-AixLib-0-1z_uh3gx/AixLib/Fluid/DistrictHeatingCooling/Pipes/Examples/PlugFlowPipeZeta.mo, line 18
The DAE has 187 scalar unknowns and 187 scalar equations.
 
Statistics
 
Original Model
  Number of components: 34
  Variables: 539
  Constants: 10 (10 scalars)
  Parameters: 264 (257 scalars)
  Unknowns: 265 (193 scalars)
  Differentiated variables: 6 scalars
  Equations: 220
  Nontrivial: 186
Translated Model
  Constants: 191 scalars
  Free parameters: 46 scalars
  Parameter depending: 66 scalars
  Continuous time states: 5 scalars
  Time-varying variables: 39 scalars
  Alias variables: 118 scalars
  Number of mixed real/discrete systems of equations: 0
  Sizes of linear systems of equations: { }
  Sizes after manipulation of the linear systems: { }
  Sizes of nonlinear systems of equations: { }
  Sizes after manipulation of the nonlinear systems: { }
  Number of numerical Jacobians: 0
 
Selected continuous time states
Statically selected continuous time states
pip.plugFlowCore.del.x
pip.plugFlowCore.timDel.x
pip.vol.dynBal.U
senTemIn.T
senTemOut.T
Finished
Warning: WARNINGS have been issued.
Finished
 = true

Declaring variable: Boolean rScript ;

savelog("AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.PlugFlowPipeZeta.translation.log"); = true


rCheck = checkModel("AixLib.Fluid.Storage.Examples.StorageDetailedExample");
Check of AixLib.Fluid.Storage.Examples.StorageDetailedExample
The model has the same number of unknowns and equations: 2714
Check of AixLib.Fluid.Storage.Examples.StorageDetailedExample successful.
Declaring variable: Boolean rCheck ;

Modelica.Utilities.Streams.print("    { \"file\" :  \"AixLib/Resources/Scripts/Dymola/Fluid/Storage/Examples/StorageDetailedExample.mos\",", "AixLib.Fluid.Storage.Examples.StorageDetailedExample.statistics.log");
Modelica.Utilities.Streams.print("      \"model\" : \"AixLib.Fluid.Storage.Examples.StorageDetailedExample\",", "AixLib.Fluid.Storage.Examples.StorageDetailedExample.statistics.log");
Modelica.Utilities.Streams.print("      \"check\" : {", "AixLib.Fluid.Storage.Examples.StorageDetailedExample.statistics.log");
Modelica.Utilities.Streams.print("        \"command\" : \"checkModel(\\\"AixLib.Fluid.Storage.Examples.StorageDetailedExample\\\");\",", "AixLib.Fluid.Storage.Examples.StorageDetailedExample.statistics.log");
Modelica.Utilities.Streams.print("        \"result\"  : " + String(rCheck), "AixLib.Fluid.Storage.Examples.StorageDetailedExample.statistics.log");
Modelica.Utilities.Streams.print("      },", "AixLib.Fluid.Storage.Examples.StorageDetailedExample.statistics.log");


rScript=RunScript("modelica://AixLib/Resources/Scripts/Dymola/Fluid/Storage/Examples/StorageDetailedExample.mos");
simulateModel("AixLib.Fluid.Storage.Examples.StorageDetailedExample", tolerance=1e-6, stopTime=86400, method="dassl", resultFile="AixLib.Fluid.Storage.Examples.StorageDetailedExample");
Translation of AixLib.Fluid.Storage.Examples.StorageDetailedExample
The DAE has 2714 scalar unknowns and 2714 scalar equations.
 
Statistics
 
Original Model
  Number of components: 532
  Variables: 7129
  Constants: 124 (124 scalars)
  Parameters: 3361 (3250 scalars)
  Unknowns: 3644 (2792 scalars)
  Differentiated variables: 92 scalars
  Equations: 2756
  Nontrivial: 2117
Translated Model
  Constants: 2443 scalars
  Free parameters: 221 scalars
  Parameter depending: 1324 scalars
  Continuous time states: 66 scalars
  Time-varying variables: 623 scalars
  Alias variables: 1555 scalars
  Number of mixed real/discrete systems of equations: 0
  Sizes of linear systems of equations: {2, 2, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,   2, 2, 2, 2, 2, 2, 2, 2, 2}
  Sizes after manipulation of the linear systems: {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0}
  Sizes of nonlinear systems of equations: {6, 6, 6, 6, 6, 6, 6, 6}
  Sizes after manipulation of the nonlinear systems: {1, 1, 1, 1, 1, 1, 1, 1}
  Number of numerical Jacobians: 0
 
Selected continuous time states
Statically selected continuous time states
bufferStorage.bottomCover.loadIns.T
bufferStorage.bottomCover.loadWall.T
bufferStorage.heatingCoil1.pipe[1].del.x
bufferStorage.heatingCoil1.pipe[1].timDel.x
bufferStorage.heatingCoil1.pipe[1].vol_a.dynBal.U
bufferStorage.heatingCoil1.pipe[1].vol_b.dynBal.U
bufferStorage.heatingCoil1.pipe[2].del.x
bufferStorage.heatingCoil1.pipe[2].timDel.x
bufferStorage.heatingCoil1.pipe[2].vol_a.dynBal.U
bufferStorage.heatingCoil1.pipe[2].vol_b.dynBal.U
bufferStorage.heatingCoil1.pipe[3].del.x
bufferStorage.heatingCoil1.pipe[3].timDel.x
bufferStorage.heatingCoil1.pipe[3].vol_a.dynBal.U
bufferStorage.heatingCoil1.pipe[3].vol_b.dynBal.U
bufferStorage.heatingCoil1.pipe[4].del.x
bufferStorage.heatingCoil1.pipe[4].timDel.x
bufferStorage.heatingCoil1.pipe[4].vol_a.dynBal.U
bufferStorage.heatingCoil1.pipe[4].vol_b.dynBal.U
bufferStorage.heatingCoil1.pipe[5].del.x
bufferStorage.heatingCoil1.pipe[5].timDel.x
bufferStorage.heatingCoil1.pipe[5].vol_a.dynBal.U
bufferStorage.heatingCoil1.pipe[5].vol_b.dynBal.U
bufferStorage.heatingCoil1.pipe[6].del.x
bufferStorage.heatingCoil1.pipe[6].timDel.x
bufferStorage.heatingCoil1.pipe[6].vol_a.dynBal.U
bufferStorage.heatingCoil1.pipe[6].vol_b.dynBal.U
bufferStorage.heatingCoil1.pipe[7].del.x
bufferStorage.heatingCoil1.pipe[7].timDel.x
bufferStorage.heatingCoil1.pipe[7].vol_a.dynBal.U
bufferStorage.heatingCoil1.pipe[7].vol_b.dynBal.U
bufferStorage.heatingCoil1.pipe[8].del.x
bufferStorage.heatingCoil1.pipe[8].timDel.x
bufferStorage.heatingCoil1.pipe[8].vol_a.dynBal.U
bufferStorage.heatingCoil1.pipe[8].vol_b.dynBal.U
bufferStorage.layer[1].dynBal.U
bufferStorage.layer[2].dynBal.U
bufferStorage.layer[3].dynBal.U
bufferStorage.layer[4].dynBal.U
bufferStorage.layer[5].dynBal.U
bufferStorage.layer[6].dynBal.U
bufferStorage.layer[7].dynBal.U
bufferStorage.layer[8].dynBal.U
bufferStorage.layer[9].dynBal.U
bufferStorage.layer[10].dynBal.U
bufferStorage.storageMantle[1].Insulation.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[1].Wall.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[2].Insulation.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[2].Wall.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[3].Insulation.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[3].Wall.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[4].Insulation.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[4].Wall.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[5].Insulation.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[5].Wall.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[6].Insulation.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[6].Wall.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[7].Insulation.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[7].Wall.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[8].Insulation.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[8].Wall.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[9].Insulation.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[9].Wall.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[10].Insulation.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[10].Wall.CylindricLoad1.heatCapacitor.T
bufferStorage.topCover.loadIns.T
bufferStorage.topCover.loadWall.T
Finished
Finished
 = true

Declaring variable: Boolean rScript ;

savelog("AixLib.Fluid.Storage.Examples.StorageDetailedExample.translation.log"); = true


rCheck = checkModel("AixLib.Fluid.FixedResistances.Examples.CompareFixedResistances");
Warning: Can not resolve link "AixLib.Fluid.FixedResistances.FixedResistanceDpM" in AixLib.Fluid.FixedResistances.Examples.CompareFixedResistances
Check of AixLib.Fluid.FixedResistances.Examples.CompareFixedResistances
The model has the same number of unknowns and equations: 60
The model could not be deduced to be symbolically well-posed.
The model has
  60
scalar unknowns and
  48+(if sou1.use_Xi_in then 1 else (if sou1.use_X_in then 0 else 1))+(if  not   sou1.use_p_in then 1 else 0)+2*sou1.nPorts+(if  not sou1.use_T_in then 1 else 0)  +(if sin1.use_Xi_in then 1 else (if sin1.use_X_in then 0 else 1))+(if  not   sin1.use_p_in then 1 else 0)+2*sin1.nPorts+(if  not sin1.use_T_in then 1 else 0)
scalar equations.
However, exploiting the given numerical settings of parameters gives the same number of unknowns and equations:
  60
Check of AixLib.Fluid.FixedResistances.Examples.CompareFixedResistances successful.
Declaring variable: Boolean rCheck ;

Modelica.Utilities.Streams.print("    { \"file\" :  \"AixLib/Resources/Scripts/Dymola/Fluid/FixedResistances/Examples/CompareFixedResistances.mos\",", "AixLib.Fluid.FixedResistances.Examples.CompareFixedResistances.statistics.log");
Modelica.Utilities.Streams.print("      \"model\" : \"AixLib.Fluid.FixedResistances.Examples.CompareFixedResistances\",", "AixLib.Fluid.FixedResistances.Examples.CompareFixedResistances.statistics.log");
Modelica.Utilities.Streams.print("      \"check\" : {", "AixLib.Fluid.FixedResistances.Examples.CompareFixedResistances.statistics.log");
Modelica.Utilities.Streams.print("        \"command\" : \"checkModel(\\\"AixLib.Fluid.FixedResistances.Examples.CompareFixedResistances\\\");\",", "AixLib.Fluid.FixedResistances.Examples.CompareFixedResistances.statistics.log");
Modelica.Utilities.Streams.print("        \"result\"  : " + String(rCheck), "AixLib.Fluid.FixedResistances.Examples.CompareFixedResistances.statistics.log");
Modelica.Utilities.Streams.print("      },", "AixLib.Fluid.FixedResistances.Examples.CompareFixedResistances.statistics.log");


rScript=RunScript("modelica://AixLib/Resources/Scripts/Dymola/Fluid/FixedResistances/Examples/CompareFixedResistances.mos");
simulateModel("AixLib.Fluid.FixedResistances.Examples.CompareFixedResistances", stopTime=3600, method="dassl", tolerance=1e-006, resultFile="AixLib.Fluid.FixedResistances.Examples.CompareFixedResistances");
Translation of AixLib.Fluid.FixedResistances.Examples.CompareFixedResistances
The DAE has 60 scalar unknowns and 60 scalar equations.
 
Statistics
 
Original Model
  Number of components: 12
  Variables: 182
  Constants: 6 (6 scalars)
  Parameters: 88 (86 scalars)
  Unknowns: 88 (60 scalars)
  Equations: 88
  Nontrivial: 81
Translated Model
  Constants: 67 scalars
  Free parameters: 22 scalars
  Parameter depending: 9 scalars
  Time-varying variables: 7 scalars
  Alias variables: 47 scalars
  Number of mixed real/discrete systems of equations: 0
  Sizes of linear systems of equations: { }
  Sizes after manipulation of the linear systems: { }
  Sizes of nonlinear systems of equations: { }
  Sizes after manipulation of the nonlinear systems: { }
  Number of numerical Jacobians: 0
 
Selected continuous time states
Finished
Finished
 = true

Declaring variable: Boolean rScript ;

savelog("AixLib.Fluid.FixedResistances.Examples.CompareFixedResistances.translation.log"); = true


rCheck = checkModel("AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopHeatPumpCarnot");
Check of AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopHeatPumpCarnot
The model has the same number of unknowns and equations: 699
The model could not be deduced to be symbolically well-posed.
The model has
  691+pipeSupply.vol_b.dynBal.nPorts+pipeSupply.vol_a.dynBal.nPorts+  pipeReturn.vol_b.dynBal.nPorts+pipeReturn.vol_a.dynBal.nPorts
scalar unknowns and
  647+(if sourceIdeal.source.use_Xi_in then 1 else (if sourceIdeal.source.use_X_in   then 0 else 1))+(if  not sourceIdeal.source.use_p_in then 1 else 0)+2*  sourceIdeal.source.nPorts+(if  not sourceIdeal.source.use_T_in then 1 else 0)+  (if sourceIdeal.sink.use_Xi_in then 1 else (if sourceIdeal.sink.use_X_in then 0   else 1))+(if  not sourceIdeal.sink.use_p_in then 1 else 0)+2*sourceIdeal.sink.nPorts  +(if  not sourceIdeal.sink.use_T_in then 1 else 0)+(if demand.sink.use_Xi_in   then 1 else (if demand.sink.use_X_in then 0 else 1))+(if  not   demand.sink.use_m_flow_in then 1 else 0)+2*demand.sink.nPorts+(if  not   demand.sink.use_T_in then 1 else 0)+(if demand.source.use_Xi_in then 1 else (  if demand.source.use_X_in then 0 else 1))+(if  not demand.source.use_m_flow_in   then 1 else 0)+2*demand.source.nPorts+(if  not demand.source.use_T_in then 1   else 0)+(if demand.sourceHeating.use_Xi_in then 1 else (if demand.sourceHeating.use_X_in   then 0 else 1))+(if  not demand.sourceHeating.use_m_flow_in then 1 else 0)+2*  demand.sourceHeating.nPorts+(if  not demand.sourceHeating.use_T_in then 1   else 0)+(if demand.sinkHeating.use_Xi_in then 1 else (if demand.sinkHeating.use_X_in   then 0 else 1))+(if  not demand.sinkHeating.use_p_in then 1 else 0)+2*  demand.sinkHeating.nPorts+(if  not demand.sinkHeating.use_T_in then 1 else 0)+  (if  not demand.heaPum.eva.vol.steBal.use_mWat_flow then 1 else 0)+(if  not   pipeSupply.vol_b.dynBal.use_mWat_flow then 1 else 0)+3*pipeSupply.vol_b.dynBal.nPorts  +(if  not pipeSupply.vol_a.dynBal.use_mWat_flow then 1 else 0)+3*  pipeSupply.vol_a.dynBal.nPorts+(if  not pipeReturn.vol_b.dynBal.use_mWat_flow   then 1 else 0)+3*pipeReturn.vol_b.dynBal.nPorts+(if  not pipeReturn.vol_a.dynBal.use_mWat_flow   then 1 else 0)+3*pipeReturn.vol_a.dynBal.nPorts
scalar equations.
However, exploiting the given numerical settings of parameters gives the same number of unknowns and equations:
  699
Check of AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopHeatPumpCarnot successful.
Declaring variable: Boolean rCheck ;

Modelica.Utilities.Streams.print("    { \"file\" :  \"AixLib/Resources/Scripts/Dymola/Fluid/DistrictHeatingCooling/Demands/Examples/OpenLoopHeatPumpCarnot.mos\",", "AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopHeatPumpCarnot.statistics.log");
Modelica.Utilities.Streams.print("      \"model\" : \"AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopHeatPumpCarnot\",", "AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopHeatPumpCarnot.statistics.log");
Modelica.Utilities.Streams.print("      \"check\" : {", "AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopHeatPumpCarnot.statistics.log");
Modelica.Utilities.Streams.print("        \"command\" : \"checkModel(\\\"AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopHeatPumpCarnot\\\");\",", "AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopHeatPumpCarnot.statistics.log");
Modelica.Utilities.Streams.print("        \"result\"  : " + String(rCheck), "AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopHeatPumpCarnot.statistics.log");
Modelica.Utilities.Streams.print("      },", "AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopHeatPumpCarnot.statistics.log");


rScript=RunScript("modelica://AixLib/Resources/Scripts/Dymola/Fluid/DistrictHeatingCooling/Demands/Examples/OpenLoopHeatPumpCarnot.mos");
translateModel("AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopHeatPumpCarnot");
Translation of AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopHeatPumpCarnot
The DAE has 699 scalar unknowns and 699 scalar equations.
 
Statistics
 
Original Model
  Number of components: 145
  Variables: 1849
  Constants: 38 (38 scalars)
  Parameters: 853 (823 scalars)
  Unknowns: 958 (725 scalars)
  Differentiated variables: 15 scalars
  Equations: 799
  Nontrivial: 663
Translated Model
  Constants: 659 scalars
  Free parameters: 145 scalars
  Parameter depending: 165 scalars
  Continuous time states: 11 scalars
  Time-varying variables: 163 scalars
  Alias variables: 454 scalars
  Number of mixed real/discrete systems of equations: 0
  Sizes of linear systems of equations: { }
  Sizes after manipulation of the linear systems: { }
  Sizes of nonlinear systems of equations: {13, 8}
  Sizes after manipulation of the nonlinear systems: {1, 1}
  Number of numerical Jacobians: 0
  Initialization problem
    Sizes of nonlinear systems of equations: {13, 8}
    Sizes after manipulation of the nonlinear systems: {1, 1}
    Number of numerical Jacobians: 0
 
Selected continuous time states
Statically selected continuous time states
demand.senT_return.T
demand.senT_supply.T
pControl.I.y
pipeReturn.del.x
pipeReturn.timDel.x
pipeReturn.vol_a.dynBal.U
pipeReturn.vol_b.dynBal.U
pipeSupply.del.x
pipeSupply.timDel.x
pipeSupply.vol_a.dynBal.U
pipeSupply.vol_b.dynBal.U
Finished
 = true
simulateModel("AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopHeatPumpCarnot", stopTime=100000, method="dassl", tolerance=1e-006, resultFile="AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopHeatPumpCarnot");
Finished
Finished
 = true

Declaring variable: Boolean rScript ;

savelog("AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopHeatPumpCarnot.translation.log"); = true


rCheck = checkModel("AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpHeadControlled");
Check of AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpHeadControlled
The model has the same number of unknowns and equations: 148
The model could not be deduced to be symbolically well-posed.
The model has
  137+2*(size(pump.maxMinTable.columns, 1)+pump.deMultiplex3_1.n1+pump.deMultiplex3_1.n2)  +pump.criticalDamping.n+pump.vol.dynBal.nPorts
scalar unknowns and
  127+2*size(pump.maxMinTable.columns, 1)+pump.deMultiplex3_1.n1+pump.deMultiplex3_1.n2  +pump.criticalDamping.n+(if vessle.use_Xi_in then 1 else (if vessle.use_X_in   then 0 else 1))+(if  not vessle.use_p_in then 1 else 0)+2*vessle.nPorts+(if    not vessle.use_T_in then 1 else 0)+(if  not pump.vol.dynBal.use_mWat_flow   then 1 else 0)+3*pump.vol.dynBal.nPorts
scalar equations.
However, exploiting the given numerical settings of parameters gives the same number of unknowns and equations:
  148
Check of AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpHeadControlled successful.
Declaring variable: Boolean rCheck ;

Modelica.Utilities.Streams.print("    { \"file\" :  \"AixLib/Resources/Scripts/Dymola/Fluid/Movers/PumpsPolynomialBased/Examples/PumpHeadControlled.mos\",", "AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpHeadControlled.statistics.log");
Modelica.Utilities.Streams.print("      \"model\" : \"AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpHeadControlled\",", "AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpHeadControlled.statistics.log");
Modelica.Utilities.Streams.print("      \"check\" : {", "AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpHeadControlled.statistics.log");
Modelica.Utilities.Streams.print("        \"command\" : \"checkModel(\\\"AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpHeadControlled\\\");\",", "AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpHeadControlled.statistics.log");
Modelica.Utilities.Streams.print("        \"result\"  : " + String(rCheck), "AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpHeadControlled.statistics.log");
Modelica.Utilities.Streams.print("      },", "AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpHeadControlled.statistics.log");


rScript=RunScript("modelica://AixLib/Resources/Scripts/Dymola/Fluid/Movers/PumpsPolynomialBased/Examples/PumpHeadControlled.mos");
simulateModel("AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpHeadControlled", tolerance=1e-6, stopTime=600, method="dassl", resultFile="AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpHeadControlled");
Translation of AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpHeadControlled
The DAE has 148 scalar unknowns and 148 scalar equations.
 
Statistics
 
Original Model
  Number of components: 34
  Variables: 371
  Constants: 7 (7 scalars)
  Parameters: 173 (476 scalars)
  Unknowns: 191 (152 scalars)
  Differentiated variables: 4 scalars
  Equations: 156
  Nontrivial: 129
Translated Model
  Constants: 124 scalars
  Free parameters: 259 scalars
  Parameter depending: 126 scalars
  Outputs: 7 scalars
  Continuous time states: 2 scalars
  Time-varying variables: 33 scalars
  Alias variables: 93 scalars
  Number of mixed real/discrete systems of equations: 0
  Sizes of linear systems of equations: { }
  Sizes after manipulation of the linear systems: { }
  Sizes of nonlinear systems of equations: {1}
  Sizes after manipulation of the nonlinear systems: {0}
  Number of numerical Jacobians: 0
  Initialization problem
    Sizes of nonlinear systems of equations: {1}
    Sizes after manipulation of the nonlinear systems: {1}
    Number of numerical Jacobians: 0
 
Selected continuous time states
Statically selected continuous time states
pump.criticalDamping.x[1]
simpleValve.actPos.y
Finished
Finished
 = true

Declaring variable: Boolean rScript ;

savelog("AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpHeadControlled.translation.log"); = true


rCheck = checkModel("AixLib.Fluid.BoilerCHP.Examples.CHPSystemNoControl");
Check of AixLib.Fluid.BoilerCHP.Examples.CHPSystemNoControl
The model has the same number of unknowns and equations: 181
The model could not be deduced to be symbolically well-posed.
The model has
  175+combinedHeatPower.vol.dynBal.nPorts+size(combinedHeatPower.combiTable1Ds.columns,   1)
scalar unknowns and
  161+size(combinedHeatPower.combiTable1Ds.columns, 1)+2*source.nPorts+(if  not   source.use_m_flow_in then 1 else 0)+(if  not source.use_T_in then 1 else 0)+(  if  not source.use_X_in then 1 else 0)+2*sink.nPorts+(if  not sink.use_p_in   then 1 else 0)+(if  not sink.use_T_in then 1 else 0)+(if  not sink.use_X_in   then 1 else 0)+(if  not combinedHeatPower.vol.dynBal.use_mWat_flow then 1   else 0)+3*combinedHeatPower.vol.dynBal.nPorts
scalar equations.
However, exploiting the given numerical settings of parameters gives the same number of unknowns and equations:
  181
Check of AixLib.Fluid.BoilerCHP.Examples.CHPSystemNoControl successful.
Declaring variable: Boolean rCheck ;

Modelica.Utilities.Streams.print("    { \"file\" :  \"AixLib/Resources/Scripts/Dymola/Fluid/BoilerCHP/Examples/CHPSystemNoControl.mos\",", "AixLib.Fluid.BoilerCHP.Examples.CHPSystemNoControl.statistics.log");
Modelica.Utilities.Streams.print("      \"model\" : \"AixLib.Fluid.BoilerCHP.Examples.CHPSystemNoControl\",", "AixLib.Fluid.BoilerCHP.Examples.CHPSystemNoControl.statistics.log");
Modelica.Utilities.Streams.print("      \"check\" : {", "AixLib.Fluid.BoilerCHP.Examples.CHPSystemNoControl.statistics.log");
Modelica.Utilities.Streams.print("        \"command\" : \"checkModel(\\\"AixLib.Fluid.BoilerCHP.Examples.CHPSystemNoControl\\\");\",", "AixLib.Fluid.BoilerCHP.Examples.CHPSystemNoControl.statistics.log");
Modelica.Utilities.Streams.print("        \"result\"  : " + String(rCheck), "AixLib.Fluid.BoilerCHP.Examples.CHPSystemNoControl.statistics.log");
Modelica.Utilities.Streams.print("      },", "AixLib.Fluid.BoilerCHP.Examples.CHPSystemNoControl.statistics.log");


rScript=RunScript("modelica://AixLib/Resources/Scripts/Dymola/Fluid/BoilerCHP/Examples/CHPSystemNoControl.mos");
simulateModel("AixLib.Fluid.BoilerCHP.Examples.CHPSystemNoControl", tolerance=1e-06, stopTime=300, method="dassl",  resultFile="AixLib.Fluid.BoilerCHP.Examples.CHPSystemNoControl");
Translation of AixLib.Fluid.BoilerCHP.Examples.CHPSystemNoControl
The DAE has 181 scalar unknowns and 181 scalar equations.
 
Statistics
 
Original Model
  Number of components: 38
  Variables: 435
  Constants: 5 (5 scalars)
  Parameters: 198 (232 scalars)
  Unknowns: 232 (185 scalars)
  Differentiated variables: 5 scalars
  Equations: 210
  Nontrivial: 170
Translated Model
  Constants: 149 scalars
  Free parameters: 55 scalars
  Parameter depending: 71 scalars
  Continuous time states: 3 scalars
  Time-varying variables: 38 scalars
  Alias variables: 109 scalars
  Number of mixed real/discrete systems of equations: 0
  Sizes of linear systems of equations: {5}
  Sizes after manipulation of the linear systems: {0}
  Sizes of nonlinear systems of equations: { }
  Sizes after manipulation of the nonlinear systems: { }
  Number of numerical Jacobians: 0
 
Selected continuous time states
Statically selected continuous time states
combinedHeatPower.internalCapacity.T
combinedHeatPower.senTCold.T
combinedHeatPower.senTHot.T
Finished
Finished
 = true

Declaring variable: Boolean rScript ;

savelog("AixLib.Fluid.BoilerCHP.Examples.CHPSystemNoControl.translation.log"); = true


rCheck = checkModel("AixLib.Fluid.Examples.GeothermalHeatPump.GeothermalHeatPump");
Check of AixLib.Fluid.Examples.GeothermalHeatPump.GeothermalHeatPump
Warning: Modifier for protected component use_busConOnl. This is not legal Modelica.
  File: /tmp/tmp-AixLib-1-bba1x9bf/AixLib/Fluid/Examples/GeothermalHeatPump/BaseClasses/GeothermalHeatPumpBase.mo, line 264
  Context: AixLib.Fluid.Examples.GeothermalHeatPump.BaseClasses.GeothermalHeatPumpBase.heatPump.use_busConOnl
Original declaration of use_busConOnl:
  File: /tmp/tmp-AixLib-1-bba1x9bf/AixLib/Fluid/HeatPumps/ModularReversible/BaseClasses/PartialReversibleRefrigerantMachine.mo, line 385
  Context: AixLib.Fluid.HeatPumps.ModularReversible.BaseClasses.PartialReversibleRefrigerantMachine.use_busConOnl
Warning: Redeclaration requires a subtype.
 But missing component dp_start.
  In redeclaration of PeakLoadDeviceModel.
  File: /tmp/tmp-AixLib-1-bba1x9bf/AixLib/Fluid/Examples/GeothermalHeatPump/BaseClasses/GeothermalHeatPumpBase.mo, line 20
  Context: AixLib.Fluid.Examples.GeothermalHeatPump.GeothermalHeatPump.PeakLoadDeviceModel
In call connect(heatPumpControlBus, heatPump.sigBus)
  File: /tmp/tmp-AixLib-1-bba1x9bf/AixLib/Fluid/Examples/GeothermalHeatPump/BaseClasses/GeothermalHeatPumpBase.mo, line 329
For path heatPump.sigBus
Warning: Component sigBus is protected and should thus not be accessible from outside.
Full name: heatPump.sigBus
In class AixLib.Fluid.Examples.GeothermalHeatPump.BaseClasses.GeothermalHeatPumpBase.
  File: /tmp/tmp-AixLib-1-bba1x9bf/AixLib/Fluid/Examples/GeothermalHeatPump/BaseClasses/GeothermalHeatPumpControlledBase.mo, line 4
The model has the same number of unknowns and equations: 4686
Check of AixLib.Fluid.Examples.GeothermalHeatPump.GeothermalHeatPump successful.
Warning: WARNINGS have been issued.
Declaring variable: Boolean rCheck ;

Modelica.Utilities.Streams.print("    { \"file\" :  \"AixLib/Resources/Scripts/Dymola/Fluid/Examples/GeothermalHeatPump/GeothermalHeatPump.mos\",", "AixLib.Fluid.Examples.GeothermalHeatPump.GeothermalHeatPump.statistics.log");
Modelica.Utilities.Streams.print("      \"model\" : \"AixLib.Fluid.Examples.GeothermalHeatPump.GeothermalHeatPump\",", "AixLib.Fluid.Examples.GeothermalHeatPump.GeothermalHeatPump.statistics.log");
Modelica.Utilities.Streams.print("      \"check\" : {", "AixLib.Fluid.Examples.GeothermalHeatPump.GeothermalHeatPump.statistics.log");
Modelica.Utilities.Streams.print("        \"command\" : \"checkModel(\\\"AixLib.Fluid.Examples.GeothermalHeatPump.GeothermalHeatPump\\\");\",", "AixLib.Fluid.Examples.GeothermalHeatPump.GeothermalHeatPump.statistics.log");
Modelica.Utilities.Streams.print("        \"result\"  : " + String(rCheck), "AixLib.Fluid.Examples.GeothermalHeatPump.GeothermalHeatPump.statistics.log");
Modelica.Utilities.Streams.print("      },", "AixLib.Fluid.Examples.GeothermalHeatPump.GeothermalHeatPump.statistics.log");


rScript=RunScript("modelica://AixLib/Resources/Scripts/Dymola/Fluid/Examples/GeothermalHeatPump/GeothermalHeatPump.mos");
simulateModel("AixLib.Fluid.Examples.GeothermalHeatPump.GeothermalHeatPump", startTime=0, stopTime=86400, method="dassl", tolerance=1e-06, resultFile="AixLib.Fluid.Examples.GeothermalHeatPump.GeothermalHeatPump");
Translation of AixLib.Fluid.Examples.GeothermalHeatPump.GeothermalHeatPump
Warning: Modifier for protected component use_busConOnl. This is not legal Modelica.
  File: /tmp/tmp-AixLib-1-bba1x9bf/AixLib/Fluid/Examples/GeothermalHeatPump/BaseClasses/GeothermalHeatPumpBase.mo, line 264
  Context: AixLib.Fluid.Examples.GeothermalHeatPump.BaseClasses.GeothermalHeatPumpBase.heatPump.use_busConOnl
Original declaration of use_busConOnl:
  File: /tmp/tmp-AixLib-1-bba1x9bf/AixLib/Fluid/HeatPumps/ModularReversible/BaseClasses/PartialReversibleRefrigerantMachine.mo, line 385
  Context: AixLib.Fluid.HeatPumps.ModularReversible.BaseClasses.PartialReversibleRefrigerantMachine.use_busConOnl
Warning: Redeclaration requires a subtype.
 But missing component dp_start.
  In redeclaration of PeakLoadDeviceModel.
  File: /tmp/tmp-AixLib-1-bba1x9bf/AixLib/Fluid/Examples/GeothermalHeatPump/BaseClasses/GeothermalHeatPumpBase.mo, line 20
  Context: AixLib.Fluid.Examples.GeothermalHeatPump.GeothermalHeatPump.PeakLoadDeviceModel
In call connect(heatPumpControlBus, heatPump.sigBus)
  File: /tmp/tmp-AixLib-1-bba1x9bf/AixLib/Fluid/Examples/GeothermalHeatPump/BaseClasses/GeothermalHeatPumpBase.mo, line 329
For path heatPump.sigBus
Warning: Component sigBus is protected and should thus not be accessible from outside.
Full name: heatPump.sigBus
In class AixLib.Fluid.Examples.GeothermalHeatPump.BaseClasses.GeothermalHeatPumpBase.
  File: /tmp/tmp-AixLib-1-bba1x9bf/AixLib/Fluid/Examples/GeothermalHeatPump/BaseClasses/GeothermalHeatPumpControlledBase.mo, line 4
The DAE has 4686 scalar unknowns and 4686 scalar equations.
 
Statistics
 
Original Model
  Number of components: 1069
  Variables: 12392
  Constants: 206 (206 scalars)
  Parameters: 6098 (7313 scalars)
  Unknowns: 6088 (4859 scalars)
  Differentiated variables: 138 scalars
  Equations: 4942
  Nontrivial: 3864
Translated Model
  Constants: 4180 scalars
  Free parameters: 889 scalars
  Parameter depending: 3100 scalars
  Outputs: 17 scalars
  Continuous time states: 100 scalars
  Time-varying variables: 1144 scalars
  Alias variables: 3065 scalars
  Number of mixed real/discrete systems of equations: 0
  Sizes of linear systems of equations: {2, 3, 2, 2, 4, 3, 17, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 2, 4, 3, 17, 4, 2, 2, 2, 2,   2, 2, 2, 2}
  Sizes after manipulation of the linear systems: {0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0,   0, 0, 0}
  Sizes of nonlinear systems of equations: {5, 12, 12, 5, 6, 6, 6, 3, 1, 6, 6, 6, 6, 6, 6, 6}
  Sizes after manipulation of the nonlinear systems: {1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1}
  Number of numerical Jacobians: 0
  Initialization problem
    Sizes of nonlinear systems of equations: {5, 1, 12, 1, 12, 1, 5, 1, 3, 1}
    Sizes after manipulation of the nonlinear systems: {2, 0, 1, 0, 1, 0, 1, 0, 1, 0}
    Sizes of simplified homotopy nonlinear systems of equations: {5, 1, 12, 1, 12, 1, 5, 1, 3, 1}
    Sizes after manipulation of the simplified homotopy nonlinear systems: {2, 0, 1, 0, 1, 0, 1, 0, 1, 0}
    Number of numerical Jacobians: 0
 
Selected continuous time states
Statically selected continuous time states
coldStorage.bottomCover.loadIns.T
coldStorage.bottomCover.loadWall.T
coldStorage.heatingCoil1.pipe[1].del.x
coldStorage.heatingCoil1.pipe[1].timDel.x
coldStorage.heatingCoil1.pipe[1].vol_a.dynBal.U
coldStorage.heatingCoil1.pipe[1].vol_b.dynBal.U
coldStorage.heatingCoil1.pipe[2].del.x
coldStorage.heatingCoil1.pipe[2].timDel.x
coldStorage.heatingCoil1.pipe[2].vol_a.dynBal.U
coldStorage.heatingCoil1.pipe[2].vol_b.dynBal.U
coldStorage.heatingCoil1.pipe[3].del.x
coldStorage.heatingCoil1.pipe[3].timDel.x
coldStorage.heatingCoil1.pipe[3].vol_a.dynBal.U
coldStorage.heatingCoil1.pipe[3].vol_b.dynBal.U
coldStorage.heatingCoil1.pipe[4].del.x
coldStorage.heatingCoil1.pipe[4].timDel.x
coldStorage.heatingCoil1.pipe[4].vol_a.dynBal.U
coldStorage.heatingCoil1.pipe[4].vol_b.dynBal.U
coldStorage.heatingCoil1.pipe[5].del.x
coldStorage.heatingCoil1.pipe[5].timDel.x
coldStorage.heatingCoil1.pipe[5].vol_a.dynBal.U
coldStorage.heatingCoil1.pipe[5].vol_b.dynBal.U
coldStorage.layer[1].dynBal.U
coldStorage.layer[2].dynBal.U
coldStorage.layer[3].dynBal.U
coldStorage.layer[4].dynBal.U
coldStorage.layer[5].dynBal.U
coldStorage.storageMantle[1].Insulation.CylindricLoad1.heatCapacitor.T
coldStorage.storageMantle[1].Wall.CylindricLoad1.heatCapacitor.T
coldStorage.storageMantle[2].Insulation.CylindricLoad1.heatCapacitor.T
coldStorage.storageMantle[2].Wall.CylindricLoad1.heatCapacitor.T
coldStorage.storageMantle[3].Insulation.CylindricLoad1.heatCapacitor.T
coldStorage.storageMantle[3].Wall.CylindricLoad1.heatCapacitor.T
coldStorage.storageMantle[4].Insulation.CylindricLoad1.heatCapacitor.T
coldStorage.storageMantle[4].Wall.CylindricLoad1.heatCapacitor.T
coldStorage.storageMantle[5].Insulation.CylindricLoad1.heatCapacitor.T
coldStorage.storageMantle[5].Wall.CylindricLoad1.heatCapacitor.T
coldStorage.topCover.loadIns.T
coldStorage.topCover.loadWall.T
heatPump.con.vol.dynBal.U
heatPump.eva.vol.dynBal.U
heatStorage.bottomCover.loadIns.T
heatStorage.bottomCover.loadWall.T
heatStorage.heatingCoil1.pipe[1].del.x
heatStorage.heatingCoil1.pipe[1].timDel.x
heatStorage.heatingCoil1.pipe[1].vol_a.dynBal.U
heatStorage.heatingCoil1.pipe[1].vol_b.dynBal.U
heatStorage.heatingCoil1.pipe[2].del.x
heatStorage.heatingCoil1.pipe[2].timDel.x
heatStorage.heatingCoil1.pipe[2].vol_a.dynBal.U
heatStorage.heatingCoil1.pipe[2].vol_b.dynBal.U
heatStorage.heatingCoil1.pipe[3].del.x
heatStorage.heatingCoil1.pipe[3].timDel.x
heatStorage.heatingCoil1.pipe[3].vol_a.dynBal.U
heatStorage.heatingCoil1.pipe[3].vol_b.dynBal.U
heatStorage.heatingCoil1.pipe[4].del.x
heatStorage.heatingCoil1.pipe[4].timDel.x
heatStorage.heatingCoil1.pipe[4].vol_a.dynBal.U
heatStorage.heatingCoil1.pipe[4].vol_b.dynBal.U
heatStorage.heatingCoil1.pipe[5].del.x
heatStorage.heatingCoil1.pipe[5].timDel.x
heatStorage.heatingCoil1.pipe[5].vol_a.dynBal.U
heatStorage.heatingCoil1.pipe[5].vol_b.dynBal.U
heatStorage.layer[1].dynBal.U
heatStorage.layer[2].dynBal.U
heatStorage.layer[3].dynBal.U
heatStorage.layer[4].dynBal.U
heatStorage.layer[5].dynBal.U
heatStorage.storageMantle[1].Insulation.CylindricLoad1.heatCapacitor.T
heatStorage.storageMantle[1].Wall.CylindricLoad1.heatCapacitor.T
heatStorage.storageMantle[2].Insulation.CylindricLoad1.heatCapacitor.T
heatStorage.storageMantle[2].Wall.CylindricLoad1.heatCapacitor.T
heatStorage.storageMantle[3].Insulation.CylindricLoad1.heatCapacitor.T
heatStorage.storageMantle[3].Wall.CylindricLoad1.heatCapacitor.T
heatStorage.storageMantle[4].Insulation.CylindricLoad1.heatCapacitor.T
heatStorage.storageMantle[4].Wall.CylindricLoad1.heatCapacitor.T
heatStorage.storageMantle[5].Insulation.CylindricLoad1.heatCapacitor.T
heatStorage.storageMantle[5].Wall.CylindricLoad1.heatCapacitor.T
heatStorage.topCover.loadIns.T
heatStorage.topCover.loadWall.T
peaLoaDev.boiler.internalControl.ControlerHeater.PI.I.y
peaLoaDev.boiler.internalControl.eEnergyMeter_P.q_joule
peaLoaDev.boiler.internalControl.eEnergyMeter_S.q_joule
peaLoaDev.boiler.senTCold.T
peaLoaDev.boiler.senTHot.T
peaLoaDev.boiler.vol.dynBal.U
pumpColdConsumer.motSpe.y
pumpColdConsumer.vol.dynBal.U
pumpCondenser.motSpe.y
pumpCondenser.vol.dynBal.U
pumpEvaporator.motSpe.y
pumpEvaporator.vol.dynBal.U
pumpGeothermalSource.motSpe.y
pumpGeothermalSource.vol.dynBal.U
pumpHeatConsumer.motSpe.y
pumpHeatConsumer.vol.dynBal.U
valveColdStorage.actPos.y
valveHeatSink.actPos.y
valveHeatSource.actPos.y
valveHeatStorage.actPos.y
Finished
Warning: WARNINGS have been issued.
Finished
 = true

Declaring variable: Boolean rScript ;

savelog("AixLib.Fluid.Examples.GeothermalHeatPump.GeothermalHeatPump.translation.log"); = true


rCheck = checkModel("AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.PlugFlowPipeEmbedded");
Check of AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.PlugFlowPipeEmbedded
Warning: Local "m_flow_small" conflict with inherited. Should be identical
Warning: Component m_flow_small(min = << Empty >>),
  but previously m_flow_small(min = 0).
  The components are not identical.
 
  For element m_flow_small found at
 
  File: /tmp/tmp-AixLib-1-bba1x9bf/AixLib/Fluid/DistrictHeatingCooling/Pipes/PlugFlowPipeEmbedded.mo, line 41
  Conflict with element from
  File: /tmp/tmp-AixLib-1-bba1x9bf/AixLib/Fluid/Interfaces/PartialTwoPortInterface.mo, line 10
 Component context: pip
  Component declared as PlugFlowPipeEmbedded pip in AixLib.Fluid.DistrictHeatingCooling.Pipes
  File: /tmp/tmp-AixLib-1-bba1x9bf/AixLib/Fluid/DistrictHeatingCooling/Pipes/Examples/PlugFlowPipeEmbedded.mo, line 19
Warning: Local "m_flow_small" conflict with inherited. Should be identical
Warning: Component m_flow_small(min = << Empty >>),
  but previously m_flow_small(min = 0).
  The components are not identical.
 
  For element m_flow_small found at
 
  File: /tmp/tmp-AixLib-1-bba1x9bf/AixLib/Fluid/DistrictHeatingCooling/Pipes/PlugFlowPipeZeta.mo, line 36
  Conflict with element from
  File: /tmp/tmp-AixLib-1-bba1x9bf/AixLib/Fluid/Interfaces/PartialTwoPortInterface.mo, line 10
 Component context: pip.plugFlowPipeZeta
  Component declared as PlugFlowPipeZeta plugFlowPipeZeta in AixLib.Fluid.DistrictHeatingCooling.Pipes
  File: /tmp/tmp-AixLib-1-bba1x9bf/AixLib/Fluid/DistrictHeatingCooling/Pipes/PlugFlowPipeEmbedded.mo, line 122
The model has the same number of unknowns and equations: 256
The model could not be deduced to be symbolically well-posed.
The model has
  254+pip.plugFlowPipeZeta.vol.dynBal.nPorts
scalar unknowns and
  240+(if sin.use_Xi_in then 1 else (if sin.use_X_in then 0 else 1))+(if  not   sin.use_p_in then 1 else 0)+2*sin.nPorts+(if  not sin.use_T_in then 1 else 0)+  (if sou.use_Xi_in then 1 else (if sou.use_X_in then 0 else 1))+(if  not   sou.use_m_flow_in then 1 else 0)+2*sou.nPorts+(if  not sou.use_T_in then 1   else 0)+(if  not pip.plugFlowPipeZeta.vol.dynBal.use_mWat_flow then 1 else 0)  +3*pip.plugFlowPipeZeta.vol.dynBal.nPorts
scalar equations.
However, exploiting the given numerical settings of parameters gives the same number of unknowns and equations:
  256
Check of AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.PlugFlowPipeEmbedded successful.
Declaring variable: Boolean rCheck ;

Modelica.Utilities.Streams.print("    { \"file\" :  \"AixLib/Resources/Scripts/Dymola/Fluid/DistrictHeatingCooling/Pipes/Examples/PlugFlowPipeEmbedded.mos\",", "AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.PlugFlowPipeEmbedded.statistics.log");
Modelica.Utilities.Streams.print("      \"model\" : \"AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.PlugFlowPipeEmbedded\",", "AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.PlugFlowPipeEmbedded.statistics.log");
Modelica.Utilities.Streams.print("      \"check\" : {", "AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.PlugFlowPipeEmbedded.statistics.log");
Modelica.Utilities.Streams.print("        \"command\" : \"checkModel(\\\"AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.PlugFlowPipeEmbedded\\\");\",", "AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.PlugFlowPipeEmbedded.statistics.log");
Modelica.Utilities.Streams.print("        \"result\"  : " + String(rCheck), "AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.PlugFlowPipeEmbedded.statistics.log");
Modelica.Utilities.Streams.print("      },", "AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.PlugFlowPipeEmbedded.statistics.log");


rScript=RunScript("modelica://AixLib/Resources/Scripts/Dymola/Fluid/DistrictHeatingCooling/Pipes/Examples/PlugFlowPipeEmbedded.mos");
translateModel("AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.PlugFlowPipeEmbedded");
Translation of AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.PlugFlowPipeEmbedded
Warning: Local "m_flow_small" conflict with inherited. Should be identical
Warning: Component m_flow_small(min = << Empty >>),
  but previously m_flow_small(min = 0).
  The components are not identical.
 
  For element m_flow_small found at
 
  File: /tmp/tmp-AixLib-1-bba1x9bf/AixLib/Fluid/DistrictHeatingCooling/Pipes/PlugFlowPipeEmbedded.mo, line 41
  Conflict with element from
  File: /tmp/tmp-AixLib-1-bba1x9bf/AixLib/Fluid/Interfaces/PartialTwoPortInterface.mo, line 10
 Component context: pip
  Component declared as PlugFlowPipeEmbedded pip in AixLib.Fluid.DistrictHeatingCooling.Pipes
  File: /tmp/tmp-AixLib-1-bba1x9bf/AixLib/Fluid/DistrictHeatingCooling/Pipes/Examples/PlugFlowPipeEmbedded.mo, line 19
Warning: Local "m_flow_small" conflict with inherited. Should be identical
Warning: Component m_flow_small(min = << Empty >>),
  but previously m_flow_small(min = 0).
  The components are not identical.
 
  For element m_flow_small found at
 
  File: /tmp/tmp-AixLib-1-bba1x9bf/AixLib/Fluid/DistrictHeatingCooling/Pipes/PlugFlowPipeZeta.mo, line 36
  Conflict with element from
  File: /tmp/tmp-AixLib-1-bba1x9bf/AixLib/Fluid/Interfaces/PartialTwoPortInterface.mo, line 10
 Component context: pip.plugFlowPipeZeta
  Component declared as PlugFlowPipeZeta plugFlowPipeZeta in AixLib.Fluid.DistrictHeatingCooling.Pipes
  File: /tmp/tmp-AixLib-1-bba1x9bf/AixLib/Fluid/DistrictHeatingCooling/Pipes/PlugFlowPipeEmbedded.mo, line 122
The DAE has 256 scalar unknowns and 256 scalar equations.
 
Statistics
 
Original Model
  Number of components: 53
  Variables: 741
  Constants: 11 (11 scalars)
  Parameters: 392 (385 scalars)
  Unknowns: 338 (264 scalars)
  Differentiated variables: 9 scalars
  Equations: 267
  Nontrivial: 229
Translated Model
  Constants: 226 scalars
  Free parameters: 64 scalars
  Parameter depending: 145 scalars
  Continuous time states: 8 scalars
  Time-varying variables: 57 scalars
  Alias variables: 168 scalars
  Number of mixed real/discrete systems of equations: 0
  Sizes of linear systems of equations: {2, 2}
  Sizes after manipulation of the linear systems: {0, 0}
  Sizes of nonlinear systems of equations: {6}
  Sizes after manipulation of the nonlinear systems: {1}
  Number of numerical Jacobians: 0
  Initialization problem
    Sizes of nonlinear systems of equations: {14}
    Sizes after manipulation of the nonlinear systems: {6}
    Number of numerical Jacobians: 0
 
Selected continuous time states
Statically selected continuous time states
pip.cylindricHeatTransfer_1.CylindricLoad1.heatCapacitor.T
pip.cylindricHeatTransfer_2.CylindricLoad1.heatCapacitor.T
pip.cylindricHeatTransfer_3.CylindricLoad1.heatCapacitor.T
pip.plugFlowPipeZeta.plugFlowCore.del.x
pip.plugFlowPipeZeta.plugFlowCore.timDel.x
pip.plugFlowPipeZeta.vol.dynBal.U
senTemIn.T
senTemOut.T
Finished
Warning: WARNINGS have been issued.
 = true
simulateModel("AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.PlugFlowPipeEmbedded", stopTime=1000, method="dassl", tolerance=1e-6, resultFile="AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.PlugFlowPipeEmbedded");
Finished
 = true

Declaring variable: Boolean rScript ;

savelog("AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.PlugFlowPipeEmbedded.translation.log"); = true


rCheck = checkModel("AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Validation.StaticValidation");
Check of AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Validation.StaticValidation
The model has the same number of unknowns and equations: 5505
The model could not be deduced to be symbolically well-posed.
The model has
  3777+32*enthalpyExchanger.n+16*enthalpyExchanger.airDuct2.heatTransfer.n+18*  enthalpyExchanger.airDuct2.massTransfer.n+16*enthalpyExchanger.airDuct1.heatTransfer.n  +18*enthalpyExchanger.airDuct1.massTransfer.n+5*enthalpyExchanger.membrane.heatTransfer.n  +enthalpyExchanger.membrane.massTransfer.n+2*enthalpyExchanger.airDuct2.vol[1].dynBal.nPorts  +2*enthalpyExchanger.airDuct2.vol[2].dynBal.nPorts+2*enthalpyExchanger.airDuct2.vol[3].dynBal.nPorts  +2*enthalpyExchanger.airDuct2.vol[4].dynBal.nPorts+2*enthalpyExchanger.airDuct2.vol[5].dynBal.nPorts  +2*enthalpyExchanger.airDuct2.vol[6].dynBal.nPorts+2*enthalpyExchanger.airDuct2.vol[7].dynBal.nPorts  +2*enthalpyExchanger.airDuct2.vol[8].dynBal.nPorts+2*enthalpyExchanger.airDuct2.vol[9].dynBal.nPorts  +2*enthalpyExchanger.airDuct2.vol[10].dynBal.nPorts+2*enthalpyExchanger.airDuct2.vol[11].dynBal.nPorts  +2*enthalpyExchanger.airDuct2.vol[12].dynBal.nPorts+2*enthalpyExchanger.airDuct2.vol[13].dynBal.nPorts  +2*enthalpyExchanger.airDuct2.vol[14].dynBal.nPorts+2*enthalpyExchanger.airDuct2.vol[15].dynBal.nPorts  +2*enthalpyExchanger.airDuct1.vol[1].dynBal.nPorts+2*enthalpyExchanger.airDuct1.vol[2].dynBal.nPorts  +2*enthalpyExchanger.airDuct1.vol[3].dynBal.nPorts+2*enthalpyExchanger.airDuct1.vol[4].dynBal.nPorts  +2*enthalpyExchanger.airDuct1.vol[5].dynBal.nPorts+2*enthalpyExchanger.airDuct1.vol[6].dynBal.nPorts  +2*enthalpyExchanger.airDuct1.vol[7].dynBal.nPorts+2*enthalpyExchanger.airDuct1.vol[8].dynBal.nPorts  +2*enthalpyExchanger.airDuct1.vol[9].dynBal.nPorts+2*enthalpyExchanger.airDuct1.vol[10].dynBal.nPorts  +2*enthalpyExchanger.airDuct1.vol[11].dynBal.nPorts+2*enthalpyExchanger.airDuct1.vol[12].dynBal.nPorts  +2*enthalpyExchanger.airDuct1.vol[13].dynBal.nPorts+2*enthalpyExchanger.airDuct1.vol[14].dynBal.nPorts  +2*enthalpyExchanger.airDuct1.vol[15].dynBal.nPorts+max([size(bondaryEta.columns,   1); size(bondaryEta.offset, 1)])+max([size(bondaryOda.columns, 1); size(  bondaryOda.offset, 1)])+max([size(Results.columns, 1); size(Results.offset, 1)])  +2*fan.vol.dynBal.nPorts+2*fan1.vol.dynBal.nPorts
scalar unknowns and
  3429+17*enthalpyExchanger.airDuct2.heatTransfer.n+19*enthalpyExchanger.airDuct2.massTransfer.n  +3*(if enthalpyExchanger.couFloArr then 2*enthalpyExchanger.n else 0)+17*  enthalpyExchanger.airDuct1.heatTransfer.n+19*enthalpyExchanger.airDuct1.massTransfer.n  +7*enthalpyExchanger.membrane.heatTransfer.n+3*enthalpyExchanger.membrane.massTransfer.n  +2*(if enthalpyExchanger.useConPer then 1 else 0)+32*enthalpyExchanger.n+(if   souEta.use_Xi_in then 2 else (if souEta.use_X_in then 1 else 3))+3*  souEta.nPorts+(if  not souEta.use_p_in then 1 else 0)+(if  not souEta.use_T_in   then 1 else 0)+(if sinEha.use_Xi_in then 2 else (if sinEha.use_X_in then 1   else 3))+3*sinEha.nPorts+(if  not sinEha.use_p_in then 1 else 0)+(if  not   sinEha.use_T_in then 1 else 0)+(if souOda.use_Xi_in then 2 else (if   souOda.use_X_in then 1 else 3))+3*souOda.nPorts+(if  not souOda.use_p_in then 1   else 0)+(if  not souOda.use_T_in then 1 else 0)+(if sinSup.use_Xi_in then 2   else (if sinSup.use_X_in then 1 else 3))+3*sinSup.nPorts+(if  not   sinSup.use_p_in then 1 else 0)+(if  not sinSup.use_T_in then 1 else 0)+max([  size(bondaryEta.columns, 1); size(bondaryEta.offset, 1)])+max([size(  bondaryOda.columns, 1); size(bondaryOda.offset, 1)])+max([size(Results.columns,   1); size(Results.offset, 1)])+(if conPID.reset <> AixLib.Types.Reset.Input   then 1 else 0)+(if conPID1.reset <> AixLib.Types.Reset.Input then 1 else 0)+5  *enthalpyExchanger.airDuct2.vol[1].dynBal.nPorts+5*enthalpyExchanger.airDuct2.vol[2].dynBal.nPorts  +5*enthalpyExchanger.airDuct2.vol[3].dynBal.nPorts+5*enthalpyExchanger.airDuct2.vol[4].dynBal.nPorts  +5*enthalpyExchanger.airDuct2.vol[5].dynBal.nPorts+5*enthalpyExchanger.airDuct2.vol[6].dynBal.nPorts  +5*enthalpyExchanger.airDuct2.vol[7].dynBal.nPorts+5*enthalpyExchanger.airDuct2.vol[8].dynBal.nPorts  +5*enthalpyExchanger.airDuct2.vol[9].dynBal.nPorts+5*enthalpyExchanger.airDuct2.vol[10].dynBal.nPorts  +5*enthalpyExchanger.airDuct2.vol[11].dynBal.nPorts+5*enthalpyExchanger.airDuct2.vol[12].dynBal.nPorts  +5*enthalpyExchanger.airDuct2.vol[13].dynBal.nPorts+5*enthalpyExchanger.airDuct2.vol[14].dynBal.nPorts  +5*enthalpyExchanger.airDuct2.vol[15].dynBal.nPorts+5*enthalpyExchanger.airDuct1.vol[1].dynBal.nPorts  +5*enthalpyExchanger.airDuct1.vol[2].dynBal.nPorts+5*enthalpyExchanger.airDuct1.vol[3].dynBal.nPorts  +5*enthalpyExchanger.airDuct1.vol[4].dynBal.nPorts+5*enthalpyExchanger.airDuct1.vol[5].dynBal.nPorts  +5*enthalpyExchanger.airDuct1.vol[6].dynBal.nPorts+5*enthalpyExchanger.airDuct1.vol[7].dynBal.nPorts  +5*enthalpyExchanger.airDuct1.vol[8].dynBal.nPorts+5*enthalpyExchanger.airDuct1.vol[9].dynBal.nPorts  +5*enthalpyExchanger.airDuct1.vol[10].dynBal.nPorts+5*enthalpyExchanger.airDuct1.vol[11].dynBal.nPorts  +5*enthalpyExchanger.airDuct1.vol[12].dynBal.nPorts+5*enthalpyExchanger.airDuct1.vol[13].dynBal.nPorts  +5*enthalpyExchanger.airDuct1.vol[14].dynBal.nPorts+5*enthalpyExchanger.airDuct1.vol[15].dynBal.nPorts  +(if  not fan.vol.dynBal.use_mWat_flow then 1 else 0)+5*fan.vol.dynBal.nPorts+  (if (if conPID.reset == AixLib.Types.Reset.Disabled then conPID.reset else   AixLib.Types.Reset.Input) <> AixLib.Types.Reset.Input then 1 else 0)+(if (if   conPID.reset == AixLib.Types.Reset.Disabled then conPID.reset else   AixLib.Types.Reset.Input) == AixLib.Types.Reset.Disabled then 1 else 0)+(if    not fan1.vol.dynBal.use_mWat_flow then 1 else 0)+5*fan1.vol.dynBal.nPorts+(  if (if conPID1.reset == AixLib.Types.Reset.Disabled then conPID1.reset else   AixLib.Types.Reset.Input) <> AixLib.Types.Reset.Input then 1 else 0)+(if (if   conPID1.reset == AixLib.Types.Reset.Disabled then conPID1.reset else   AixLib.Types.Reset.Input) == AixLib.Types.Reset.Disabled then 1 else 0)
scalar equations.
However, exploiting the given numerical settings of parameters gives the same number of unknowns and equations:
  5505
Check of AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Validation.StaticValidation successful.
Declaring variable: Boolean rCheck ;

Modelica.Utilities.Streams.print("    { \"file\" :  \"AixLib/Resources/Scripts/Dymola/Fluid/MassExchangers/MembraneBasedEnthalpyExchangers/Validation/StaticValidation.mos\",", "AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Validation.StaticValidation.statistics.log");
Modelica.Utilities.Streams.print("      \"model\" : \"AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Validation.StaticValidation\",", "AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Validation.StaticValidation.statistics.log");
Modelica.Utilities.Streams.print("      \"check\" : {", "AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Validation.StaticValidation.statistics.log");
Modelica.Utilities.Streams.print("        \"command\" : \"checkModel(\\\"AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Validation.StaticValidation\\\");\",", "AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Validation.StaticValidation.statistics.log");
Modelica.Utilities.Streams.print("        \"result\"  : " + String(rCheck), "AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Validation.StaticValidation.statistics.log");
Modelica.Utilities.Streams.print("      },", "AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Validation.StaticValidation.statistics.log");


rScript=RunScript("modelica://AixLib/Resources/Scripts/Dymola/Fluid/MassExchangers/MembraneBasedEnthalpyExchangers/Validation/StaticValidation.mos");
simulateModel("AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Validation.StaticValidation", stopTime=29600, numberOfIntervals=0, outputInterval=1, method="dassl",tolerance=1E-6, resultFile="AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Validation.StaticValidation");
Translation of AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Validation.StaticValidation
The DAE has 5505 scalar unknowns and 5505 scalar equations.
Redundant consistent initial conditions.
Removed the following equations which are redundant and consistent: 
  fan1.vol.p_start = fan1.p_start;
  if (enthalpyExchanger.airDuct2.vol[1].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[1].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[1].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[1].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[1].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[1].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[1].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[2].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[2].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[2].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[2].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[2].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[2].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[2].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[3].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[3].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[3].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[3].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[3].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[3].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[3].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[4].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[4].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[4].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[4].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[4].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[4].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[4].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[5].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[5].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[5].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[5].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[5].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[5].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[5].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[6].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[6].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[6].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[6].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[6].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[6].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[6].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[7].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[7].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[7].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[7].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[7].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[7].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[7].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[8].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[8].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[8].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[8].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[8].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[8].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[8].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[9].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[9].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[9].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[9].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[9].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[9].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[9].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[10].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[10].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[10].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[10].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[10].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[10].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[10].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[11].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[11].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[11].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[11].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[11].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[11].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[11].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[12].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[12].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[12].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[12].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[12].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[12].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[12].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[13].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[13].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[13].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[13].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[13].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[13].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[13].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[14].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[14].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[14].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[14].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[14].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[14].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[14].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[15].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[15].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[15].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[15].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[15].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[15].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[15].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[1].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[1].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[1].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[1].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[1].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[1].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[1].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[2].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[2].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[2].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[2].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[2].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[2].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[2].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[3].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[3].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[3].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[3].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[3].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[3].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[3].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[4].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[4].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[4].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[4].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[4].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[4].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[4].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[5].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[5].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[5].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[5].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[5].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[5].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[5].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[6].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[6].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[6].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[6].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[6].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[6].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[6].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[7].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[7].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[7].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[7].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[7].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[7].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[7].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[8].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[8].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[8].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[8].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[8].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[8].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[8].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[9].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[9].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[9].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[9].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[9].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[9].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[9].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[10].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[10].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[10].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[10].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[10].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[10].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[10].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[11].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[11].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[11].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[11].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[11].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[11].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[11].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[12].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[12].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[12].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[12].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[12].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[12].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[12].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[13].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[13].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[13].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[13].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[13].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[13].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[13].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[14].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[14].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[14].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[14].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[14].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[14].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[14].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[15].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[15].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[15].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[15].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[15].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[15].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[15].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (fan.vol.dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.FixedInitial)     then 
    if (fan.vol.dynBal.initialize_p) then 
      fan.vol.dynBal.medium.p = fan.vol.dynBal.p_start;
    end if;
  else
    if (fan.vol.dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.      SteadyStateInitial) then 
      if (fan.vol.dynBal.initialize_p) then 
        der(fan.vol.dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
 
This required evaluation of 
the interactive parameters 
    fan.p_start(start = 101325)
    fan1.p_start(start = 101325)
    sinEha.p(start = 101325)
    sinSup.p(start = 101325)
    souEta.p(start = 101325)
    souOda.p(start = 101325)
 
The redundancies involve
initial equations: 
  enthalpyExchanger.airDuct2.vol[1].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[2].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[3].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[4].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[5].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[6].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[7].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[8].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[9].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[10].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[11].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[12].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[13].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[14].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[15].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[1].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[2].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[3].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[4].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[5].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[6].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[7].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[8].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[9].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[10].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[11].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[12].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[13].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[14].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[15].dynBal.medium.p = 101325.0;
  fan.vol.dynBal.medium.p = fan.vol.dynBal.p_start;
  fan1.vol.dynBal.medium.p = fan1.vol.dynBal.p_start;
 
 
Statistics
 
Original Model
  Number of components: 676
  Variables: 7272
  Constants: 166 (166 scalars)
  Parameters: 2802 (3265 scalars)
  Unknowns: 4304 (5673 scalars)
  Differentiated variables: 127 scalars
  Equations: 2957
  Nontrivial: 2299
Translated Model
  Constants: 2673 scalars
  Free parameters: 248 scalars
  Parameter depending: 1420 scalars
  Continuous time states: 95 scalars
  Time-varying variables: 1765 scalars
  Alias variables: 2998 scalars
  Number of mixed real/discrete systems of equations: 0
  Sizes of linear systems of equations: {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,   2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3}
  Sizes after manipulation of the linear systems: {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}
  Sizes of nonlinear systems of equations: {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1}
  Sizes after manipulation of the nonlinear systems: {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0}
  Number of numerical Jacobians: 0
 
Selected continuous time states
Statically selected continuous time states
conPID.I.y
conPID1.I.y
enthalpyExchanger.airDuct1.senRelHum.phi
enthalpyExchanger.airDuct1.senTem.T
enthalpyExchanger.airDuct1.vol[1].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[1].dynBal.U
enthalpyExchanger.airDuct1.vol[2].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[2].dynBal.U
enthalpyExchanger.airDuct1.vol[3].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[3].dynBal.U
enthalpyExchanger.airDuct1.vol[4].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[4].dynBal.U
enthalpyExchanger.airDuct1.vol[5].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[5].dynBal.U
enthalpyExchanger.airDuct1.vol[6].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[6].dynBal.U
enthalpyExchanger.airDuct1.vol[7].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[7].dynBal.U
enthalpyExchanger.airDuct1.vol[8].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[8].dynBal.U
enthalpyExchanger.airDuct1.vol[9].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[9].dynBal.U
enthalpyExchanger.airDuct1.vol[10].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[10].dynBal.U
enthalpyExchanger.airDuct1.vol[11].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[11].dynBal.U
enthalpyExchanger.airDuct1.vol[12].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[12].dynBal.U
enthalpyExchanger.airDuct1.vol[13].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[13].dynBal.U
enthalpyExchanger.airDuct1.vol[14].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[14].dynBal.U
enthalpyExchanger.airDuct1.vol[15].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[15].dynBal.U
enthalpyExchanger.airDuct2.senRelHum.phi
enthalpyExchanger.airDuct2.senTem.T
enthalpyExchanger.airDuct2.vol[1].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[1].dynBal.U
enthalpyExchanger.airDuct2.vol[2].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[2].dynBal.U
enthalpyExchanger.airDuct2.vol[3].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[3].dynBal.U
enthalpyExchanger.airDuct2.vol[4].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[4].dynBal.U
enthalpyExchanger.airDuct2.vol[5].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[5].dynBal.U
enthalpyExchanger.airDuct2.vol[6].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[6].dynBal.U
enthalpyExchanger.airDuct2.vol[7].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[7].dynBal.U
enthalpyExchanger.airDuct2.vol[8].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[8].dynBal.U
enthalpyExchanger.airDuct2.vol[9].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[9].dynBal.U
enthalpyExchanger.airDuct2.vol[10].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[10].dynBal.U
enthalpyExchanger.airDuct2.vol[11].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[11].dynBal.U
enthalpyExchanger.airDuct2.vol[12].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[12].dynBal.U
enthalpyExchanger.airDuct2.vol[13].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[13].dynBal.U
enthalpyExchanger.airDuct2.vol[14].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[14].dynBal.U
enthalpyExchanger.airDuct2.vol[15].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[15].dynBal.U
enthalpyExchanger.membrane.heatTransfer.Ts[1]
enthalpyExchanger.membrane.heatTransfer.Ts[2]
enthalpyExchanger.membrane.heatTransfer.Ts[3]
enthalpyExchanger.membrane.heatTransfer.Ts[4]
enthalpyExchanger.membrane.heatTransfer.Ts[5]
enthalpyExchanger.membrane.heatTransfer.Ts[6]
enthalpyExchanger.membrane.heatTransfer.Ts[7]
enthalpyExchanger.membrane.heatTransfer.Ts[8]
enthalpyExchanger.membrane.heatTransfer.Ts[9]
enthalpyExchanger.membrane.heatTransfer.Ts[10]
enthalpyExchanger.membrane.heatTransfer.Ts[11]
enthalpyExchanger.membrane.heatTransfer.Ts[12]
enthalpyExchanger.membrane.heatTransfer.Ts[13]
enthalpyExchanger.membrane.heatTransfer.Ts[14]
enthalpyExchanger.membrane.heatTransfer.Ts[15]
fan.motSpe.y
fan.vol.dynBal.medium.Xi[1]
fan.vol.dynBal.U
fan1.motSpe.y
fan1.vol.dynBal.medium.Xi[1]
fan1.vol.dynBal.U
senMasFraEha.X
senMasFraEta.X
senMasFraOda.X
senMasFraSup.X
senTemEha.T
senTemEta.T
senTemOda.T
senTemSup.T
Finished
Finished
 = true

Declaring variable: Boolean rScript ;

savelog("AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Validation.StaticValidation.translation.log"); = true


rCheck = checkModel("AixLib.Fluid.Storage.Examples.StorageSimpleExample");
Check of AixLib.Fluid.Storage.Examples.StorageSimpleExample
The model has the same number of unknowns and equations: 958
The model could not be deduced to be symbolically well-posed.
The model has
  932+storageSimple.layer[1].dynBal.nPorts+storageSimple.layer[2].dynBal.nPorts+  storageSimple.layer[3].dynBal.nPorts+storageSimple.layer_HE[1].dynBal.nPorts+  storageSimple.layer_HE[2].dynBal.nPorts+storageSimple.layer_HE[3].dynBal.nPorts  +2*storageSimple.n+heatingRod.vol.dynBal.nPorts+simpleConsumer.volume.dynBal.nPorts  +pumpGen.vol.dynBal.nPorts+pumpCon.vol.dynBal.nPorts
scalar unknowns and
  863+(if storageSimple.use_TOut then 2*storageSimple.n else 0)+(if   pressureBoundary.use_Xi_in then 1 else (if pressureBoundary.use_X_in then 0   else 1))+(if  not pressureBoundary.use_p_in then 1 else 0)+2*pressureBoundary.nPorts  +(if  not pressureBoundary.use_T_in then 1 else 0)+(if pressureBoundary1.use_Xi_in   then 1 else (if pressureBoundary1.use_X_in then 0 else 1))+(if  not   pressureBoundary1.use_p_in then 1 else 0)+2*pressureBoundary1.nPorts+(if  not   pressureBoundary1.use_T_in then 1 else 0)+(if PIDHR.reset <> AixLib.Types.Reset.  Input then 1 else 0)+(if PIDPumpGen.reset <> AixLib.Types.Reset.Input then 1   else 0)+(if PIDPumpCon.reset <> AixLib.Types.Reset.Input then 1 else 0)+(if    not storageSimple.layer[1].dynBal.use_mWat_flow then 1 else 0)+3*  storageSimple.layer[1].dynBal.nPorts+(if  not storageSimple.layer[2].dynBal.use_mWat_flow   then 1 else 0)+3*storageSimple.layer[2].dynBal.nPorts+(if  not   storageSimple.layer[3].dynBal.use_mWat_flow then 1 else 0)+3*storageSimple.layer[3].dynBal.nPorts  +(if  not storageSimple.layer_HE[1].dynBal.use_mWat_flow then 1 else 0)+3*  storageSimple.layer_HE[1].dynBal.nPorts+(if  not storageSimple.layer_HE[2].dynBal.use_mWat_flow   then 1 else 0)+3*storageSimple.layer_HE[2].dynBal.nPorts+(if  not   storageSimple.layer_HE[3].dynBal.use_mWat_flow then 1 else 0)+3*  storageSimple.layer_HE[3].dynBal.nPorts+(if  not heatingRod.vol.dynBal.use_mWat_flow   then 1 else 0)+3*heatingRod.vol.dynBal.nPorts+(if  not simpleConsumer.volume.dynBal.use_mWat_flow   then 1 else 0)+3*simpleConsumer.volume.dynBal.nPorts+(if  not   pumpGen.vol.dynBal.use_mWat_flow then 1 else 0)+3*pumpGen.vol.dynBal.nPorts+(  if  not pumpCon.vol.dynBal.use_mWat_flow then 1 else 0)+3*pumpCon.vol.dynBal.nPorts  +(if (if PIDHR.reset == AixLib.Types.Reset.Disabled then PIDHR.reset else   AixLib.Types.Reset.Input) <> AixLib.Types.Reset.Input then 1 else 0)+(if (if   PIDHR.reset == AixLib.Types.Reset.Disabled then PIDHR.reset else   AixLib.Types.Reset.Input) == AixLib.Types.Reset.Disabled then 1 else 0)+(if (  if PIDPumpGen.reset == AixLib.Types.Reset.Disabled then PIDPumpGen.reset else   AixLib.Types.Reset.Input) <> AixLib.Types.Reset.Input then 1 else 0)+(if (if   PIDPumpGen.reset == AixLib.Types.Reset.Disabled then PIDPumpGen.reset else   AixLib.Types.Reset.Input) == AixLib.Types.Reset.Disabled then 1 else 0)+(if (  if PIDPumpCon.reset == AixLib.Types.Reset.Disabled then PIDPumpCon.reset else   AixLib.Types.Reset.Input) <> AixLib.Types.Reset.Input then 1 else 0)+(if (if   PIDPumpCon.reset == AixLib.Types.Reset.Disabled then PIDPumpCon.reset else   AixLib.Types.Reset.Input) == AixLib.Types.Reset.Disabled then 1 else 0)
scalar equations.
However, exploiting the given numerical settings of parameters gives the same number of unknowns and equations:
  958
Check of AixLib.Fluid.Storage.Examples.StorageSimpleExample successful.
Declaring variable: Boolean rCheck ;

Modelica.Utilities.Streams.print("    { \"file\" :  \"AixLib/Resources/Scripts/Dymola/Fluid/Storage/Examples/StorageSimpleExample.mos\",", "AixLib.Fluid.Storage.Examples.StorageSimpleExample.statistics.log");
Modelica.Utilities.Streams.print("      \"model\" : \"AixLib.Fluid.Storage.Examples.StorageSimpleExample\",", "AixLib.Fluid.Storage.Examples.StorageSimpleExample.statistics.log");
Modelica.Utilities.Streams.print("      \"check\" : {", "AixLib.Fluid.Storage.Examples.StorageSimpleExample.statistics.log");
Modelica.Utilities.Streams.print("        \"command\" : \"checkModel(\\\"AixLib.Fluid.Storage.Examples.StorageSimpleExample\\\");\",", "AixLib.Fluid.Storage.Examples.StorageSimpleExample.statistics.log");
Modelica.Utilities.Streams.print("        \"result\"  : " + String(rCheck), "AixLib.Fluid.Storage.Examples.StorageSimpleExample.statistics.log");
Modelica.Utilities.Streams.print("      },", "AixLib.Fluid.Storage.Examples.StorageSimpleExample.statistics.log");


rScript=RunScript("modelica://AixLib/Resources/Scripts/Dymola/Fluid/Storage/Examples/StorageSimpleExample.mos");
simulateModel("AixLib.Fluid.Storage.Examples.StorageSimpleExample", tolerance=1e-6, stopTime=38200, method="dassl", resultFile="AixLib.Fluid.Storage.Examples.StorageSimpleExample");
Translation of AixLib.Fluid.Storage.Examples.StorageSimpleExample
The DAE has 958 scalar unknowns and 958 scalar equations.
 
Statistics
 
Original Model
  Number of components: 247
  Variables: 2521
  Constants: 55 (55 scalars)
  Parameters: 1176 (1663 scalars)
  Unknowns: 1290 (1004 scalars)
  Differentiated variables: 26 scalars
  Equations: 1097
  Nontrivial: 856
Translated Model
  Constants: 1046 scalars
  Free parameters: 180 scalars
  Parameter depending: 625 scalars
  Outputs: 1 scalars
  Continuous time states: 15 scalars
  Time-varying variables: 239 scalars
  Alias variables: 632 scalars
  Number of mixed real/discrete systems of equations: 0
  Sizes of linear systems of equations: {4}
  Sizes after manipulation of the linear systems: {0}
  Sizes of nonlinear systems of equations: {5, 7}
  Sizes after manipulation of the nonlinear systems: {1, 1}
  Number of numerical Jacobians: 0
  Initialization problem
    Sizes of nonlinear systems of equations: {5, 1, 7, 1}
    Sizes after manipulation of the nonlinear systems: {1, 0, 1, 0}
    Sizes of simplified homotopy nonlinear systems of equations: {5, 1, 7, 1}
    Sizes after manipulation of the simplified homotopy nonlinear systems: {1, 0, 1, 0}
    Number of numerical Jacobians: 0
 
Selected continuous time states
Statically selected continuous time states
heatingRod.vol.dynBal.U
PIDHR.I.y
PIDPumpCon.I.y
PIDPumpGen.I.y
pumpCon.motSpe.y
pumpCon.vol.dynBal.U
pumpGen.motSpe.y
pumpGen.vol.dynBal.U
simpleConsumer.heatCapacitor.T
storageSimple.layer[1].dynBal.U
storageSimple.layer[2].dynBal.U
storageSimple.layer[3].dynBal.U
storageSimple.layer_HE[1].dynBal.U
storageSimple.layer_HE[2].dynBal.U
storageSimple.layer_HE[3].dynBal.U
Finished
Finished
 = true

Declaring variable: Boolean rScript ;

savelog("AixLib.Fluid.Storage.Examples.StorageSimpleExample.translation.log"); = true


rCheck = checkModel("AixLib.Fluid.HeatPumps.ModularReversible.Examples.VCLibAirToWater_OneRoomRadiator");
Check of AixLib.Fluid.HeatPumps.ModularReversible.Examples.VCLibAirToWater_OneRoomRadiator
The model has the same number of unknowns and equations: 1662
The model could not be deduced to be symbolically well-posed.
The model has
  1617+2*(rad.nEle+vol.dynBal.nPorts)+max([size(timTab.columns, 1); size(  timTab.offset, 1)])+rad.vol[1].dynBal.nPorts+rad.vol[2].dynBal.nPorts+  rad.vol[3].dynBal.nPorts+rad.vol[4].dynBal.nPorts+rad.vol[5].dynBal.nPorts+  rad.sumCon.nin+rad.sumRad.nin+heaPum.con.vol.dynBal.nPorts+2*heaPum.eva.vol.dynBal.nPorts  +size(heaPum.safCtr.opeEnv.bouMapHea.tabBou.columns, 1)+heaPum.safCtr.opeEnv.bouMapHea.nor.nu  +size(heaPum.safCtr.opeEnv.bouMapCoo.tabBou.columns, 1)+heaPum.safCtr.opeEnv.bouMapCoo.nor.nu
scalar unknowns and
  1569+max([size(timTab.columns, 1); size(timTab.offset, 1)])+(if weaDat.pAtmSou   == AixLib.BoundaryConditions.Types.DataSource.Parameter then 1 else 0)+(if   weaDat.TDewPoiSou == AixLib.BoundaryConditions.Types.DataSource.Parameter   then 1 else 0)+(if weaDat.TDryBulSou == AixLib.BoundaryConditions.Types.DataSource.  Parameter then 1 else 0)+(if weaDat.TBlaSkySou == AixLib.BoundaryConditions.Types.DataSource.  Parameter then 1 else 0)+(if weaDat.relHumSou == AixLib.BoundaryConditions.Types.DataSource.  Parameter then 1 else 0)+(if weaDat.opaSkyCovSou == AixLib.BoundaryConditions.Types.DataSource.  Parameter then 1 else 0)+(if weaDat.ceiHeiSou == AixLib.BoundaryConditions.Types.DataSource.  Parameter then 1 else 0)+(if weaDat.totSkyCovSou == AixLib.BoundaryConditions.Types.DataSource.  Parameter then 1 else 0)+(if weaDat.winSpeSou == AixLib.BoundaryConditions.Types.DataSource.  Parameter then 1 else 0)+(if weaDat.winDirSou == AixLib.BoundaryConditions.Types.DataSource.  Parameter then 1 else 0)+(if weaDat.HInfHorSou == AixLib.BoundaryConditions.Types.DataSource.  Parameter then 1 else 0)+(if weaDat.HSou == AixLib.BoundaryConditions.Types.RadiationDataSource.  Input_HDirNor_HDifHor then 2 else 1)+(if weaDat.HSou == AixLib.BoundaryConditions.Types.RadiationDataSource.  Input_HDirNor_HGloHor then 2 else 1)+(if weaDat.HSou == AixLib.BoundaryConditions.Types.RadiationDataSource.  Input_HGloHor_HDifHor then 2 else 1)+(if sou.use_Xi_in then 2 else (if   sou.use_X_in then 1 else 3))+3*sou.nPorts+(if  not sou.use_p_in then 1 else 0)  +(if  not sou.use_T_in then 1 else 0)+(if sin.use_Xi_in then 2 else (if   sin.use_X_in then 1 else 3))+3*sin.nPorts+(if  not sin.use_p_in then 1 else 0)  +(if  not sin.use_T_in then 1 else 0)+(if preSou.use_Xi_in then 1 else (if   preSou.use_X_in then 0 else 1))+(if  not preSou.use_p_in then 1 else 0)+2*  preSou.nPorts+(if  not preSou.use_T_in then 1 else 0)+(if  not   vol.dynBal.use_mWat_flow then 1 else 0)+5*vol.dynBal.nPorts+(if  not   rad.vol[1].dynBal.use_mWat_flow then 1 else 0)+3*rad.vol[1].dynBal.nPorts+(if    not rad.vol[2].dynBal.use_mWat_flow then 1 else 0)+3*rad.vol[2].dynBal.nPorts  +(if  not rad.vol[3].dynBal.use_mWat_flow then 1 else 0)+3*rad.vol[3].dynBal.nPorts  +(if  not rad.vol[4].dynBal.use_mWat_flow then 1 else 0)+3*rad.vol[4].dynBal.nPorts  +(if  not rad.vol[5].dynBal.use_mWat_flow then 1 else 0)+3*rad.vol[5].dynBal.nPorts  +(if  not pumHeaPum.vol.steBal.use_mWat_flow then 1 else 0)+(if  not   pumHeaPumSou.vol.steBal.use_mWat_flow then 1 else 0)+(if  not heaPum.con.vol.dynBal.use_mWat_flow   then 1 else 0)+3*heaPum.con.vol.dynBal.nPorts+(if  not heaPum.eva.vol.dynBal.use_mWat_flow   then 1 else 0)+5*heaPum.eva.vol.dynBal.nPorts+size(heaPum.safCtr.opeEnv.bouMapHea.tabBou.columns,   1)+size(heaPum.safCtr.opeEnv.bouMapCoo.tabBou.columns, 1)+2*rad.nEle
scalar equations.
However, exploiting the given numerical settings of parameters gives the same number of unknowns and equations:
  1662
Check of AixLib.Fluid.HeatPumps.ModularReversible.Examples.VCLibAirToWater_OneRoomRadiator successful.
Declaring variable: Boolean rCheck ;

Modelica.Utilities.Streams.print("    { \"file\" :  \"AixLib/Resources/Scripts/Dymola/Fluid/HeatPumps/ModularReversible/Examples/VCLibAirToWater_OneRoomRadiator.mos\",", "AixLib.Fluid.HeatPumps.ModularReversible.Examples.VCLibAirToWater_OneRoomRadiator.statistics.log");
Modelica.Utilities.Streams.print("      \"model\" : \"AixLib.Fluid.HeatPumps.ModularReversible.Examples.VCLibAirToWater_OneRoomRadiator\",", "AixLib.Fluid.HeatPumps.ModularReversible.Examples.VCLibAirToWater_OneRoomRadiator.statistics.log");
Modelica.Utilities.Streams.print("      \"check\" : {", "AixLib.Fluid.HeatPumps.ModularReversible.Examples.VCLibAirToWater_OneRoomRadiator.statistics.log");
Modelica.Utilities.Streams.print("        \"command\" : \"checkModel(\\\"AixLib.Fluid.HeatPumps.ModularReversible.Examples.VCLibAirToWater_OneRoomRadiator\\\");\",", "AixLib.Fluid.HeatPumps.ModularReversible.Examples.VCLibAirToWater_OneRoomRadiator.statistics.log");
Modelica.Utilities.Streams.print("        \"result\"  : " + String(rCheck), "AixLib.Fluid.HeatPumps.ModularReversible.Examples.VCLibAirToWater_OneRoomRadiator.statistics.log");
Modelica.Utilities.Streams.print("      },", "AixLib.Fluid.HeatPumps.ModularReversible.Examples.VCLibAirToWater_OneRoomRadiator.statistics.log");


rScript=RunScript("modelica://AixLib/Resources/Scripts/Dymola/Fluid/HeatPumps/ModularReversible/Examples/VCLibAirToWater_OneRoomRadiator.mos");
simulateModel("AixLib.Fluid.HeatPumps.ModularReversible.Examples.VCLibAirToWater_OneRoomRadiator", stopTime=86400, method="CVode", tolerance=1e-08, resultFile="AixLib.Fluid.HeatPumps.ModularReversible.Examples.VCLibAirToWater_OneRoomRadiator");
Translation of AixLib.Fluid.HeatPumps.ModularReversible.Examples.VCLibAirToWater_OneRoomRadiator
The DAE has 1662 scalar unknowns and 1662 scalar equations.
Redundant consistent initial conditions.
Removed the following equations which are redundant and consistent: 
  heaPum.eva.p_start = heaPum.pEva_start;
 
This required evaluation of 
the interactive parameters 
    heaPum.pEva_start(start = 101325)
    sin.p(start = 101325)
 
 
Statistics
 
Original Model
  Number of components: 437
  Variables: 3499
  Constants: 77 (77 scalars)
  Parameters: 1678 (2035 scalars)
  Unknowns: 1744 (1719 scalars)
  Differentiated variables: 22 scalars
  Equations: 1632
  Nontrivial: 1358
Translated Model
  Constants: 1522 scalars
  Free parameters: 220 scalars
  Parameter depending: 763 scalars
  Outputs: 24 scalars
  Continuous time states: 14 scalars
  Time-varying variables: 351 scalars
  Alias variables: 975 scalars
  Number of mixed real/discrete systems of equations: 0
  Sizes of linear systems of equations: {2, 2, 2, 2, 2, 4}
  Sizes after manipulation of the linear systems: {0, 0, 0, 0, 0, 0}
  Sizes of nonlinear systems of equations: {3}
  Sizes after manipulation of the nonlinear systems: {1}
  Number of numerical Jacobians: 0
  Initialization problem
    Sizes of nonlinear systems of equations: {11, 1, 1, 2}
    Sizes after manipulation of the nonlinear systems: {5, 1, 1, 1}
    Sizes of simplified homotopy nonlinear systems of equations: {2}
    Sizes after manipulation of the simplified homotopy nonlinear systems: {1}
    Number of numerical Jacobians: 0
 
Selected continuous time states
Statically selected continuous time states
heaPum.con.vol.dynBal.U
heaPum.eva.vol.dynBal.medium.Xi[1]
heaPum.eva.vol.dynBal.U
oneRooRadHeaPumCtr.PIDHea.I.y
rad.vol[1].dynBal.U
rad.vol[2].dynBal.U
rad.vol[3].dynBal.U
rad.vol[4].dynBal.U
rad.vol[5].dynBal.U
temRet.T
temSup.T
vol.dynBal.m
vol.dynBal.medium.Xi[1]
vol.hOut_internal
Finished
Finished
 = true

Declaring variable: Boolean rScript ;

savelog("AixLib.Fluid.HeatPumps.ModularReversible.Examples.VCLibAirToWater_OneRoomRadiator.translation.log"); = true


rCheck = checkModel("AixLib.Fluid.Pools.Examples.IndoorSwimmingPool");
Check of AixLib.Fluid.Pools.Examples.IndoorSwimmingPool
The model has the same number of unknowns and equations: 674
The model has the same number of unknowns and equations
for the given numerical settings of parameters: 674
Check of AixLib.Fluid.Pools.Examples.IndoorSwimmingPool successful.
Declaring variable: Boolean rCheck ;

Modelica.Utilities.Streams.print("    { \"file\" :  \"AixLib/Resources/Scripts/Dymola/Fluid/Pools/Examples/IndoorSwimmingPool.mos\",", "AixLib.Fluid.Pools.Examples.IndoorSwimmingPool.statistics.log");
Modelica.Utilities.Streams.print("      \"model\" : \"AixLib.Fluid.Pools.Examples.IndoorSwimmingPool\",", "AixLib.Fluid.Pools.Examples.IndoorSwimmingPool.statistics.log");
Modelica.Utilities.Streams.print("      \"check\" : {", "AixLib.Fluid.Pools.Examples.IndoorSwimmingPool.statistics.log");
Modelica.Utilities.Streams.print("        \"command\" : \"checkModel(\\\"AixLib.Fluid.Pools.Examples.IndoorSwimmingPool\\\");\",", "AixLib.Fluid.Pools.Examples.IndoorSwimmingPool.statistics.log");
Modelica.Utilities.Streams.print("        \"result\"  : " + String(rCheck), "AixLib.Fluid.Pools.Examples.IndoorSwimmingPool.statistics.log");
Modelica.Utilities.Streams.print("      },", "AixLib.Fluid.Pools.Examples.IndoorSwimmingPool.statistics.log");


rScript=RunScript("modelica://AixLib/Resources/Scripts/Dymola/Fluid/Pools/Examples/IndoorSwimmingPool.mos");
simulateModel("AixLib.Fluid.Pools.Examples.IndoorSwimmingPool", tolerance=1e-6, stopTime=604800, numberOfIntervals=0, outputInterval=900, method="CVode", resultFile="AixLib.Fluid.Pools.Examples.IndoorSwimmingPool");
Translation of AixLib.Fluid.Pools.Examples.IndoorSwimmingPool
The DAE has 674 scalar unknowns and 674 scalar equations.
 
Statistics
 
Original Model
  Number of components: 161
  Variables: 1597
  Constants: 40 (40 scalars)
  Parameters: 724 (915 scalars)
  Unknowns: 833 (701 scalars)
  Differentiated variables: 2 scalars
  Equations: 700
  Nontrivial: 575
Translated Model
  Constants: 538 scalars
  Free parameters: 124 scalars
  Parameter depending: 408 scalars
  Continuous time states: 2 scalars
  Time-varying variables: 177 scalars
  Alias variables: 409 scalars
  Number of mixed real/discrete systems of equations: 1
  Sizes of linear systems of equations: {26}
  Sizes after manipulation of the linear systems: {13}
  Sizes of nonlinear systems of equations: {74, 1, 1}
  Sizes after manipulation of the nonlinear systems: {16, 0, 1}
  Number of numerical Jacobians: 0
  Initialization problem
    Sizes of nonlinear systems of equations: {1, 73, 1}
    Sizes after manipulation of the nonlinear systems: {1, 16, 1}
    Number of numerical Jacobians: 0
 
Selected continuous time states
Statically selected continuous time states
indoorSwimming.cirPump.motSpe.y
indoorSwimming.PI.I.y
Finished
Finished
 = true

Declaring variable: Boolean rScript ;

savelog("AixLib.Fluid.Pools.Examples.IndoorSwimmingPool.translation.log"); = true


rCheck = checkModel("AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDpFixedTempDifferenceBypass");
Check of AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDpFixedTempDifferenceBypass
The model has the same number of unknowns and equations: 572
The model could not be deduced to be symbolically well-posed.
The model has
  562+demand.vol.dynBal.nPorts+pipeSupply.vol_b.dynBal.nPorts+pipeSupply.vol_a.dynBal.nPorts  +pipeReturn.vol_b.dynBal.nPorts+pipeReturn.vol_a.dynBal.nPorts
scalar unknowns and
  522+(if sourceIdeal.source.use_Xi_in then 1 else (if sourceIdeal.source.use_X_in   then 0 else 1))+(if  not sourceIdeal.source.use_p_in then 1 else 0)+2*  sourceIdeal.source.nPorts+(if  not sourceIdeal.source.use_T_in then 1 else 0)+  (if sourceIdeal.sink.use_Xi_in then 1 else (if sourceIdeal.sink.use_X_in then 0   else 1))+(if  not sourceIdeal.sink.use_p_in then 1 else 0)+2*sourceIdeal.sink.nPorts  +(if  not sourceIdeal.sink.use_T_in then 1 else 0)+(if demand.sink.use_Xi_in   then 1 else (if demand.sink.use_X_in then 0 else 1))+(if  not   demand.sink.use_m_flow_in then 1 else 0)+2*demand.sink.nPorts+(if  not   demand.sink.use_T_in then 1 else 0)+(if demand.source.use_Xi_in then 1 else (  if demand.source.use_X_in then 0 else 1))+(if  not demand.source.use_m_flow_in   then 1 else 0)+2*demand.source.nPorts+(if  not demand.source.use_T_in then 1   else 0)+(if  not demand.vol.dynBal.use_mWat_flow then 1 else 0)+3*  demand.vol.dynBal.nPorts+(if  not pipeSupply.vol_b.dynBal.use_mWat_flow then 1   else 0)+3*pipeSupply.vol_b.dynBal.nPorts+(if  not pipeSupply.vol_a.dynBal.use_mWat_flow   then 1 else 0)+3*pipeSupply.vol_a.dynBal.nPorts+(if  not pipeReturn.vol_b.dynBal.use_mWat_flow   then 1 else 0)+3*pipeReturn.vol_b.dynBal.nPorts+(if  not pipeReturn.vol_a.dynBal.use_mWat_flow   then 1 else 0)+3*pipeReturn.vol_a.dynBal.nPorts
scalar equations.
However, exploiting the given numerical settings of parameters gives the same number of unknowns and equations:
  572
Check of AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDpFixedTempDifferenceBypass successful.
Declaring variable: Boolean rCheck ;

Modelica.Utilities.Streams.print("    { \"file\" :  \"AixLib/Resources/Scripts/Dymola/Fluid/DistrictHeatingCooling/Demands/Examples/OpenLoopVarTSupplyDpFixedTempDifferenceBypass.mos\",", "AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDpFixedTempDifferenceBypass.statistics.log");
Modelica.Utilities.Streams.print("      \"model\" : \"AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDpFixedTempDifferenceBypass\",", "AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDpFixedTempDifferenceBypass.statistics.log");
Modelica.Utilities.Streams.print("      \"check\" : {", "AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDpFixedTempDifferenceBypass.statistics.log");
Modelica.Utilities.Streams.print("        \"command\" : \"checkModel(\\\"AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDpFixedTempDifferenceBypass\\\");\",", "AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDpFixedTempDifferenceBypass.statistics.log");
Modelica.Utilities.Streams.print("        \"result\"  : " + String(rCheck), "AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDpFixedTempDifferenceBypass.statistics.log");
Modelica.Utilities.Streams.print("      },", "AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDpFixedTempDifferenceBypass.statistics.log");


rScript=RunScript("modelica://AixLib/Resources/Scripts/Dymola/Fluid/DistrictHeatingCooling/Demands/Examples/OpenLoopVarTSupplyDpFixedTempDifferenceBypass.mos");
translateModel("AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDpFixedTempDifferenceBypass");
Translation of AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDpFixedTempDifferenceBypass
The DAE has 572 scalar unknowns and 572 scalar equations.
 
Statistics
 
Original Model
  Number of components: 114
  Variables: 1510
  Constants: 29 (29 scalars)
  Parameters: 679 (650 scalars)
  Unknowns: 802 (590 scalars)
  Differentiated variables: 17 scalars
  Equations: 680
  Nontrivial: 543
Translated Model
  Constants: 513 scalars
  Free parameters: 121 scalars
  Parameter depending: 138 scalars
  Continuous time states: 12 scalars
  Time-varying variables: 132 scalars
  Alias variables: 365 scalars
  Number of mixed real/discrete systems of equations: 0
  Sizes of linear systems of equations: { }
  Sizes after manipulation of the linear systems: { }
  Sizes of nonlinear systems of equations: {8}
  Sizes after manipulation of the nonlinear systems: {1}
  Number of numerical Jacobians: 0
  Initialization problem
    Sizes of nonlinear systems of equations: {8}
    Sizes after manipulation of the nonlinear systems: {1}
    Number of numerical Jacobians: 0
 
Selected continuous time states
Statically selected continuous time states
demand.senT_return.T
demand.senT_supply.T
demand.vol.dynBal.U
pControl.I.y
pipeReturn.del.x
pipeReturn.timDel.x
pipeReturn.vol_a.dynBal.U
pipeReturn.vol_b.dynBal.U
pipeSupply.del.x
pipeSupply.timDel.x
pipeSupply.vol_a.dynBal.U
pipeSupply.vol_b.dynBal.U
Finished
 = true
simulateModel("AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDpFixedTempDifferenceBypass", stopTime=100000, method="dassl", tolerance=1e-006, resultFile="AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDpFixedTempDifferenceBypass");
Finished
Finished
 = true

Declaring variable: Boolean rScript ;

savelog("AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDpFixedTempDifferenceBypass.translation.log"); = true


rCheck = checkModel("AixLib.Fluid.Movers.DpControlledMovers.Examples.DpVar");
Check of AixLib.Fluid.Movers.DpControlledMovers.Examples.DpVar
The model has the same number of unknowns and equations: 244
The model could not be deduced to be symbolically well-posed.
The model has
  242+vol.dynBal.nPorts
scalar unknowns and
  231+(if sou.use_Xi_in then 1 else (if sou.use_X_in then 0 else 1))+(if  not   sou.use_p_in then 1 else 0)+2*sou.nPorts+(if  not sou.use_T_in then 1 else 0)+  (if  not dpControlled_dp.mov.vol.steBal.use_mWat_flow then 1 else 0)+(if  not   vol.dynBal.use_mWat_flow then 1 else 0)+3*vol.dynBal.nPorts
scalar equations.
However, exploiting the given numerical settings of parameters gives the same number of unknowns and equations:
  244
Check of AixLib.Fluid.Movers.DpControlledMovers.Examples.DpVar successful.
Declaring variable: Boolean rCheck ;

Modelica.Utilities.Streams.print("    { \"file\" :  \"AixLib/Resources/Scripts/Dymola/Fluid/Movers/DpControlledMovers/Examples/DpVar.mos\",", "AixLib.Fluid.Movers.DpControlledMovers.Examples.DpVar.statistics.log");
Modelica.Utilities.Streams.print("      \"model\" : \"AixLib.Fluid.Movers.DpControlledMovers.Examples.DpVar\",", "AixLib.Fluid.Movers.DpControlledMovers.Examples.DpVar.statistics.log");
Modelica.Utilities.Streams.print("      \"check\" : {", "AixLib.Fluid.Movers.DpControlledMovers.Examples.DpVar.statistics.log");
Modelica.Utilities.Streams.print("        \"command\" : \"checkModel(\\\"AixLib.Fluid.Movers.DpControlledMovers.Examples.DpVar\\\");\",", "AixLib.Fluid.Movers.DpControlledMovers.Examples.DpVar.statistics.log");
Modelica.Utilities.Streams.print("        \"result\"  : " + String(rCheck), "AixLib.Fluid.Movers.DpControlledMovers.Examples.DpVar.statistics.log");
Modelica.Utilities.Streams.print("      },", "AixLib.Fluid.Movers.DpControlledMovers.Examples.DpVar.statistics.log");


rScript=RunScript("modelica://AixLib/Resources/Scripts/Dymola/Fluid/Movers/DpControlledMovers/Examples/DpVar.mos");
simulateModel("AixLib.Fluid.Movers.DpControlledMovers.Examples.DpVar", startTime=0, stopTime=3600, tolerance=1e-6, method="dassl", resultFile="AixLib.Fluid.Movers.DpControlledMovers.Examples.DpVar");
Translation of AixLib.Fluid.Movers.DpControlledMovers.Examples.DpVar
The DAE has 244 scalar unknowns and 244 scalar equations.
 
Statistics
 
Original Model
  Number of components: 82
  Variables: 802
  Constants: 16 (16 scalars)
  Parameters: 458 (940 scalars)
  Unknowns: 328 (259 scalars)
  Differentiated variables: 5 scalars
  Equations: 280
  Nontrivial: 232
Translated Model
  Constants: 679 scalars
  Free parameters: 47 scalars
  Parameter depending: 270 scalars
  Outputs: 1 scalars
  Continuous time states: 3 scalars
  Time-varying variables: 55 scalars
  Alias variables: 164 scalars
  Number of mixed real/discrete systems of equations: 0
  Sizes of linear systems of equations: { }
  Sizes after manipulation of the linear systems: { }
  Sizes of nonlinear systems of equations: {3, 1}
  Sizes after manipulation of the nonlinear systems: {1, 1}
  Number of numerical Jacobians: 0
  Initialization problem
    Sizes of nonlinear systems of equations: {3, 1, 1}
    Sizes after manipulation of the nonlinear systems: {1, 0, 1}
    Sizes of simplified homotopy nonlinear systems of equations: {3, 1}
    Sizes after manipulation of the simplified homotopy nonlinear systems: {1, 0}
    Number of numerical Jacobians: 0
 
Selected continuous time states
Statically selected continuous time states
dpControlled_dp.mov.motSpe.y
integrator.y
val.actPos.y
Finished
Finished
 = true



Declaring variable: Boolean rScript ;

savelog("AixLib.Fluid.Movers.DpControlledMovers.Examples.DpVar.translation.log"); = true


rCheck = checkModel("AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.DHCPipe");
Check of AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.DHCPipe
Warning: Local "m_flow_small" conflict with inherited. Should be identical
Warning: Component m_flow_small(min = << Empty >>),
  but previously m_flow_small(min = 0).
  The components are not identical.
 
  For element m_flow_small found at
 
  File: /tmp/tmp-AixLib-2-phjd7571/AixLib/Fluid/DistrictHeatingCooling/Pipes/DHCPipe.mo, line 39
  Conflict with element from
  File: /tmp/tmp-AixLib-2-phjd7571/AixLib/Fluid/Interfaces/PartialTwoPortInterface.mo, line 10
 Component context: pip
  Component declared as DHCPipe pip in AixLib.Fluid.DistrictHeatingCooling.Pipes
  File: /tmp/tmp-AixLib-2-phjd7571/AixLib/Fluid/DistrictHeatingCooling/Pipes/Examples/DHCPipe.mo, line 18
Warning: Local "m_flow_small" conflict with inherited. Should be identical
Warning: Component m_flow_small(min = << Empty >>),
  but previously m_flow_small(min = 0).
  The components are not identical.
 
  For element m_flow_small found at
 
  File: /tmp/tmp-AixLib-2-phjd7571/AixLib/Fluid/DistrictHeatingCooling/Pipes/DHCPipe.mo, line 39
  Conflict with element from
  File: /tmp/tmp-AixLib-2-phjd7571/AixLib/Fluid/Interfaces/PartialTwoPortInterface.mo, line 10
 Component context: pip1
  Component declared as DHCPipe pip1 in AixLib.Fluid.DistrictHeatingCooling.Pipes
  File: /tmp/tmp-AixLib-2-phjd7571/AixLib/Fluid/DistrictHeatingCooling/Pipes/Examples/DHCPipe.mo, line 68
Warning: Local "m_flow_small" conflict with inherited. Should be identical
Warning: Component m_flow_small(min = << Empty >>),
  but previously m_flow_small(min = 0).
  The components are not identical.
 
  For element m_flow_small found at
 
  File: /tmp/tmp-AixLib-2-phjd7571/AixLib/Fluid/DistrictHeatingCooling/Pipes/DHCPipe.mo, line 39
  Conflict with element from
  File: /tmp/tmp-AixLib-2-phjd7571/AixLib/Fluid/Interfaces/PartialTwoPortInterface.mo, line 10
 Component context: pip2
  Component declared as DHCPipe pip2 in AixLib.Fluid.DistrictHeatingCooling.Pipes
  File: /tmp/tmp-AixLib-2-phjd7571/AixLib/Fluid/DistrictHeatingCooling/Pipes/Examples/DHCPipe.mo, line 114
Warning: Local "m_flow_small" conflict with inherited. Should be identical
Warning: Component m_flow_small(min = << Empty >>),
  but previously m_flow_small(min = 0).
  The components are not identical.
 
  For element m_flow_small found at
 
  File: /tmp/tmp-AixLib-2-phjd7571/AixLib/Fluid/DistrictHeatingCooling/Pipes/DHCPipe.mo, line 39
  Conflict with element from
  File: /tmp/tmp-AixLib-2-phjd7571/AixLib/Fluid/Interfaces/PartialTwoPortInterface.mo, line 10
 Component context: pip3
  Component declared as DHCPipe pip3 in AixLib.Fluid.DistrictHeatingCooling.Pipes
  File: /tmp/tmp-AixLib-2-phjd7571/AixLib/Fluid/DistrictHeatingCooling/Pipes/Examples/DHCPipe.mo, line 161
The model has the same number of unknowns and equations: 804
The model could not be deduced to be symbolically well-posed.
The model has
  796+pip.vol.dynBal.nPorts+pip1.vol.dynBal.nPorts+pip2.vol.dynBal.nPorts+  pip3.vol.dynBal.nPorts
scalar unknowns and
  740+(if sin.use_Xi_in then 1 else (if sin.use_X_in then 0 else 1))+(if  not   sin.use_p_in then 1 else 0)+2*sin.nPorts+(if  not sin.use_T_in then 1 else 0)+  (if sou.use_Xi_in then 1 else (if sou.use_X_in then 0 else 1))+(if  not   sou.use_m_flow_in then 1 else 0)+2*sou.nPorts+(if  not sou.use_T_in then 1   else 0)+(if sin1.use_Xi_in then 1 else (if sin1.use_X_in then 0 else 1))+(if    not sin1.use_p_in then 1 else 0)+2*sin1.nPorts+(if  not sin1.use_T_in then 1   else 0)+(if sou1.use_Xi_in then 1 else (if sou1.use_X_in then 0 else 1))+(if    not sou1.use_m_flow_in then 1 else 0)+2*sou1.nPorts+(if  not sou1.use_T_in   then 1 else 0)+(if sin2.use_Xi_in then 1 else (if sin2.use_X_in then 0 else 1))  +(if  not sin2.use_p_in then 1 else 0)+2*sin2.nPorts+(if  not sin2.use_T_in   then 1 else 0)+(if sou2.use_Xi_in then 1 else (if sou2.use_X_in then 0 else 1))  +(if  not sou2.use_m_flow_in then 1 else 0)+2*sou2.nPorts+(if  not   sou2.use_T_in then 1 else 0)+(if sin3.use_Xi_in then 1 else (if sin3.use_X_in   then 0 else 1))+(if  not sin3.use_p_in then 1 else 0)+2*sin3.nPorts+(if  not   sin3.use_T_in then 1 else 0)+(if sou3.use_Xi_in then 1 else (if sou3.use_X_in   then 0 else 1))+(if  not sou3.use_m_flow_in then 1 else 0)+2*sou3.nPorts+(if    not sou3.use_T_in then 1 else 0)+(if  not pip.vol.dynBal.use_mWat_flow then 1   else 0)+3*pip.vol.dynBal.nPorts+(if  not pip1.vol.dynBal.use_mWat_flow then 1   else 0)+3*pip1.vol.dynBal.nPorts+(if  not pip2.vol.dynBal.use_mWat_flow then 1   else 0)+3*pip2.vol.dynBal.nPorts+(if  not pip3.vol.dynBal.use_mWat_flow then 1   else 0)+3*pip3.vol.dynBal.nPorts
scalar equations.
However, exploiting the given numerical settings of parameters gives the same number of unknowns and equations:
  804
Check of AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.DHCPipe successful.
Declaring variable: Boolean rCheck ;

Modelica.Utilities.Streams.print("    { \"file\" :  \"AixLib/Resources/Scripts/Dymola/Fluid/DistrictHeatingCooling/Pipes/Examples/DHCPipe.mos\",", "AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.DHCPipe.statistics.log");
Modelica.Utilities.Streams.print("      \"model\" : \"AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.DHCPipe\",", "AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.DHCPipe.statistics.log");
Modelica.Utilities.Streams.print("      \"check\" : {", "AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.DHCPipe.statistics.log");
Modelica.Utilities.Streams.print("        \"command\" : \"checkModel(\\\"AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.DHCPipe\\\");\",", "AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.DHCPipe.statistics.log");
Modelica.Utilities.Streams.print("        \"result\"  : " + String(rCheck), "AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.DHCPipe.statistics.log");
Modelica.Utilities.Streams.print("      },", "AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.DHCPipe.statistics.log");


rScript=RunScript("modelica://AixLib/Resources/Scripts/Dymola/Fluid/DistrictHeatingCooling/Pipes/Examples/DHCPipe.mos");
translateModel("AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.DHCPipe");
Translation of AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.DHCPipe
Warning: Local "m_flow_small" conflict with inherited. Should be identical
Warning: Component m_flow_small(min = << Empty >>),
  but previously m_flow_small(min = 0).
  The components are not identical.
 
  For element m_flow_small found at
 
  File: /tmp/tmp-AixLib-2-phjd7571/AixLib/Fluid/DistrictHeatingCooling/Pipes/DHCPipe.mo, line 39
  Conflict with element from
  File: /tmp/tmp-AixLib-2-phjd7571/AixLib/Fluid/Interfaces/PartialTwoPortInterface.mo, line 10
 Component context: pip
  Component declared as DHCPipe pip in AixLib.Fluid.DistrictHeatingCooling.Pipes
  File: /tmp/tmp-AixLib-2-phjd7571/AixLib/Fluid/DistrictHeatingCooling/Pipes/Examples/DHCPipe.mo, line 18
Warning: Local "m_flow_small" conflict with inherited. Should be identical
Warning: Component m_flow_small(min = << Empty >>),
  but previously m_flow_small(min = 0).
  The components are not identical.
 
  For element m_flow_small found at
 
  File: /tmp/tmp-AixLib-2-phjd7571/AixLib/Fluid/DistrictHeatingCooling/Pipes/DHCPipe.mo, line 39
  Conflict with element from
  File: /tmp/tmp-AixLib-2-phjd7571/AixLib/Fluid/Interfaces/PartialTwoPortInterface.mo, line 10
 Component context: pip1
  Component declared as DHCPipe pip1 in AixLib.Fluid.DistrictHeatingCooling.Pipes
  File: /tmp/tmp-AixLib-2-phjd7571/AixLib/Fluid/DistrictHeatingCooling/Pipes/Examples/DHCPipe.mo, line 68
Warning: Local "m_flow_small" conflict with inherited. Should be identical
Warning: Component m_flow_small(min = << Empty >>),
  but previously m_flow_small(min = 0).
  The components are not identical.
 
  For element m_flow_small found at
 
  File: /tmp/tmp-AixLib-2-phjd7571/AixLib/Fluid/DistrictHeatingCooling/Pipes/DHCPipe.mo, line 39
  Conflict with element from
  File: /tmp/tmp-AixLib-2-phjd7571/AixLib/Fluid/Interfaces/PartialTwoPortInterface.mo, line 10
 Component context: pip2
  Component declared as DHCPipe pip2 in AixLib.Fluid.DistrictHeatingCooling.Pipes
  File: /tmp/tmp-AixLib-2-phjd7571/AixLib/Fluid/DistrictHeatingCooling/Pipes/Examples/DHCPipe.mo, line 114
Warning: Local "m_flow_small" conflict with inherited. Should be identical
Warning: Component m_flow_small(min = << Empty >>),
  but previously m_flow_small(min = 0).
  The components are not identical.
 
  For element m_flow_small found at
 
  File: /tmp/tmp-AixLib-2-phjd7571/AixLib/Fluid/DistrictHeatingCooling/Pipes/DHCPipe.mo, line 39
  Conflict with element from
  File: /tmp/tmp-AixLib-2-phjd7571/AixLib/Fluid/Interfaces/PartialTwoPortInterface.mo, line 10
 Component context: pip3
  Component declared as DHCPipe pip3 in AixLib.Fluid.DistrictHeatingCooling.Pipes
  File: /tmp/tmp-AixLib-2-phjd7571/AixLib/Fluid/DistrictHeatingCooling/Pipes/Examples/DHCPipe.mo, line 161
The DAE has 804 scalar unknowns and 804 scalar equations.
 
Statistics
 
Original Model
  Number of components: 144
  Variables: 2254
  Constants: 37 (37 scalars)
  Parameters: 1109 (1081 scalars)
  Unknowns: 1108 (828 scalars)
  Differentiated variables: 33 scalars
  Equations: 923
  Nontrivial: 790
Translated Model
  Constants: 729 scalars
  Free parameters: 205 scalars
  Parameter depending: 321 scalars
  Continuous time states: 29 scalars
  Time-varying variables: 177 scalars
  Alias variables: 514 scalars
  Number of mixed real/discrete systems of equations: 0
  Sizes of linear systems of equations: {2, 2}
  Sizes after manipulation of the linear systems: {0, 0}
  Sizes of nonlinear systems of equations: {6}
  Sizes after manipulation of the nonlinear systems: {1}
  Number of numerical Jacobians: 0
 
Selected continuous time states
Statically selected continuous time states
pip.Q_gai
pip.Q_los
pip.vol.dynBal.U
pip1.pipCor.del.x
pip1.pipCor.timDel.x
pip1.Q_gai
pip1.Q_los
pip1.vol.dynBal.U
pip2.cylHeaTra1.CylindricLoad1.heatCapacitor.T
pip2.cylHeaTra2.CylindricLoad1.heatCapacitor.T
pip2.cylHeaTra3.CylindricLoad1.heatCapacitor.T
pip2.pipCor.del.x
pip2.pipCor.timDel.x
pip2.Q_gai
pip2.Q_los
pip2.vol.dynBal.U
pip3.pipCor.del.x
pip3.pipCor.timDel.x
pip3.Q_gai
pip3.Q_los
pip3.vol.dynBal.U
senTemIn.T
senTemIn1.T
senTemIn2.T
senTemIn3.T
senTemOut.T
senTemOut1.T
senTemOut2.T
senTemOut3.T
Finished
Warning: WARNINGS have been issued.
 = true
simulateModel("AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.DHCPipe", stopTime=3600, method="dassl", tolerance=1e-6, resultFile="AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.DHCPipe");
Finished
 = true

Declaring variable: Boolean rScript ;

savelog("AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.DHCPipe.translation.log"); = true


rCheck = checkModel("AixLib.Fluid.Solar.Thermal.Examples.SolarThermalCollector");
Check of AixLib.Fluid.Solar.Thermal.Examples.SolarThermalCollector
The model has the same number of unknowns and equations: 172
The model could not be deduced to be symbolically well-posed.
The model has
  168+solarThermal.vol.dynBal.nPorts+max([size(hotSummerDay.columns, 1); size(  hotSummerDay.offset, 1)])
scalar unknowns and
  153+(if source.use_Xi_in then 1 else (if source.use_X_in then 0 else 1))+(if    not source.use_p_in then 1 else 0)+2*source.nPorts+(if  not source.use_T_in   then 1 else 0)+(if sink.use_Xi_in then 1 else (if sink.use_X_in then 0 else 1))  +(if  not sink.use_p_in then 1 else 0)+2*sink.nPorts+(if  not sink.use_T_in   then 1 else 0)+max([size(hotSummerDay.columns, 1); size(hotSummerDay.offset, 1)])  +(if  not solarThermal.vol.dynBal.use_mWat_flow then 1 else 0)+3*  solarThermal.vol.dynBal.nPorts
scalar equations.
However, exploiting the given numerical settings of parameters gives the same number of unknowns and equations:
  172
Check of AixLib.Fluid.Solar.Thermal.Examples.SolarThermalCollector successful.
Declaring variable: Boolean rCheck ;

Modelica.Utilities.Streams.print("    { \"file\" :  \"AixLib/Resources/Scripts/Dymola/Fluid/Solar/Thermal/Examples/SolarThermalCollector.mos\",", "AixLib.Fluid.Solar.Thermal.Examples.SolarThermalCollector.statistics.log");
Modelica.Utilities.Streams.print("      \"model\" : \"AixLib.Fluid.Solar.Thermal.Examples.SolarThermalCollector\",", "AixLib.Fluid.Solar.Thermal.Examples.SolarThermalCollector.statistics.log");
Modelica.Utilities.Streams.print("      \"check\" : {", "AixLib.Fluid.Solar.Thermal.Examples.SolarThermalCollector.statistics.log");
Modelica.Utilities.Streams.print("        \"command\" : \"checkModel(\\\"AixLib.Fluid.Solar.Thermal.Examples.SolarThermalCollector\\\");\",", "AixLib.Fluid.Solar.Thermal.Examples.SolarThermalCollector.statistics.log");
Modelica.Utilities.Streams.print("        \"result\"  : " + String(rCheck), "AixLib.Fluid.Solar.Thermal.Examples.SolarThermalCollector.statistics.log");
Modelica.Utilities.Streams.print("      },", "AixLib.Fluid.Solar.Thermal.Examples.SolarThermalCollector.statistics.log");


rScript=RunScript("modelica://AixLib/Resources/Scripts/Dymola/Fluid/Solar/Thermal/Examples/SolarThermalCollector.mos");
simulateModel("AixLib.Fluid.Solar.Thermal.Examples.SolarThermalCollector", tolerance=1e-6, stopTime=86400, method="CVode", resultFile="AixLib.Fluid.Solar.Thermal.Examples.SolarThermalCollector");
Translation of AixLib.Fluid.Solar.Thermal.Examples.SolarThermalCollector
The DAE has 172 scalar unknowns and 172 scalar equations.
 
Statistics
 
Original Model
  Number of components: 33
  Variables: 500
  Constants: 10 (10 scalars)
  Parameters: 249 (316 scalars)
  Unknowns: 241 (176 scalars)
  Differentiated variables: 6 scalars
  Equations: 208
  Nontrivial: 178
Translated Model
  Constants: 181 scalars
  Free parameters: 109 scalars
  Parameter depending: 69 scalars
  Continuous time states: 5 scalars
  Time-varying variables: 31 scalars
  Alias variables: 112 scalars
  Number of mixed real/discrete systems of equations: 0
  Sizes of linear systems of equations: { }
  Sizes after manipulation of the linear systems: { }
  Sizes of nonlinear systems of equations: { }
  Sizes after manipulation of the nonlinear systems: { }
  Number of numerical Jacobians: 0
  Initialization problem
    Sizes of nonlinear systems of equations: {4, 1}
    Sizes after manipulation of the nonlinear systems: {1, 0}
    Number of numerical Jacobians: 0
 
Selected continuous time states
Statically selected continuous time states
solarThermal.senTCold.T
solarThermal.senTHot.T
solarThermal.vol.dynBal.U
T1.T
T2.T
Finished
Finished
 = true

Declaring variable: Boolean rScript ;

savelog("AixLib.Fluid.Solar.Thermal.Examples.SolarThermalCollector.translation.log"); = true


rCheck = checkModel("AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Validation.DynamicValidation");
Check of AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Validation.DynamicValidation
The model has the same number of unknowns and equations: 5508
The model could not be deduced to be symbolically well-posed.
The model has
  3781+32*enthalpyExchanger.n+16*enthalpyExchanger.airDuct2.heatTransfer.n+18*  enthalpyExchanger.airDuct2.massTransfer.n+16*enthalpyExchanger.airDuct1.heatTransfer.n  +18*enthalpyExchanger.airDuct1.massTransfer.n+5*enthalpyExchanger.membrane.heatTransfer.n  +enthalpyExchanger.membrane.massTransfer.n+2*enthalpyExchanger.airDuct2.vol[1].dynBal.nPorts  +2*enthalpyExchanger.airDuct2.vol[2].dynBal.nPorts+2*enthalpyExchanger.airDuct2.vol[3].dynBal.nPorts  +2*enthalpyExchanger.airDuct2.vol[4].dynBal.nPorts+2*enthalpyExchanger.airDuct2.vol[5].dynBal.nPorts  +2*enthalpyExchanger.airDuct2.vol[6].dynBal.nPorts+2*enthalpyExchanger.airDuct2.vol[7].dynBal.nPorts  +2*enthalpyExchanger.airDuct2.vol[8].dynBal.nPorts+2*enthalpyExchanger.airDuct2.vol[9].dynBal.nPorts  +2*enthalpyExchanger.airDuct2.vol[10].dynBal.nPorts+2*enthalpyExchanger.airDuct2.vol[11].dynBal.nPorts  +2*enthalpyExchanger.airDuct2.vol[12].dynBal.nPorts+2*enthalpyExchanger.airDuct2.vol[13].dynBal.nPorts  +2*enthalpyExchanger.airDuct2.vol[14].dynBal.nPorts+2*enthalpyExchanger.airDuct2.vol[15].dynBal.nPorts  +2*enthalpyExchanger.airDuct1.vol[1].dynBal.nPorts+2*enthalpyExchanger.airDuct1.vol[2].dynBal.nPorts  +2*enthalpyExchanger.airDuct1.vol[3].dynBal.nPorts+2*enthalpyExchanger.airDuct1.vol[4].dynBal.nPorts  +2*enthalpyExchanger.airDuct1.vol[5].dynBal.nPorts+2*enthalpyExchanger.airDuct1.vol[6].dynBal.nPorts  +2*enthalpyExchanger.airDuct1.vol[7].dynBal.nPorts+2*enthalpyExchanger.airDuct1.vol[8].dynBal.nPorts  +2*enthalpyExchanger.airDuct1.vol[9].dynBal.nPorts+2*enthalpyExchanger.airDuct1.vol[10].dynBal.nPorts  +2*enthalpyExchanger.airDuct1.vol[11].dynBal.nPorts+2*enthalpyExchanger.airDuct1.vol[12].dynBal.nPorts  +2*enthalpyExchanger.airDuct1.vol[13].dynBal.nPorts+2*enthalpyExchanger.airDuct1.vol[14].dynBal.nPorts  +2*enthalpyExchanger.airDuct1.vol[15].dynBal.nPorts+max([size(bondaryEta.columns,   1); size(bondaryEta.offset, 1)])+max([size(bondaryOda.columns, 1); size(  bondaryOda.offset, 1)])+max([size(Results.columns, 1); size(Results.offset, 1)])  +2*fan.vol.dynBal.nPorts+2*fan1.vol.dynBal.nPorts
scalar unknowns and
  3433+17*enthalpyExchanger.airDuct2.heatTransfer.n+19*enthalpyExchanger.airDuct2.massTransfer.n  +3*(if enthalpyExchanger.couFloArr then 2*enthalpyExchanger.n else 0)+17*  enthalpyExchanger.airDuct1.heatTransfer.n+19*enthalpyExchanger.airDuct1.massTransfer.n  +7*enthalpyExchanger.membrane.heatTransfer.n+3*enthalpyExchanger.membrane.massTransfer.n  +2*(if enthalpyExchanger.useConPer then 1 else 0)+32*enthalpyExchanger.n+(if   souEta.use_Xi_in then 2 else (if souEta.use_X_in then 1 else 3))+3*  souEta.nPorts+(if  not souEta.use_p_in then 1 else 0)+(if  not souEta.use_T_in   then 1 else 0)+(if sinEha.use_Xi_in then 2 else (if sinEha.use_X_in then 1   else 3))+3*sinEha.nPorts+(if  not sinEha.use_p_in then 1 else 0)+(if  not   sinEha.use_T_in then 1 else 0)+(if souOda.use_Xi_in then 2 else (if   souOda.use_X_in then 1 else 3))+3*souOda.nPorts+(if  not souOda.use_p_in then 1   else 0)+(if  not souOda.use_T_in then 1 else 0)+(if sinSup.use_Xi_in then 2   else (if sinSup.use_X_in then 1 else 3))+3*sinSup.nPorts+(if  not   sinSup.use_p_in then 1 else 0)+(if  not sinSup.use_T_in then 1 else 0)+max([  size(bondaryEta.columns, 1); size(bondaryEta.offset, 1)])+max([size(  bondaryOda.columns, 1); size(bondaryOda.offset, 1)])+max([size(Results.columns,   1); size(Results.offset, 1)])+(if conPID.reset <> AixLib.Types.Reset.Input   then 1 else 0)+(if conPID1.reset <> AixLib.Types.Reset.Input then 1 else 0)+5  *enthalpyExchanger.airDuct2.vol[1].dynBal.nPorts+5*enthalpyExchanger.airDuct2.vol[2].dynBal.nPorts  +5*enthalpyExchanger.airDuct2.vol[3].dynBal.nPorts+5*enthalpyExchanger.airDuct2.vol[4].dynBal.nPorts  +5*enthalpyExchanger.airDuct2.vol[5].dynBal.nPorts+5*enthalpyExchanger.airDuct2.vol[6].dynBal.nPorts  +5*enthalpyExchanger.airDuct2.vol[7].dynBal.nPorts+5*enthalpyExchanger.airDuct2.vol[8].dynBal.nPorts  +5*enthalpyExchanger.airDuct2.vol[9].dynBal.nPorts+5*enthalpyExchanger.airDuct2.vol[10].dynBal.nPorts  +5*enthalpyExchanger.airDuct2.vol[11].dynBal.nPorts+5*enthalpyExchanger.airDuct2.vol[12].dynBal.nPorts  +5*enthalpyExchanger.airDuct2.vol[13].dynBal.nPorts+5*enthalpyExchanger.airDuct2.vol[14].dynBal.nPorts  +5*enthalpyExchanger.airDuct2.vol[15].dynBal.nPorts+5*enthalpyExchanger.airDuct1.vol[1].dynBal.nPorts  +5*enthalpyExchanger.airDuct1.vol[2].dynBal.nPorts+5*enthalpyExchanger.airDuct1.vol[3].dynBal.nPorts  +5*enthalpyExchanger.airDuct1.vol[4].dynBal.nPorts+5*enthalpyExchanger.airDuct1.vol[5].dynBal.nPorts  +5*enthalpyExchanger.airDuct1.vol[6].dynBal.nPorts+5*enthalpyExchanger.airDuct1.vol[7].dynBal.nPorts  +5*enthalpyExchanger.airDuct1.vol[8].dynBal.nPorts+5*enthalpyExchanger.airDuct1.vol[9].dynBal.nPorts  +5*enthalpyExchanger.airDuct1.vol[10].dynBal.nPorts+5*enthalpyExchanger.airDuct1.vol[11].dynBal.nPorts  +5*enthalpyExchanger.airDuct1.vol[12].dynBal.nPorts+5*enthalpyExchanger.airDuct1.vol[13].dynBal.nPorts  +5*enthalpyExchanger.airDuct1.vol[14].dynBal.nPorts+5*enthalpyExchanger.airDuct1.vol[15].dynBal.nPorts  +(if  not fan.vol.dynBal.use_mWat_flow then 1 else 0)+5*fan.vol.dynBal.nPorts+  (if (if conPID.reset == AixLib.Types.Reset.Disabled then conPID.reset else   AixLib.Types.Reset.Input) <> AixLib.Types.Reset.Input then 1 else 0)+(if (if   conPID.reset == AixLib.Types.Reset.Disabled then conPID.reset else   AixLib.Types.Reset.Input) == AixLib.Types.Reset.Disabled then 1 else 0)+(if    not fan1.vol.dynBal.use_mWat_flow then 1 else 0)+5*fan1.vol.dynBal.nPorts+(  if (if conPID1.reset == AixLib.Types.Reset.Disabled then conPID1.reset else   AixLib.Types.Reset.Input) <> AixLib.Types.Reset.Input then 1 else 0)+(if (if   conPID1.reset == AixLib.Types.Reset.Disabled then conPID1.reset else   AixLib.Types.Reset.Input) == AixLib.Types.Reset.Disabled then 1 else 0)
scalar equations.
However, exploiting the given numerical settings of parameters gives the same number of unknowns and equations:
  5508
Check of AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Validation.DynamicValidation successful.
Declaring variable: Boolean rCheck ;

Modelica.Utilities.Streams.print("    { \"file\" :  \"AixLib/Resources/Scripts/Dymola/Fluid/MassExchangers/MembraneBasedEnthalpyExchangers/Validation/DynamicValidation.mos\",", "AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Validation.DynamicValidation.statistics.log");
Modelica.Utilities.Streams.print("      \"model\" : \"AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Validation.DynamicValidation\",", "AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Validation.DynamicValidation.statistics.log");
Modelica.Utilities.Streams.print("      \"check\" : {", "AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Validation.DynamicValidation.statistics.log");
Modelica.Utilities.Streams.print("        \"command\" : \"checkModel(\\\"AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Validation.DynamicValidation\\\");\",", "AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Validation.DynamicValidation.statistics.log");
Modelica.Utilities.Streams.print("        \"result\"  : " + String(rCheck), "AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Validation.DynamicValidation.statistics.log");
Modelica.Utilities.Streams.print("      },", "AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Validation.DynamicValidation.statistics.log");


rScript=RunScript("modelica://AixLib/Resources/Scripts/Dymola/Fluid/MassExchangers/MembraneBasedEnthalpyExchangers/Validation/DynamicValidation.mos");
simulateModel("AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Validation.DynamicValidation", stopTime=7200, numberOfIntervals=0, outputInterval=2, method="dassl",tolerance=1E-6, resultFile="AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Validation.DynamicValidation");
Translation of AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Validation.DynamicValidation
The DAE has 5508 scalar unknowns and 5508 scalar equations.
Redundant consistent initial conditions.
Removed the following equations which are redundant and consistent: 
  fan1.vol.p_start = fan1.p_start;
  if (enthalpyExchanger.airDuct2.vol[1].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[1].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[1].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[1].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[1].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[1].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[1].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[2].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[2].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[2].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[2].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[2].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[2].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[2].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[3].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[3].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[3].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[3].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[3].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[3].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[3].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[4].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[4].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[4].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[4].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[4].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[4].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[4].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[5].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[5].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[5].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[5].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[5].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[5].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[5].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[6].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[6].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[6].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[6].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[6].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[6].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[6].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[7].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[7].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[7].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[7].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[7].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[7].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[7].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[8].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[8].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[8].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[8].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[8].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[8].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[8].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[9].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[9].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[9].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[9].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[9].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[9].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[9].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[10].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[10].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[10].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[10].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[10].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[10].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[10].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[11].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[11].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[11].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[11].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[11].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[11].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[11].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[12].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[12].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[12].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[12].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[12].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[12].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[12].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[13].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[13].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[13].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[13].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[13].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[13].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[13].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[14].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[14].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[14].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[14].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[14].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[14].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[14].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct2.vol[15].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct2.vol[15].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct2.vol[15].dynBal.medium.p = enthalpyExchanger.airDuct2.vol[15].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct2.vol[15].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct2.vol[15].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct2.vol[15].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[1].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[1].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[1].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[1].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[1].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[1].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[1].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[2].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[2].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[2].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[2].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[2].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[2].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[2].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[3].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[3].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[3].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[3].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[3].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[3].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[3].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[4].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[4].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[4].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[4].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[4].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[4].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[4].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[5].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[5].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[5].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[5].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[5].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[5].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[5].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[6].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[6].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[6].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[6].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[6].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[6].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[6].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[7].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[7].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[7].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[7].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[7].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[7].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[7].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[8].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[8].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[8].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[8].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[8].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[8].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[8].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[9].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[9].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[9].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[9].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[9].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[9].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[9].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[10].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[10].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[10].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[10].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[10].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[10].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[10].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[11].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[11].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[11].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[11].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[11].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[11].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[11].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[12].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[12].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[12].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[12].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[12].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[12].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[12].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[13].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[13].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[13].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[13].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[13].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[13].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[13].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[14].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[14].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[14].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[14].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[14].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[14].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[14].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (enthalpyExchanger.airDuct1.vol[15].dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.    FixedInitial) then 
    if (enthalpyExchanger.airDuct1.vol[15].dynBal.initialize_p) then 
      enthalpyExchanger.airDuct1.vol[15].dynBal.medium.p = enthalpyExchanger.airDuct1.vol[15].dynBal.p_start;
    end if;
  else
    if (enthalpyExchanger.airDuct1.vol[15].dynBal.massDynamics ==       Modelica.Fluid.Types.Dynamics.SteadyStateInitial) then 
      if (enthalpyExchanger.airDuct1.vol[15].dynBal.initialize_p) then 
        der(enthalpyExchanger.airDuct1.vol[15].dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
  if (fan.vol.dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.FixedInitial)     then 
    if (fan.vol.dynBal.initialize_p) then 
      fan.vol.dynBal.medium.p = fan.vol.dynBal.p_start;
    end if;
  else
    if (fan.vol.dynBal.massDynamics == Modelica.Fluid.Types.Dynamics.      SteadyStateInitial) then 
      if (fan.vol.dynBal.initialize_p) then 
        der(fan.vol.dynBal.medium.p) = 0;
      end if;
    end if;
  end if;
 
This required evaluation of 
the interactive parameters 
    fan.p_start(start = 101325)
    fan1.p_start(start = 101325)
    sinEha.p(start = 101325)
    sinSup.p(start = 101325)
    souEta.p(start = 101325)
    souOda.p(start = 101325)
 
The redundancies involve
initial equations: 
  enthalpyExchanger.airDuct2.vol[1].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[2].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[3].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[4].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[5].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[6].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[7].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[8].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[9].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[10].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[11].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[12].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[13].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[14].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct2.vol[15].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[1].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[2].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[3].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[4].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[5].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[6].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[7].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[8].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[9].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[10].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[11].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[12].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[13].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[14].dynBal.medium.p = 101325.0;
  enthalpyExchanger.airDuct1.vol[15].dynBal.medium.p = 101325.0;
  fan.vol.dynBal.medium.p = fan.vol.dynBal.p_start;
  fan1.vol.dynBal.medium.p = fan1.vol.dynBal.p_start;
 
 
Statistics
 
Original Model
  Number of components: 678
  Variables: 7276
  Constants: 166 (166 scalars)
  Parameters: 2802 (3263 scalars)
  Unknowns: 4308 (5676 scalars)
  Differentiated variables: 127 scalars
  Equations: 2961
  Nontrivial: 2303
Translated Model
  Constants: 2673 scalars
  Free parameters: 247 scalars
  Parameter depending: 1419 scalars
  Continuous time states: 95 scalars
  Time-varying variables: 1766 scalars
  Alias variables: 3000 scalars
  Number of mixed real/discrete systems of equations: 0
  Sizes of linear systems of equations: {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,   2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3}
  Sizes after manipulation of the linear systems: {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}
  Sizes of nonlinear systems of equations: {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1}
  Sizes after manipulation of the nonlinear systems: {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0}
  Number of numerical Jacobians: 0
 
Selected continuous time states
Statically selected continuous time states
conPID.I.y
conPID1.I.y
enthalpyExchanger.airDuct1.senRelHum.phi
enthalpyExchanger.airDuct1.senTem.T
enthalpyExchanger.airDuct1.vol[1].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[1].dynBal.U
enthalpyExchanger.airDuct1.vol[2].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[2].dynBal.U
enthalpyExchanger.airDuct1.vol[3].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[3].dynBal.U
enthalpyExchanger.airDuct1.vol[4].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[4].dynBal.U
enthalpyExchanger.airDuct1.vol[5].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[5].dynBal.U
enthalpyExchanger.airDuct1.vol[6].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[6].dynBal.U
enthalpyExchanger.airDuct1.vol[7].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[7].dynBal.U
enthalpyExchanger.airDuct1.vol[8].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[8].dynBal.U
enthalpyExchanger.airDuct1.vol[9].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[9].dynBal.U
enthalpyExchanger.airDuct1.vol[10].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[10].dynBal.U
enthalpyExchanger.airDuct1.vol[11].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[11].dynBal.U
enthalpyExchanger.airDuct1.vol[12].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[12].dynBal.U
enthalpyExchanger.airDuct1.vol[13].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[13].dynBal.U
enthalpyExchanger.airDuct1.vol[14].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[14].dynBal.U
enthalpyExchanger.airDuct1.vol[15].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct1.vol[15].dynBal.U
enthalpyExchanger.airDuct2.senRelHum.phi
enthalpyExchanger.airDuct2.senTem.T
enthalpyExchanger.airDuct2.vol[1].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[1].dynBal.U
enthalpyExchanger.airDuct2.vol[2].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[2].dynBal.U
enthalpyExchanger.airDuct2.vol[3].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[3].dynBal.U
enthalpyExchanger.airDuct2.vol[4].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[4].dynBal.U
enthalpyExchanger.airDuct2.vol[5].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[5].dynBal.U
enthalpyExchanger.airDuct2.vol[6].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[6].dynBal.U
enthalpyExchanger.airDuct2.vol[7].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[7].dynBal.U
enthalpyExchanger.airDuct2.vol[8].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[8].dynBal.U
enthalpyExchanger.airDuct2.vol[9].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[9].dynBal.U
enthalpyExchanger.airDuct2.vol[10].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[10].dynBal.U
enthalpyExchanger.airDuct2.vol[11].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[11].dynBal.U
enthalpyExchanger.airDuct2.vol[12].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[12].dynBal.U
enthalpyExchanger.airDuct2.vol[13].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[13].dynBal.U
enthalpyExchanger.airDuct2.vol[14].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[14].dynBal.U
enthalpyExchanger.airDuct2.vol[15].dynBal.medium.Xi[1]
enthalpyExchanger.airDuct2.vol[15].dynBal.U
enthalpyExchanger.membrane.heatTransfer.Ts[1]
enthalpyExchanger.membrane.heatTransfer.Ts[2]
enthalpyExchanger.membrane.heatTransfer.Ts[3]
enthalpyExchanger.membrane.heatTransfer.Ts[4]
enthalpyExchanger.membrane.heatTransfer.Ts[5]
enthalpyExchanger.membrane.heatTransfer.Ts[6]
enthalpyExchanger.membrane.heatTransfer.Ts[7]
enthalpyExchanger.membrane.heatTransfer.Ts[8]
enthalpyExchanger.membrane.heatTransfer.Ts[9]
enthalpyExchanger.membrane.heatTransfer.Ts[10]
enthalpyExchanger.membrane.heatTransfer.Ts[11]
enthalpyExchanger.membrane.heatTransfer.Ts[12]
enthalpyExchanger.membrane.heatTransfer.Ts[13]
enthalpyExchanger.membrane.heatTransfer.Ts[14]
enthalpyExchanger.membrane.heatTransfer.Ts[15]
fan.motSpe.y
fan.vol.dynBal.medium.Xi[1]
fan.vol.dynBal.U
fan1.motSpe.y
fan1.vol.dynBal.medium.Xi[1]
fan1.vol.dynBal.U
senMasFraEha.X
senMasFraEta.X
senMasFraOda.X
senMasFraSup.X
senTemEha.T
senTemEta.T
senTemOda.T
senTemSup.T
Finished
Finished
 = true

Declaring variable: Boolean rScript ;

savelog("AixLib.Fluid.MassExchangers.MembraneBasedEnthalpyExchangers.Validation.DynamicValidation.translation.log"); = true


rCheck = checkModel("AixLib.Fluid.SolarCollectors.PhotovoltaicThermal.Examples.PhotovoltaicThermal");
Check of AixLib.Fluid.SolarCollectors.PhotovoltaicThermal.Examples.PhotovoltaicThermal
The model has the same number of unknowns and equations: 670
The model could not be deduced to be symbolically well-posed.
The model has
  622+12*pvt.nSeg+pvt.vol[1].dynBal.nPorts+pvt.vol[2].dynBal.nPorts+  pvt.vol[3].dynBal.nPorts+pvt.multiSumLos.nu+pvt.multiSumGai.nu
scalar unknowns and
  602+(if sou.use_Xi_in then 1 else (if sou.use_X_in then 0 else 1))+(if  not   sou.use_m_flow_in then 1 else 0)+2*sou.nPorts+(if  not sou.use_T_in then 1   else 0)+(if sin.use_Xi_in then 1 else (if sin.use_X_in then 0 else 1))+(if    not sin.use_p_in then 1 else 0)+2*sin.nPorts+(if  not sin.use_T_in then 1   else 0)+(if weaDat.pAtmSou == AixLib.BoundaryConditions.Types.DataSource.  Parameter then 1 else 0)+(if weaDat.TDewPoiSou == AixLib.BoundaryConditions.Types.DataSource.  Parameter then 1 else 0)+(if weaDat.TDryBulSou == AixLib.BoundaryConditions.Types.DataSource.  Parameter then 1 else 0)+(if weaDat.TBlaSkySou == AixLib.BoundaryConditions.Types.DataSource.  Parameter then 1 else 0)+(if weaDat.relHumSou == AixLib.BoundaryConditions.Types.DataSource.  Parameter then 1 else 0)+(if weaDat.opaSkyCovSou == AixLib.BoundaryConditions.Types.DataSource.  Parameter then 1 else 0)+(if weaDat.ceiHeiSou == AixLib.BoundaryConditions.Types.DataSource.  Parameter then 1 else 0)+(if weaDat.totSkyCovSou == AixLib.BoundaryConditions.Types.DataSource.  Parameter then 1 else 0)+(if weaDat.winSpeSou == AixLib.BoundaryConditions.Types.DataSource.  Parameter then 1 else 0)+(if weaDat.winDirSou == AixLib.BoundaryConditions.Types.DataSource.  Parameter then 1 else 0)+(if weaDat.HInfHorSou == AixLib.BoundaryConditions.Types.DataSource.  Parameter then 1 else 0)+(if weaDat.HSou == AixLib.BoundaryConditions.Types.RadiationDataSource.  Input_HDirNor_HDifHor then 2 else 1)+(if weaDat.HSou == AixLib.BoundaryConditions.Types.RadiationDataSource.  Input_HDirNor_HGloHor then 2 else 1)+(if weaDat.HSou == AixLib.BoundaryConditions.Types.RadiationDataSource.  Input_HGloHor_HDifHor then 2 else 1)+3*(if  not pvt.use_shaCoe_in then 1 else 0)  +8*pvt.nSeg+(if  not pvt.vol[1].dynBal.use_mWat_flow then 1 else 0)+3*  pvt.vol[1].dynBal.nPorts+(if  not pvt.vol[2].dynBal.use_mWat_flow then 1 else 0)  +3*pvt.vol[2].dynBal.nPorts+(if  not pvt.vol[3].dynBal.use_mWat_flow then 1   else 0)+3*pvt.vol[3].dynBal.nPorts+pvt.multiSumGai.nu+pvt.multiSumLos.nu
scalar equations.
However, exploiting the given numerical settings of parameters gives the same number of unknowns and equations:
  670
Check of AixLib.Fluid.SolarCollectors.PhotovoltaicThermal.Examples.PhotovoltaicThermal successful.
Declaring variable: Boolean rCheck ;

Modelica.Utilities.Streams.print("    { \"file\" :  \"AixLib/Resources/Scripts/Dymola/Fluid/SolarCollectors/PhotovoltaicThermal/Examples/PhotovoltaicThermal.mos\",", "AixLib.Fluid.SolarCollectors.PhotovoltaicThermal.Examples.PhotovoltaicThermal.statistics.log");
Modelica.Utilities.Streams.print("      \"model\" : \"AixLib.Fluid.SolarCollectors.PhotovoltaicThermal.Examples.PhotovoltaicThermal\",", "AixLib.Fluid.SolarCollectors.PhotovoltaicThermal.Examples.PhotovoltaicThermal.statistics.log");
Modelica.Utilities.Streams.print("      \"check\" : {", "AixLib.Fluid.SolarCollectors.PhotovoltaicThermal.Examples.PhotovoltaicThermal.statistics.log");
Modelica.Utilities.Streams.print("        \"command\" : \"checkModel(\\\"AixLib.Fluid.SolarCollectors.PhotovoltaicThermal.Examples.PhotovoltaicThermal\\\");\",", "AixLib.Fluid.SolarCollectors.PhotovoltaicThermal.Examples.PhotovoltaicThermal.statistics.log");
Modelica.Utilities.Streams.print("        \"result\"  : " + String(rCheck), "AixLib.Fluid.SolarCollectors.PhotovoltaicThermal.Examples.PhotovoltaicThermal.statistics.log");
Modelica.Utilities.Streams.print("      },", "AixLib.Fluid.SolarCollectors.PhotovoltaicThermal.Examples.PhotovoltaicThermal.statistics.log");


rScript=RunScript("modelica://AixLib/Resources/Scripts/Dymola/Fluid/SolarCollectors/PhotovoltaicThermal/Examples/PhotovoltaicThermal.mos");
simulateModel("AixLib.Fluid.SolarCollectors.PhotovoltaicThermal.Examples.PhotovoltaicThermal", tolerance=1e-6, startTime=10368000, stopTime=10540800, method="CVode", resultFile="AixLib.Fluid.SolarCollectors.PhotovoltaicThermal.Examples.PhotovoltaicThermal");
Translation of AixLib.Fluid.SolarCollectors.PhotovoltaicThermal.Examples.PhotovoltaicThermal
The DAE has 670 scalar unknowns and 670 scalar equations.
 
Statistics
 
Original Model
  Number of components: 124
  Variables: 1246
  Constants: 44 (44 scalars)
  Parameters: 483 (584 scalars)
  Unknowns: 719 (678 scalars)
  Differentiated variables: 6 scalars
  Equations: 598
  Nontrivial: 510
Translated Model
  Constants: 382 scalars
  Free parameters: 99 scalars
  Parameter depending: 217 scalars
  Continuous time states: 3 scalars
  Time-varying variables: 190 scalars
  Alias variables: 418 scalars
  Number of mixed real/discrete systems of equations: 0
  Sizes of linear systems of equations: { }
  Sizes after manipulation of the linear systems: { }
  Sizes of nonlinear systems of equations: { }
  Sizes after manipulation of the nonlinear systems: { }
  Number of numerical Jacobians: 0
 
Selected continuous time states
Statically selected continuous time states
pvt.vol[1].dynBal.U
pvt.vol[2].dynBal.U
pvt.vol[3].dynBal.U
Finished
Finished
 = true

Declaring variable: Boolean rScript ;

savelog("AixLib.Fluid.SolarCollectors.PhotovoltaicThermal.Examples.PhotovoltaicThermal.translation.log"); = true


rCheck = checkModel("AixLib.Fluid.Pools.Examples.IndoorSwimmingPoolExternalHeatingSystem");
Check of AixLib.Fluid.Pools.Examples.IndoorSwimmingPoolExternalHeatingSystem
The model has the same number of unknowns and equations: 730
The model has the same number of unknowns and equations
for the given numerical settings of parameters: 730
Check of AixLib.Fluid.Pools.Examples.IndoorSwimmingPoolExternalHeatingSystem successful.
Declaring variable: Boolean rCheck ;

Modelica.Utilities.Streams.print("    { \"file\" :  \"AixLib/Resources/Scripts/Dymola/Fluid/Pools/Examples/IndoorSwimmingPoolExternalHeatingSystem.mos\",", "AixLib.Fluid.Pools.Examples.IndoorSwimmingPoolExternalHeatingSystem.statistics.log");
Modelica.Utilities.Streams.print("      \"model\" : \"AixLib.Fluid.Pools.Examples.IndoorSwimmingPoolExternalHeatingSystem\",", "AixLib.Fluid.Pools.Examples.IndoorSwimmingPoolExternalHeatingSystem.statistics.log");
Modelica.Utilities.Streams.print("      \"check\" : {", "AixLib.Fluid.Pools.Examples.IndoorSwimmingPoolExternalHeatingSystem.statistics.log");
Modelica.Utilities.Streams.print("        \"command\" : \"checkModel(\\\"AixLib.Fluid.Pools.Examples.IndoorSwimmingPoolExternalHeatingSystem\\\");\",", "AixLib.Fluid.Pools.Examples.IndoorSwimmingPoolExternalHeatingSystem.statistics.log");
Modelica.Utilities.Streams.print("        \"result\"  : " + String(rCheck), "AixLib.Fluid.Pools.Examples.IndoorSwimmingPoolExternalHeatingSystem.statistics.log");
Modelica.Utilities.Streams.print("      },", "AixLib.Fluid.Pools.Examples.IndoorSwimmingPoolExternalHeatingSystem.statistics.log");


rScript=RunScript("modelica://AixLib/Resources/Scripts/Dymola/Fluid/Pools/Examples/IndoorSwimmingPoolExternalHeatingSystem.mos");
simulateModel("AixLib.Fluid.Pools.Examples.IndoorSwimmingPoolExternalHeatingSystem", tolerance=1e-6, stopTime=604800, numberOfIntervals=0, outputInterval=900, method="CVode", resultFile="AixLib.Fluid.Pools.Examples.IndoorSwimmingPoolExternalHeatingSystem");
Translation of AixLib.Fluid.Pools.Examples.IndoorSwimmingPoolExternalHeatingSystem
The DAE has 730 scalar unknowns and 730 scalar equations.
 
Statistics
 
Original Model
  Number of components: 171
  Variables: 1739
  Constants: 44 (44 scalars)
  Parameters: 776 (962 scalars)
  Unknowns: 919 (761 scalars)
  Differentiated variables: 2 scalars
  Equations: 763
  Nontrivial: 619
Translated Model
  Constants: 588 scalars
  Free parameters: 132 scalars
  Parameter depending: 413 scalars
  Continuous time states: 2 scalars
  Time-varying variables: 188 scalars
  Alias variables: 446 scalars
  Number of mixed real/discrete systems of equations: 1
  Sizes of linear systems of equations: {26}
  Sizes after manipulation of the linear systems: {13}
  Sizes of nonlinear systems of equations: {79, 1, 1}
  Sizes after manipulation of the nonlinear systems: {17, 0, 1}
  Number of numerical Jacobians: 0
  Initialization problem
    Sizes of nonlinear systems of equations: {1, 78, 1}
    Sizes after manipulation of the nonlinear systems: {1, 17, 1}
    Number of numerical Jacobians: 0
 
Selected continuous time states
Statically selected continuous time states
indoorSwimming.cirPump.motSpe.y
PI.I.y
Finished
Finished
 = true

Declaring variable: Boolean rScript ;

savelog("AixLib.Fluid.Pools.Examples.IndoorSwimmingPoolExternalHeatingSystem.translation.log"); = true


rCheck = checkModel("AixLib.Fluid.Storage.Examples.StorageBoiler");
Check of AixLib.Fluid.Storage.Examples.StorageBoiler
The model has the same number of unknowns and equations: 3238
Check of AixLib.Fluid.Storage.Examples.StorageBoiler successful.
Declaring variable: Boolean rCheck ;

Modelica.Utilities.Streams.print("    { \"file\" :  \"AixLib/Resources/Scripts/Dymola/Fluid/Storage/Examples/StorageBoiler.mos\",", "AixLib.Fluid.Storage.Examples.StorageBoiler.statistics.log");
Modelica.Utilities.Streams.print("      \"model\" : \"AixLib.Fluid.Storage.Examples.StorageBoiler\",", "AixLib.Fluid.Storage.Examples.StorageBoiler.statistics.log");
Modelica.Utilities.Streams.print("      \"check\" : {", "AixLib.Fluid.Storage.Examples.StorageBoiler.statistics.log");
Modelica.Utilities.Streams.print("        \"command\" : \"checkModel(\\\"AixLib.Fluid.Storage.Examples.StorageBoiler\\\");\",", "AixLib.Fluid.Storage.Examples.StorageBoiler.statistics.log");
Modelica.Utilities.Streams.print("        \"result\"  : " + String(rCheck), "AixLib.Fluid.Storage.Examples.StorageBoiler.statistics.log");
Modelica.Utilities.Streams.print("      },", "AixLib.Fluid.Storage.Examples.StorageBoiler.statistics.log");


rScript=RunScript("modelica://AixLib/Resources/Scripts/Dymola/Fluid/Storage/Examples/StorageBoiler.mos");
simulateModel("AixLib.Fluid.Storage.Examples.StorageBoiler", tolerance=1e-6, stopTime=86400, method="dassl", resultFile="AixLib.Fluid.Storage.Examples.StorageBoiler");
Translation of AixLib.Fluid.Storage.Examples.StorageBoiler
The DAE has 3238 scalar unknowns and 3238 scalar equations.
 
Statistics
 
Original Model
  Number of components: 651
  Variables: 8644
  Constants: 158 (158 scalars)
  Parameters: 4111 (4113 scalars)
  Unknowns: 4375 (3341 scalars)
  Differentiated variables: 105 scalars
  Equations: 3312
  Nontrivial: 2543
Translated Model
  Constants: 2869 scalars
  Free parameters: 285 scalars
  Parameter depending: 1523 scalars
  Continuous time states: 75 scalars
  Time-varying variables: 840 scalars
  Alias variables: 2095 scalars
  Number of mixed real/discrete systems of equations: 0
  Sizes of linear systems of equations: {4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 3, 3,   2, 2, 2, 2, 2, 2, 2, 2, 2}
  Sizes after manipulation of the linear systems: {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0}
  Sizes of nonlinear systems of equations: {22, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1}
  Sizes after manipulation of the nonlinear systems: {1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
  Number of numerical Jacobians: 0
  Initialization problem
    Sizes of nonlinear systems of equations: {22, 1, 1}
    Sizes after manipulation of the nonlinear systems: {1, 0, 1}
    Sizes of simplified homotopy nonlinear systems of equations: {22, 1}
    Sizes after manipulation of the simplified homotopy nonlinear systems: {1, 0}
    Number of numerical Jacobians: 0
 
Selected continuous time states
Statically selected continuous time states
bufferStorage.bottomCover.loadIns.T
bufferStorage.bottomCover.loadWall.T
bufferStorage.heatingCoil1.pipe[1].del.x
bufferStorage.heatingCoil1.pipe[1].timDel.x
bufferStorage.heatingCoil1.pipe[1].vol_a.dynBal.U
bufferStorage.heatingCoil1.pipe[1].vol_b.dynBal.U
bufferStorage.heatingCoil1.pipe[2].del.x
bufferStorage.heatingCoil1.pipe[2].timDel.x
bufferStorage.heatingCoil1.pipe[2].vol_a.dynBal.U
bufferStorage.heatingCoil1.pipe[2].vol_b.dynBal.U
bufferStorage.heatingCoil1.pipe[3].del.x
bufferStorage.heatingCoil1.pipe[3].timDel.x
bufferStorage.heatingCoil1.pipe[3].vol_a.dynBal.U
bufferStorage.heatingCoil1.pipe[3].vol_b.dynBal.U
bufferStorage.heatingCoil1.pipe[4].del.x
bufferStorage.heatingCoil1.pipe[4].timDel.x
bufferStorage.heatingCoil1.pipe[4].vol_a.dynBal.U
bufferStorage.heatingCoil1.pipe[4].vol_b.dynBal.U
bufferStorage.heatingCoil1.pipe[5].del.x
bufferStorage.heatingCoil1.pipe[5].timDel.x
bufferStorage.heatingCoil1.pipe[5].vol_a.dynBal.U
bufferStorage.heatingCoil1.pipe[5].vol_b.dynBal.U
bufferStorage.heatingCoil1.pipe[6].del.x
bufferStorage.heatingCoil1.pipe[6].timDel.x
bufferStorage.heatingCoil1.pipe[6].vol_a.dynBal.U
bufferStorage.heatingCoil1.pipe[6].vol_b.dynBal.U
bufferStorage.heatingCoil1.pipe[7].del.x
bufferStorage.heatingCoil1.pipe[7].timDel.x
bufferStorage.heatingCoil1.pipe[7].vol_a.dynBal.U
bufferStorage.heatingCoil1.pipe[7].vol_b.dynBal.U
bufferStorage.heatingCoil1.pipe[8].del.x
bufferStorage.heatingCoil1.pipe[8].timDel.x
bufferStorage.heatingCoil1.pipe[8].vol_a.dynBal.U
bufferStorage.heatingCoil1.pipe[8].vol_b.dynBal.U
bufferStorage.heatingCoil1.pipe[9].del.x
bufferStorage.heatingCoil1.pipe[9].timDel.x
bufferStorage.heatingCoil1.pipe[9].vol_a.dynBal.U
bufferStorage.heatingCoil1.pipe[9].vol_b.dynBal.U
bufferStorage.heatingCoil1.pipe[10].del.x
bufferStorage.heatingCoil1.pipe[10].timDel.x
bufferStorage.heatingCoil1.pipe[10].vol_a.dynBal.U
bufferStorage.heatingCoil1.pipe[10].vol_b.dynBal.U
bufferStorage.layer[1].dynBal.U
bufferStorage.layer[2].dynBal.U
bufferStorage.layer[3].dynBal.U
bufferStorage.layer[4].dynBal.U
bufferStorage.layer[5].dynBal.U
bufferStorage.layer[6].dynBal.U
bufferStorage.layer[7].dynBal.U
bufferStorage.layer[8].dynBal.U
bufferStorage.layer[9].dynBal.U
bufferStorage.layer[10].dynBal.U
bufferStorage.storageMantle[1].Insulation.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[1].Wall.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[2].Insulation.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[2].Wall.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[3].Insulation.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[3].Wall.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[4].Insulation.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[4].Wall.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[5].Insulation.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[5].Wall.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[6].Insulation.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[6].Wall.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[7].Insulation.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[7].Wall.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[8].Insulation.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[8].Wall.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[9].Insulation.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[9].Wall.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[10].Insulation.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[10].Wall.CylindricLoad1.heatCapacitor.T
bufferStorage.topCover.loadIns.T
bufferStorage.topCover.loadWall.T
pump.motSpe.y
Finished
Finished
 = true

Declaring variable: Boolean rScript ;

savelog("AixLib.Fluid.Storage.Examples.StorageBoiler.translation.log"); = true


rCheck = checkModel("AixLib.Fluid.FixedResistances.Examples.SimplePipe");
Check of AixLib.Fluid.FixedResistances.Examples.SimplePipe
The model has the same number of unknowns and equations: 368
The model could not be deduced to be symbolically well-posed.
The model has
  360+simplePipe.vol[1].dynBal.nPorts+simplePipe.vol[2].dynBal.nPorts+  simplePipe.vol[3].dynBal.nPorts+simplePipe.vol[4].dynBal.nPorts
scalar unknowns and
  334+2*Source.nPorts+(if  not Source.use_m_flow_in then 1 else 0)+(if  not   Source.use_T_in then 1 else 0)+(if  not Source.use_X_in then 1 else 0)+2*  Sink.nPorts+(if  not simplePipe.vol[1].dynBal.use_mWat_flow then 1 else 0)+3*  simplePipe.vol[1].dynBal.nPorts+(if  not simplePipe.vol[2].dynBal.use_mWat_flow   then 1 else 0)+3*simplePipe.vol[2].dynBal.nPorts+(if  not simplePipe.vol[3].dynBal.use_mWat_flow   then 1 else 0)+3*simplePipe.vol[3].dynBal.nPorts+(if  not simplePipe.vol[4].dynBal.use_mWat_flow   then 1 else 0)+3*simplePipe.vol[4].dynBal.nPorts
scalar equations.
However, exploiting the given numerical settings of parameters gives the same number of unknowns and equations:
  368
Check of AixLib.Fluid.FixedResistances.Examples.SimplePipe successful.
Declaring variable: Boolean rCheck ;

Modelica.Utilities.Streams.print("    { \"file\" :  \"AixLib/Resources/Scripts/Dymola/Fluid/FixedResistances/Examples/SimplePipe.mos\",", "AixLib.Fluid.FixedResistances.Examples.SimplePipe.statistics.log");
Modelica.Utilities.Streams.print("      \"model\" : \"AixLib.Fluid.FixedResistances.Examples.SimplePipe\",", "AixLib.Fluid.FixedResistances.Examples.SimplePipe.statistics.log");
Modelica.Utilities.Streams.print("      \"check\" : {", "AixLib.Fluid.FixedResistances.Examples.SimplePipe.statistics.log");
Modelica.Utilities.Streams.print("        \"command\" : \"checkModel(\\\"AixLib.Fluid.FixedResistances.Examples.SimplePipe\\\");\",", "AixLib.Fluid.FixedResistances.Examples.SimplePipe.statistics.log");
Modelica.Utilities.Streams.print("        \"result\"  : " + String(rCheck), "AixLib.Fluid.FixedResistances.Examples.SimplePipe.statistics.log");
Modelica.Utilities.Streams.print("      },", "AixLib.Fluid.FixedResistances.Examples.SimplePipe.statistics.log");


rScript=RunScript("modelica://AixLib/Resources/Scripts/Dymola/Fluid/FixedResistances/Examples/SimplePipe.mos");
translateModel("AixLib.Fluid.FixedResistances.Examples.SimplePipe");
Translation of AixLib.Fluid.FixedResistances.Examples.SimplePipe
The DAE has 368 scalar unknowns and 368 scalar equations.
 
Statistics
 
Original Model
  Number of components: 80
  Variables: 965
  Constants: 18 (18 scalars)
  Parameters: 452 (430 scalars)
  Unknowns: 495 (378 scalars)
  Differentiated variables: 14 scalars
  Equations: 363
  Nontrivial: 270
Translated Model
  Constants: 343 scalars
  Free parameters: 44 scalars
  Parameter depending: 126 scalars
  Continuous time states: 10 scalars
  Time-varying variables: 71 scalars
  Alias variables: 242 scalars
  Number of mixed real/discrete systems of equations: 0
  Sizes of linear systems of equations: { }
  Sizes after manipulation of the linear systems: { }
  Sizes of nonlinear systems of equations: { }
  Sizes after manipulation of the nonlinear systems: { }
  Number of numerical Jacobians: 0
 
Selected continuous time states
Statically selected continuous time states
senTemIn.T
senTemOut.T
simplePipe.PipeWall[1].CylindricLoad1.heatCapacitor.T
simplePipe.PipeWall[2].CylindricLoad1.heatCapacitor.T
simplePipe.PipeWall[3].CylindricLoad1.heatCapacitor.T
simplePipe.PipeWall[4].CylindricLoad1.heatCapacitor.T
simplePipe.vol[1].dynBal.U
simplePipe.vol[2].dynBal.U
simplePipe.vol[3].dynBal.U
simplePipe.vol[4].dynBal.U
Finished
 = true
simulateModel("AixLib.Fluid.FixedResistances.Examples.SimplePipe", stopTime=1000, method="dassl", tolerance=1e-006, resultFile="AixLib.Fluid.FixedResistances.Examples.SimplePipe");
Finished
 = true

Declaring variable: Boolean rScript ;

savelog("AixLib.Fluid.FixedResistances.Examples.SimplePipe.translation.log"); = true


rCheck = checkModel("AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDp");
Check of AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDp
The model has the same number of unknowns and equations: 522
The model could not be deduced to be symbolically well-posed.
The model has
  514+pipeSupply.vol_b.dynBal.nPorts+pipeSupply.vol_a.dynBal.nPorts+  pipeReturn.vol_b.dynBal.nPorts+pipeReturn.vol_a.dynBal.nPorts
scalar unknowns and
  479+(if sourceIdeal.source.use_Xi_in then 1 else (if sourceIdeal.source.use_X_in   then 0 else 1))+(if  not sourceIdeal.source.use_p_in then 1 else 0)+2*  sourceIdeal.source.nPorts+(if  not sourceIdeal.source.use_T_in then 1 else 0)+  (if sourceIdeal.sink.use_Xi_in then 1 else (if sourceIdeal.sink.use_X_in then 0   else 1))+(if  not sourceIdeal.sink.use_p_in then 1 else 0)+2*sourceIdeal.sink.nPorts  +(if  not sourceIdeal.sink.use_T_in then 1 else 0)+(if demand.sink.use_Xi_in   then 1 else (if demand.sink.use_X_in then 0 else 1))+(if  not   demand.sink.use_m_flow_in then 1 else 0)+2*demand.sink.nPorts+(if  not   demand.sink.use_T_in then 1 else 0)+(if demand.source.use_Xi_in then 1 else (  if demand.source.use_X_in then 0 else 1))+(if  not demand.source.use_m_flow_in   then 1 else 0)+2*demand.source.nPorts+(if  not demand.source.use_T_in then 1   else 0)+(if  not pipeSupply.vol_b.dynBal.use_mWat_flow then 1 else 0)+3*  pipeSupply.vol_b.dynBal.nPorts+(if  not pipeSupply.vol_a.dynBal.use_mWat_flow   then 1 else 0)+3*pipeSupply.vol_a.dynBal.nPorts+(if  not pipeReturn.vol_b.dynBal.use_mWat_flow   then 1 else 0)+3*pipeReturn.vol_b.dynBal.nPorts+(if  not pipeReturn.vol_a.dynBal.use_mWat_flow   then 1 else 0)+3*pipeReturn.vol_a.dynBal.nPorts
scalar equations.
However, exploiting the given numerical settings of parameters gives the same number of unknowns and equations:
  522
Check of AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDp successful.
Declaring variable: Boolean rCheck ;

Modelica.Utilities.Streams.print("    { \"file\" :  \"AixLib/Resources/Scripts/Dymola/Fluid/DistrictHeatingCooling/Demands/Examples/OpenLoopVarTSupplyDp.mos\",", "AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDp.statistics.log");
Modelica.Utilities.Streams.print("      \"model\" : \"AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDp\",", "AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDp.statistics.log");
Modelica.Utilities.Streams.print("      \"check\" : {", "AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDp.statistics.log");
Modelica.Utilities.Streams.print("        \"command\" : \"checkModel(\\\"AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDp\\\");\",", "AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDp.statistics.log");
Modelica.Utilities.Streams.print("        \"result\"  : " + String(rCheck), "AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDp.statistics.log");
Modelica.Utilities.Streams.print("      },", "AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDp.statistics.log");


rScript=RunScript("modelica://AixLib/Resources/Scripts/Dymola/Fluid/DistrictHeatingCooling/Demands/Examples/OpenLoopVarTSupplyDp.mos");
translateModel("AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDp");
Translation of AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDp
The DAE has 522 scalar unknowns and 522 scalar equations.
 
Statistics
 
Original Model
  Number of components: 105
  Variables: 1380
  Constants: 25 (25 scalars)
  Parameters: 629 (605 scalars)
  Unknowns: 726 (538 scalars)
  Differentiated variables: 15 scalars
  Equations: 623
  Nontrivial: 504
Translated Model
  Constants: 461 scalars
  Free parameters: 119 scalars
  Parameter depending: 129 scalars
  Continuous time states: 11 scalars
  Time-varying variables: 123 scalars
  Alias variables: 336 scalars
  Number of mixed real/discrete systems of equations: 0
  Sizes of linear systems of equations: { }
  Sizes after manipulation of the linear systems: { }
  Sizes of nonlinear systems of equations: {8}
  Sizes after manipulation of the nonlinear systems: {1}
  Number of numerical Jacobians: 0
  Initialization problem
    Sizes of nonlinear systems of equations: {8}
    Sizes after manipulation of the nonlinear systems: {1}
    Number of numerical Jacobians: 0
 
Selected continuous time states
Statically selected continuous time states
demand.senT_return.T
demand.senT_supply.T
pControl.I.y
pipeReturn.del.x
pipeReturn.timDel.x
pipeReturn.vol_a.dynBal.U
pipeReturn.vol_b.dynBal.U
pipeSupply.del.x
pipeSupply.timDel.x
pipeSupply.vol_a.dynBal.U
pipeSupply.vol_b.dynBal.U
Finished
 = true
simulateModel("AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDp", stopTime=100000, method="dassl", tolerance=1e-006, resultFile="AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDp");
Finished
Finished
 = true

Declaring variable: Boolean rScript ;

savelog("AixLib.Fluid.DistrictHeatingCooling.Demands.Examples.OpenLoopVarTSupplyDp.translation.log"); = true


rCheck = checkModel("AixLib.Fluid.Storage.Examples.StorageSolarCollector");
Check of AixLib.Fluid.Storage.Examples.StorageSolarCollector
The model has the same number of unknowns and equations: 3381
Check of AixLib.Fluid.Storage.Examples.StorageSolarCollector successful.
Declaring variable: Boolean rCheck ;

Modelica.Utilities.Streams.print("    { \"file\" :  \"AixLib/Resources/Scripts/Dymola/Fluid/Storage/Examples/StorageSolarCollector.mos\",", "AixLib.Fluid.Storage.Examples.StorageSolarCollector.statistics.log");
Modelica.Utilities.Streams.print("      \"model\" : \"AixLib.Fluid.Storage.Examples.StorageSolarCollector\",", "AixLib.Fluid.Storage.Examples.StorageSolarCollector.statistics.log");
Modelica.Utilities.Streams.print("      \"check\" : {", "AixLib.Fluid.Storage.Examples.StorageSolarCollector.statistics.log");
Modelica.Utilities.Streams.print("        \"command\" : \"checkModel(\\\"AixLib.Fluid.Storage.Examples.StorageSolarCollector\\\");\",", "AixLib.Fluid.Storage.Examples.StorageSolarCollector.statistics.log");
Modelica.Utilities.Streams.print("        \"result\"  : " + String(rCheck), "AixLib.Fluid.Storage.Examples.StorageSolarCollector.statistics.log");
Modelica.Utilities.Streams.print("      },", "AixLib.Fluid.Storage.Examples.StorageSolarCollector.statistics.log");


rScript=RunScript("modelica://AixLib/Resources/Scripts/Dymola/Fluid/Storage/Examples/StorageSolarCollector.mos");
simulateModel("AixLib.Fluid.Storage.Examples.StorageSolarCollector", tolerance=1e-6, stopTime=172800, method="dassl", resultFile="AixLib.Fluid.Storage.Examples.StorageSolarCollector");
Translation of AixLib.Fluid.Storage.Examples.StorageSolarCollector
The DAE has 3381 scalar unknowns and 3381 scalar equations.
 
Statistics
 
Original Model
  Number of components: 688
  Variables: 9007
  Constants: 160 (160 scalars)
  Parameters: 4293 (4364 scalars)
  Unknowns: 4554 (3486 scalars)
  Differentiated variables: 112 scalars
  Equations: 3530
  Nontrivial: 2706
Translated Model
  Constants: 2940 scalars
  Free parameters: 413 scalars
  Parameter depending: 1577 scalars
  Continuous time states: 81 scalars
  Time-varying variables: 864 scalars
  Alias variables: 2216 scalars
  Number of mixed real/discrete systems of equations: 0
  Sizes of linear systems of equations: {4, 3, 3, 2, 2, 2, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,   2, 2, 2, 2, 2, 2, 2, 2, 2}
  Sizes after manipulation of the linear systems: {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0}
  Sizes of nonlinear systems of equations: {24, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}
  Sizes after manipulation of the nonlinear systems: {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
  Number of numerical Jacobians: 0
  Initialization problem
    Sizes of nonlinear systems of equations: {24, 1, 1}
    Sizes after manipulation of the nonlinear systems: {1, 0, 1}
    Sizes of simplified homotopy nonlinear systems of equations: {24, 1}
    Sizes after manipulation of the simplified homotopy nonlinear systems: {1, 0}
    Number of numerical Jacobians: 0
 
Selected continuous time states
Statically selected continuous time states
bufferStorage.bottomCover.loadIns.T
bufferStorage.bottomCover.loadWall.T
bufferStorage.heatingCoil1.pipe[1].del.x
bufferStorage.heatingCoil1.pipe[1].timDel.x
bufferStorage.heatingCoil1.pipe[1].vol_a.dynBal.U
bufferStorage.heatingCoil1.pipe[1].vol_b.dynBal.U
bufferStorage.heatingCoil1.pipe[2].del.x
bufferStorage.heatingCoil1.pipe[2].timDel.x
bufferStorage.heatingCoil1.pipe[2].vol_a.dynBal.U
bufferStorage.heatingCoil1.pipe[2].vol_b.dynBal.U
bufferStorage.heatingCoil1.pipe[3].del.x
bufferStorage.heatingCoil1.pipe[3].timDel.x
bufferStorage.heatingCoil1.pipe[3].vol_a.dynBal.U
bufferStorage.heatingCoil1.pipe[3].vol_b.dynBal.U
bufferStorage.heatingCoil1.pipe[4].del.x
bufferStorage.heatingCoil1.pipe[4].timDel.x
bufferStorage.heatingCoil1.pipe[4].vol_a.dynBal.U
bufferStorage.heatingCoil1.pipe[4].vol_b.dynBal.U
bufferStorage.heatingCoil1.pipe[5].del.x
bufferStorage.heatingCoil1.pipe[5].timDel.x
bufferStorage.heatingCoil1.pipe[5].vol_a.dynBal.U
bufferStorage.heatingCoil1.pipe[5].vol_b.dynBal.U
bufferStorage.heatingCoil1.pipe[6].del.x
bufferStorage.heatingCoil1.pipe[6].timDel.x
bufferStorage.heatingCoil1.pipe[6].vol_a.dynBal.U
bufferStorage.heatingCoil1.pipe[6].vol_b.dynBal.U
bufferStorage.heatingCoil1.pipe[7].del.x
bufferStorage.heatingCoil1.pipe[7].timDel.x
bufferStorage.heatingCoil1.pipe[7].vol_a.dynBal.U
bufferStorage.heatingCoil1.pipe[7].vol_b.dynBal.U
bufferStorage.heatingCoil1.pipe[8].del.x
bufferStorage.heatingCoil1.pipe[8].timDel.x
bufferStorage.heatingCoil1.pipe[8].vol_a.dynBal.U
bufferStorage.heatingCoil1.pipe[8].vol_b.dynBal.U
bufferStorage.heatingCoil1.pipe[9].del.x
bufferStorage.heatingCoil1.pipe[9].timDel.x
bufferStorage.heatingCoil1.pipe[9].vol_a.dynBal.U
bufferStorage.heatingCoil1.pipe[9].vol_b.dynBal.U
bufferStorage.heatingCoil1.pipe[10].del.x
bufferStorage.heatingCoil1.pipe[10].timDel.x
bufferStorage.heatingCoil1.pipe[10].vol_a.dynBal.U
bufferStorage.heatingCoil1.pipe[10].vol_b.dynBal.U
bufferStorage.layer[1].dynBal.U
bufferStorage.layer[2].dynBal.U
bufferStorage.layer[3].dynBal.U
bufferStorage.layer[4].dynBal.U
bufferStorage.layer[5].dynBal.U
bufferStorage.layer[6].dynBal.U
bufferStorage.layer[7].dynBal.U
bufferStorage.layer[8].dynBal.U
bufferStorage.layer[9].dynBal.U
bufferStorage.layer[10].dynBal.U
bufferStorage.storageMantle[1].Insulation.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[1].Wall.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[2].Insulation.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[2].Wall.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[3].Insulation.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[3].Wall.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[4].Insulation.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[4].Wall.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[5].Insulation.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[5].Wall.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[6].Insulation.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[6].Wall.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[7].Insulation.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[7].Wall.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[8].Insulation.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[8].Wall.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[9].Insulation.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[9].Wall.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[10].Insulation.CylindricLoad1.heatCapacitor.T
bufferStorage.storageMantle[10].Wall.CylindricLoad1.heatCapacitor.T
bufferStorage.topCover.loadIns.T
bufferStorage.topCover.loadWall.T
PI.I.y
pump.motSpe.y
solarThermal.senTCold.T
solarThermal.senTHot.T
solarThermal.vol.dynBal.U
temperatureSensor.T
valve.actPos.y
Finished
Finished
 = true

Declaring variable: Boolean rScript ;

savelog("AixLib.Fluid.Storage.Examples.StorageSolarCollector.translation.log"); = true


rCheck = checkModel("AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.StaticPipe");
Check of AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.StaticPipe
Warning: Local "m_flow_small" conflict with inherited. Should be identical
Warning: Component m_flow_small(min = << Empty >>),
  but previously m_flow_small(min = 0).
  The components are not identical.
 
  For element m_flow_small found at
 
  File: /tmp/tmp-AixLib-3-amq64bos/AixLib/Fluid/DistrictHeatingCooling/Pipes/StaticPipe.mo, line 36
  Conflict with element from
  File: /tmp/tmp-AixLib-3-amq64bos/AixLib/Fluid/Interfaces/PartialTwoPortInterface.mo, line 10
 Component context: pip
  Component declared as StaticPipe pip in AixLib.Fluid.DistrictHeatingCooling.Pipes
  File: /tmp/tmp-AixLib-3-amq64bos/AixLib/Fluid/DistrictHeatingCooling/Pipes/Examples/StaticPipe.mo, line 18
The model has the same number of unknowns and equations: 175
The model could not be deduced to be symbolically well-posed.
The model has
  173+pip.vol.dynBal.nPorts
scalar unknowns and
  159+(if sin.use_Xi_in then 1 else (if sin.use_X_in then 0 else 1))+(if  not   sin.use_p_in then 1 else 0)+2*sin.nPorts+(if  not sin.use_T_in then 1 else 0)+  (if sou.use_Xi_in then 1 else (if sou.use_X_in then 0 else 1))+(if  not   sou.use_m_flow_in then 1 else 0)+2*sou.nPorts+(if  not sou.use_T_in then 1   else 0)+(if  not pip.vol.dynBal.use_mWat_flow then 1 else 0)+3*  pip.vol.dynBal.nPorts
scalar equations.
However, exploiting the given numerical settings of parameters gives the same number of unknowns and equations:
  175
Check of AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.StaticPipe successful.
Declaring variable: Boolean rCheck ;

Modelica.Utilities.Streams.print("    { \"file\" :  \"AixLib/Resources/Scripts/Dymola/Fluid/DistrictHeatingCooling/Pipes/Examples/StaticPipe.mos\",", "AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.StaticPipe.statistics.log");
Modelica.Utilities.Streams.print("      \"model\" : \"AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.StaticPipe\",", "AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.StaticPipe.statistics.log");
Modelica.Utilities.Streams.print("      \"check\" : {", "AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.StaticPipe.statistics.log");
Modelica.Utilities.Streams.print("        \"command\" : \"checkModel(\\\"AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.StaticPipe\\\");\",", "AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.StaticPipe.statistics.log");
Modelica.Utilities.Streams.print("        \"result\"  : " + String(rCheck), "AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.StaticPipe.statistics.log");
Modelica.Utilities.Streams.print("      },", "AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.StaticPipe.statistics.log");


rScript=RunScript("modelica://AixLib/Resources/Scripts/Dymola/Fluid/DistrictHeatingCooling/Pipes/Examples/StaticPipe.mos");
translateModel("AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.StaticPipe");
Translation of AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.StaticPipe
Warning: Local "m_flow_small" conflict with inherited. Should be identical
Warning: Component m_flow_small(min = << Empty >>),
  but previously m_flow_small(min = 0).
  The components are not identical.
 
  For element m_flow_small found at
 
  File: /tmp/tmp-AixLib-3-amq64bos/AixLib/Fluid/DistrictHeatingCooling/Pipes/StaticPipe.mo, line 36
  Conflict with element from
  File: /tmp/tmp-AixLib-3-amq64bos/AixLib/Fluid/Interfaces/PartialTwoPortInterface.mo, line 10
 Component context: pip
  Component declared as StaticPipe pip in AixLib.Fluid.DistrictHeatingCooling.Pipes
  File: /tmp/tmp-AixLib-3-amq64bos/AixLib/Fluid/DistrictHeatingCooling/Pipes/Examples/StaticPipe.mo, line 18
The DAE has 175 scalar unknowns and 175 scalar equations.
 
Statistics
 
Original Model
  Number of components: 33
  Variables: 508
  Constants: 10 (10 scalars)
  Parameters: 253 (246 scalars)
  Unknowns: 245 (181 scalars)
  Differentiated variables: 4 scalars
  Equations: 205
  Nontrivial: 171
Translated Model
  Constants: 187 scalars
  Free parameters: 45 scalars
  Parameter depending: 61 scalars
  Continuous time states: 3 scalars
  Time-varying variables: 31 scalars
  Alias variables: 113 scalars
  Number of mixed real/discrete systems of equations: 0
  Sizes of linear systems of equations: { }
  Sizes after manipulation of the linear systems: { }
  Sizes of nonlinear systems of equations: { }
  Sizes after manipulation of the nonlinear systems: { }
  Number of numerical Jacobians: 0
 
Selected continuous time states
Statically selected continuous time states
pip.vol.dynBal.U
senTemIn.T
senTemOut.T
Finished
Warning: WARNINGS have been issued.
 = true
simulateModel("AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.StaticPipe", stopTime=1000, method="dassl", tolerance=1e-006, resultFile="AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.StaticPipe");
Finished
 = true

Declaring variable: Boolean rScript ;

savelog("AixLib.Fluid.DistrictHeatingCooling.Pipes.Examples.StaticPipe.translation.log"); = true


rCheck = checkModel("AixLib.Fluid.HeatExchangers.Examples.HeatingRod");
Check of AixLib.Fluid.HeatExchangers.Examples.HeatingRod
The model has the same number of unknowns and equations: 324
The model could not be deduced to be symbolically well-posed.
The model has
  319+vol.dynBal.nPorts+heatingRod.vol.dynBal.nPorts
scalar unknowns and
  298+(if conPI.reset <> AixLib.Types.Reset.Input then 1 else 0)+(if bou.use_Xi_in   then 1 else (if bou.use_X_in then 0 else 1))+(if  not bou.use_p_in then 1   else 0)+2*bou.nPorts+(if  not bou.use_T_in then 1 else 0)+(if  not   vol.dynBal.use_mWat_flow then 1 else 0)+3*vol.dynBal.nPorts+(if  not   mov.vol.steBal.use_mWat_flow then 1 else 0)+(if (if conPI.reset ==   AixLib.Types.Reset.Disabled then conPI.reset else AixLib.Types.Reset.Input)   <> AixLib.Types.Reset.Input then 1 else 0)+(if (if conPI.reset ==   AixLib.Types.Reset.Disabled then conPI.reset else AixLib.Types.Reset.Input)   == AixLib.Types.Reset.Disabled then 1 else 0)+(if  not heatingRod.vol.dynBal.use_mWat_flow   then 1 else 0)+3*heatingRod.vol.dynBal.nPorts
scalar equations.
However, exploiting the given numerical settings of parameters gives the same number of unknowns and equations:
  324
Check of AixLib.Fluid.HeatExchangers.Examples.HeatingRod successful.
Declaring variable: Boolean rCheck ;

Modelica.Utilities.Streams.print("    { \"file\" :  \"AixLib/Resources/Scripts/Dymola/Fluid/HeatExchangers/Examples/HeatingRod.mos\",", "AixLib.Fluid.HeatExchangers.Examples.HeatingRod.statistics.log");
Modelica.Utilities.Streams.print("      \"model\" : \"AixLib.Fluid.HeatExchangers.Examples.HeatingRod\",", "AixLib.Fluid.HeatExchangers.Examples.HeatingRod.statistics.log");
Modelica.Utilities.Streams.print("      \"check\" : {", "AixLib.Fluid.HeatExchangers.Examples.HeatingRod.statistics.log");
Modelica.Utilities.Streams.print("        \"command\" : \"checkModel(\\\"AixLib.Fluid.HeatExchangers.Examples.HeatingRod\\\");\",", "AixLib.Fluid.HeatExchangers.Examples.HeatingRod.statistics.log");
Modelica.Utilities.Streams.print("        \"result\"  : " + String(rCheck), "AixLib.Fluid.HeatExchangers.Examples.HeatingRod.statistics.log");
Modelica.Utilities.Streams.print("      },", "AixLib.Fluid.HeatExchangers.Examples.HeatingRod.statistics.log");


rScript=RunScript("modelica://AixLib/Resources/Scripts/Dymola/Fluid/HeatExchangers/Examples/HeatingRod.mos");
simulateModel("AixLib.Fluid.HeatExchangers.Examples.HeatingRod", stopTime=172800, method="Radau", tolerance=1e-6, resultFile="AixLib.Fluid.HeatExchangers.Examples.HeatingRod");
Translation of AixLib.Fluid.HeatExchangers.Examples.HeatingRod
The DAE has 324 scalar unknowns and 324 scalar equations.
 
Statistics
 
Original Model
  Number of components: 93
  Variables: 923
  Constants: 20 (20 scalars)
  Parameters: 470 (575 scalars)
  Unknowns: 433 (339 scalars)
  Differentiated variables: 7 scalars
  Equations: 376
  Nontrivial: 305
Translated Model
  Constants: 395 scalars
  Free parameters: 64 scalars
  Parameter depending: 209 scalars
  Outputs: 2 scalars
  Continuous time states: 5 scalars
  Time-varying variables: 76 scalars
  Alias variables: 190 scalars
  Number of mixed real/discrete systems of equations: 0
  Sizes of linear systems of equations: {2}
  Sizes after manipulation of the linear systems: {0}
  Sizes of nonlinear systems of equations: { }
  Sizes after manipulation of the nonlinear systems: { }
  Number of numerical Jacobians: 0
 
Selected continuous time states
Statically selected continuous time states
conPI.I.y
heatingRod.vol.dynBal.U
mov.motSpe.y
THeaOut.T
vol.dynBal.U
Finished
Finished
 = true

Declaring variable: Boolean rScript ;

savelog("AixLib.Fluid.HeatExchangers.Examples.HeatingRod.translation.log"); = true


rCheck = checkModel("AixLib.Fluid.Movers.DpControlledMovers.Examples.DpConst");
Check of AixLib.Fluid.Movers.DpControlledMovers.Examples.DpConst
The model has the same number of unknowns and equations: 244
The model could not be deduced to be symbolically well-posed.
The model has
  242+vol.dynBal.nPorts
scalar unknowns and
  231+(if sou.use_Xi_in then 1 else (if sou.use_X_in then 0 else 1))+(if  not   sou.use_p_in then 1 else 0)+2*sou.nPorts+(if  not sou.use_T_in then 1 else 0)+  (if  not dpControlled_dp.mov.vol.steBal.use_mWat_flow then 1 else 0)+(if  not   vol.dynBal.use_mWat_flow then 1 else 0)+3*vol.dynBal.nPorts
scalar equations.
However, exploiting the given numerical settings of parameters gives the same number of unknowns and equations:
  244
Check of AixLib.Fluid.Movers.DpControlledMovers.Examples.DpConst successful.
Declaring variable: Boolean rCheck ;

Modelica.Utilities.Streams.print("    { \"file\" :  \"AixLib/Resources/Scripts/Dymola/Fluid/Movers/DpControlledMovers/Examples/DpConst.mos\",", "AixLib.Fluid.Movers.DpControlledMovers.Examples.DpConst.statistics.log");
Modelica.Utilities.Streams.print("      \"model\" : \"AixLib.Fluid.Movers.DpControlledMovers.Examples.DpConst\",", "AixLib.Fluid.Movers.DpControlledMovers.Examples.DpConst.statistics.log");
Modelica.Utilities.Streams.print("      \"check\" : {", "AixLib.Fluid.Movers.DpControlledMovers.Examples.DpConst.statistics.log");
Modelica.Utilities.Streams.print("        \"command\" : \"checkModel(\\\"AixLib.Fluid.Movers.DpControlledMovers.Examples.DpConst\\\");\",", "AixLib.Fluid.Movers.DpControlledMovers.Examples.DpConst.statistics.log");
Modelica.Utilities.Streams.print("        \"result\"  : " + String(rCheck), "AixLib.Fluid.Movers.DpControlledMovers.Examples.DpConst.statistics.log");
Modelica.Utilities.Streams.print("      },", "AixLib.Fluid.Movers.DpControlledMovers.Examples.DpConst.statistics.log");


rScript=RunScript("modelica://AixLib/Resources/Scripts/Dymola/Fluid/Movers/DpControlledMovers/Examples/DpConst.mos");
simulateModel("AixLib.Fluid.Movers.DpControlledMovers.Examples.DpConst", startTime=0, stopTime=3600, tolerance=1e-6, method="dassl", resultFile="AixLib.Fluid.Movers.DpControlledMovers.Examples.DpConst");
Translation of AixLib.Fluid.Movers.DpControlledMovers.Examples.DpConst
The DAE has 244 scalar unknowns and 244 scalar equations.
 
Statistics
 
Original Model
  Number of components: 82
  Variables: 802
  Constants: 16 (16 scalars)
  Parameters: 458 (940 scalars)
  Unknowns: 328 (259 scalars)
  Differentiated variables: 5 scalars
  Equations: 280
  Nontrivial: 232
Translated Model
  Constants: 679 scalars
  Free parameters: 47 scalars
  Parameter depending: 270 scalars
  Outputs: 1 scalars
  Continuous time states: 3 scalars
  Time-varying variables: 55 scalars
  Alias variables: 164 scalars
  Number of mixed real/discrete systems of equations: 0
  Sizes of linear systems of equations: { }
  Sizes after manipulation of the linear systems: { }
  Sizes of nonlinear systems of equations: {3, 1}
  Sizes after manipulation of the nonlinear systems: {1, 1}
  Number of numerical Jacobians: 0
  Initialization problem
    Sizes of nonlinear systems of equations: {3, 1, 1}
    Sizes after manipulation of the nonlinear systems: {1, 0, 1}
    Sizes of simplified homotopy nonlinear systems of equations: {3, 1}
    Sizes after manipulation of the simplified homotopy nonlinear systems: {1, 0}
    Number of numerical Jacobians: 0
 
Selected continuous time states
Statically selected continuous time states
dpControlled_dp.mov.motSpe.y
integrator.y
val.actPos.y
Finished
Finished
 = true



Declaring variable: Boolean rScript ;

savelog("AixLib.Fluid.Movers.DpControlledMovers.Examples.DpConst.translation.log"); = true


rCheck = checkModel("AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpSpeedControlledDpV");
Warning: Can not resolve link "Zugabe.Zugabe_DB.Pump.Examples" in AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpSpeedControlledDpV
Check of AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpSpeedControlledDpV
The model has the same number of unknowns and equations: 217
The model could not be deduced to be symbolically well-posed.
The model has
  205+2*(size(pump.maxMinTable.columns, 1)+pump.deMultiplex2.n1+pump.deMultiplex2.n2)  +pump.criticalDamping.n+pump.vol.dynBal.nPorts
scalar unknowns and
  195+2*size(pump.maxMinTable.columns, 1)+pump.deMultiplex2.n1+pump.deMultiplex2.n2  +pump.criticalDamping.n+(if vessle.use_Xi_in then 1 else (if vessle.use_X_in   then 0 else 1))+(if  not vessle.use_p_in then 1 else 0)+2*vessle.nPorts+(if    not vessle.use_T_in then 1 else 0)+(if  not pump.vol.dynBal.use_mWat_flow   then 1 else 0)+3*pump.vol.dynBal.nPorts
scalar equations.
However, exploiting the given numerical settings of parameters gives the same number of unknowns and equations:
  217
Check of AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpSpeedControlledDpV successful.
Declaring variable: Boolean rCheck ;

Modelica.Utilities.Streams.print("    { \"file\" :  \"AixLib/Resources/Scripts/Dymola/Fluid/Movers/PumpsPolynomialBased/Examples/PumpSpeedControlledDpV.mos\",", "AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpSpeedControlledDpV.statistics.log");
Modelica.Utilities.Streams.print("      \"model\" : \"AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpSpeedControlledDpV\",", "AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpSpeedControlledDpV.statistics.log");
Modelica.Utilities.Streams.print("      \"check\" : {", "AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpSpeedControlledDpV.statistics.log");
Modelica.Utilities.Streams.print("        \"command\" : \"checkModel(\\\"AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpSpeedControlledDpV\\\");\",", "AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpSpeedControlledDpV.statistics.log");
Modelica.Utilities.Streams.print("        \"result\"  : " + String(rCheck), "AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpSpeedControlledDpV.statistics.log");
Modelica.Utilities.Streams.print("      },", "AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpSpeedControlledDpV.statistics.log");


rScript=RunScript("modelica://AixLib/Resources/Scripts/Dymola/Fluid/Movers/PumpsPolynomialBased/Examples/PumpSpeedControlledDpV.mos");
simulateModel("AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpSpeedControlledDpV", tolerance=1e-6, stopTime=600.0, method="dassl", resultFile="AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpSpeedControlledDpV");
Translation of AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpSpeedControlledDpV
The DAE has 217 scalar unknowns and 217 scalar equations.
 
Statistics
 
Original Model
  Number of components: 58
  Variables: 519
  Constants: 14 (14 scalars)
  Parameters: 238 (581 scalars)
  Unknowns: 267 (221 scalars)
  Differentiated variables: 7 scalars
  Equations: 226
  Nontrivial: 193
Translated Model
  Constants: 147 scalars
  Free parameters: 362 scalars
  Parameter depending: 114 scalars
  Outputs: 4 scalars
  Continuous time states: 5 scalars
  Time-varying variables: 47 scalars
  Alias variables: 146 scalars
  Number of mixed real/discrete systems of equations: 0
  Sizes of linear systems of equations: { }
  Sizes after manipulation of the linear systems: { }
  Sizes of nonlinear systems of equations: {1}
  Sizes after manipulation of the nonlinear systems: {0}
  Number of numerical Jacobians: 0
  Initialization problem
    Sizes of nonlinear systems of equations: {1}
    Sizes after manipulation of the nonlinear systems: {1}
    Number of numerical Jacobians: 0
 
Selected continuous time states
Statically selected continuous time states
ctrlDpVarN.PID.D.x
ctrlDpVarN.PID.I.y
pump.criticalDamping.x[1]
pump.criticalDamping.x[2]
simpleValve.actPos.y
Finished
Finished
 = true

Declaring variable: Boolean rScript ;

savelog("AixLib.Fluid.Movers.PumpsPolynomialBased.Examples.PumpSpeedControlledDpV.translation.log");