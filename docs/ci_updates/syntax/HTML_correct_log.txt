
---- AixLib/Fluid/Geothermal/Borefields/BaseClasses/HeatTransfer/ThermalResponseFactors/finiteLineSource_Erfint.mo ----
-------- HTML Code --------

 <p>
 This function evaluates the integral of the error function, given by:
 </p>
 <p align=\"center\">
 <img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/ErrorFunctionIntegral_01.png\" />
 </p>
 
 <ul>
 <li>
 March 22, 2018 by Massimo Cimmino:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This function evaluates the integral of the error function, given by:
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/ErrorFunctionIntegral_01.png\">
</p>
<ul>
  <li>March 22, 2018 by Massimo Cimmino:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 5 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/BoundaryConditions/Validation/BESTEST/WD500.mo ----
-------- HTML Code --------

 <ul>
 <li>
 September 6, 2021, by Ettore Zanetti:<br/>
 Removed parameter <code>lat</code> as it is now obtained from the weather data bus.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1477\">IBPSA, #1477</a>.
 </li>
 <li>
 March 11, 2020, by Ettore Zanetti:<br/>
 First implementation.
 </li>
 <li>
 April 14, 2020, by Ettore Zanetti:<br/>
 Rework after comments from pull request
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/pull/1339\">#1339</a>.
 </li>
 <li>
 May 2, 2021, by Ettore Zanetti:<br/>
 Updated weather file as explained in <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1478\">#1478</a>.
 </li>
 </ul>
 
 <h4>WD500: Time Zone Case</h4>
 <p>Weather data file : WD500.epw</p>
 <p><i>Table 1: Site Data for Weather file WD500epw</i></p>
 <table summary=\"Site Data for Weather file WD500epw\" cellspacing=\"2\" cellpadding=\"0\" border=\"1\"><tr>
 <td><p>Latitude</p></td>
 <td><p>28.567&deg; north</p></td>
 </tr>
 <tr>
 <td><p>Longitude</p></td>
 <td><p>77.103&deg; east</p></td>
 </tr>
 <tr>
 <td><p>Altitude</p></td>
 <td><p>236.9 m</p></td>
 </tr>
 <tr>
 <td><p>Time Zone</p></td>
 <td><p>5.5</p></td>
 </tr>
 </table>
 
-------- Corrected Code --------
<ul>
  <li>September 6, 2021, by Ettore Zanetti:<br/>
    Removed parameter <code>lat</code> as it is now obtained from the
    weather data bus.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1477\">IBPSA,
    #1477</a>.
  </li>
  <li>March 11, 2020, by Ettore Zanetti:<br/>
    First implementation.
  </li>
  <li>April 14, 2020, by Ettore Zanetti:<br/>
    Rework after comments from pull request <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/pull/1339\">#1339</a>.
  </li>
  <li>May 2, 2021, by Ettore Zanetti:<br/>
    Updated weather file as explained in <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1478\">#1478</a>.
  </li>
</ul>
<h4>
  WD500: Time Zone Case
</h4>
<p>
  Weather data file : WD500.epw
</p>
<p>
  <i>Table 1: Site Data for Weather file WD500epw</i>
</p>
<table summary=\"Site Data for Weather file WD500epw\" cellspacing=\"2\"
cellpadding=\"0\" border=\"1\">
  <tr>
    <td>
      <p>
        Latitude
      </p>
    </td>
    <td>
      <p>
        28.567° north
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        Longitude
      </p>
    </td>
    <td>
      <p>
        77.103° east
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        Altitude
      </p>
    </td>
    <td>
      <p>
        236.9 m
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        Time Zone
      </p>
    </td>
    <td>
      <p>
        5.5
      </p>
    </td>
  </tr>
</table>

-------- Errors --------
line 5 column 2 - Warning: The summary attribute on the <table> element is obsolete in HTML5


---- AixLib/BoundaryConditions/UsersGuide.mo ----
-------- HTML Code --------

<p>This package contains models to read or compute boundary conditions, such as weather data, solar irradition and sky temperatures.
The calculations follow the description in Wetter (2004), Appendix A.4.2.</p>
<h4>Accessing weather data</h4>
<p>
The model
<a href=\"modelica://AixLib.BoundaryConditions.WeatherData.ReaderTMY3\">
AixLib.BoundaryConditions.WeatherData.ReaderTMY3</a>
can read TMY3 weather data for different locations.
The documentation of that model explains how to add
weather data for locations that are not distributed with the
<code>AixLib</code> library.
</p>
<p>
To access these weather data from the graphical model editor,
proceed as follows:
</p>
<ol>
<li>
<p>
Create an instance of
<a href=\"modelica://AixLib.BoundaryConditions.WeatherData.ReaderTMY3\">
AixLib.BoundaryConditions.WeatherData.ReaderTMY3</a>.
</p>
</li>
<li>
<p>
Create an instance of
<a href=\"modelica://AixLib.BoundaryConditions.WeatherData.Bus\">
AixLib.BoundaryConditions.WeatherData.Bus</a>.
</p>
</li>
<li>
<p>
Draw a connection between these two instances.
</p>
</li>
<li>
<p>
Finally, to send weather data to an input connector of a model,
connect the input connector of that model with the instance of
<a href=\"modelica://AixLib.BoundaryConditions.WeatherData.Bus\">
AixLib.BoundaryConditions.WeatherData.Bus</a>.
Some models connect to the whole weather data bus, such as
<a href=\"modelica://AixLib.BoundaryConditions.SolarGeometry.Examples.IncidenceAngle\">
AixLib.BoundaryConditions.SolarGeometry.Examples.IncidenceAngle</a>,
in which case the connection will directly be drawn.
Other models require only an individual signal from the weather data bus,
such as
<a href=\"modelica://AixLib.BoundaryConditions.SkyTemperature.Examples.BlackBody\">
AixLib.BoundaryConditions.SkyTemperature.Examples.BlackBody</a>.
In this situation, Modelica modeling environments typically show a window that allows you to
select what data from this weather data bus you want to connect
with your model.
</p>
</li>
</ol>
<h4>Conventions for surface azimuth and tilt</h4>
<p>To compute the solar irradiation, parameters such as the surface azimuth and the surface tilt are defined as shown in the following three figures. </p>
<p align=\"center\"><img alt=\"image\" src=\"modelica://AixLib/Resources/Images/BoundaryConditions/ear_ray.png\"/> </p>
<p align=\"center\"><img alt=\"image\" src=\"modelica://AixLib/Resources/Images/BoundaryConditions/zen_sun.png\"/> </p>
<p align=\"center\"><img alt=\"image\" src=\"modelica://AixLib/Resources/Images/BoundaryConditions/zen_pla.png\"/> </p>
<p>
For the surface azimuth and tilt, the enumerations
<a href=\"modelica://AixLib.Types.Azimuth\">
AixLib.Types.Azimuth</a>
and
<a href=\"modelica://AixLib.Types.Tilt\">
AixLib.Types.Tilt</a>
can be used.
</p>
<p>
Note that a ceiling has a tilt of <i>0</i>
<!-- @include_Buildings
, and also the solar collector models
in
<a href=\"AixLib.Fluid.SolarCollectors\">AixLib.Fluid.SolarCollectors</a>
require a tilt of <i>0</i>
-->
if they are facing straight upwards.
This is correct because
the solar irradiation on a ceiling construction is on the other-side surface,
which faces upwards toward the sky. Hence, a construction is considered
a ceiling from the view point of a person standing inside a room.
</p>

<h4>References</h4>
<ul>
<li>
Michael Wetter.<br/>
<a href=\"http://simulationresearch.lbl.gov/wetter/download/mwdiss.pdf\">
Simulation-based Building Energy Optimization</a>.<br/>
Dissertation. University of California at Berkeley. 2004.
</li>
</ul>

-------- Corrected Code --------
<p>
  This package contains models to read or compute boundary conditions,
  such as weather data, solar irradition and sky temperatures. The
  calculations follow the description in Wetter (2004), Appendix A.4.2.
</p>
<h4>
  Accessing weather data
</h4>
<p>
  The model <a href=
  \"modelica://AixLib.BoundaryConditions.WeatherData.ReaderTMY3\">AixLib.BoundaryConditions.WeatherData.ReaderTMY3</a>
  can read TMY3 weather data for different locations. The documentation
  of that model explains how to add weather data for locations that are
  not distributed with the <code>AixLib</code> library.
</p>
<p>
  To access these weather data from the graphical model editor, proceed
  as follows:
</p>
<ol>
  <li>
    <p>
      Create an instance of <a href=
      \"modelica://AixLib.BoundaryConditions.WeatherData.ReaderTMY3\">AixLib.BoundaryConditions.WeatherData.ReaderTMY3</a>.
    </p>
  </li>
  <li>
    <p>
      Create an instance of <a href=
      \"modelica://AixLib.BoundaryConditions.WeatherData.Bus\">AixLib.BoundaryConditions.WeatherData.Bus</a>.
    </p>
  </li>
  <li>
    <p>
      Draw a connection between these two instances.
    </p>
  </li>
  <li>
    <p>
      Finally, to send weather data to an input connector of a model,
      connect the input connector of that model with the instance of
      <a href=
      \"modelica://AixLib.BoundaryConditions.WeatherData.Bus\">AixLib.BoundaryConditions.WeatherData.Bus</a>.
      Some models connect to the whole weather data bus, such as
      <a href=
      \"modelica://AixLib.BoundaryConditions.SolarGeometry.Examples.IncidenceAngle\">
      AixLib.BoundaryConditions.SolarGeometry.Examples.IncidenceAngle</a>,
      in which case the connection will directly be drawn. Other models
      require only an individual signal from the weather data bus, such
      as <a href=
      \"modelica://AixLib.BoundaryConditions.SkyTemperature.Examples.BlackBody\">
      AixLib.BoundaryConditions.SkyTemperature.Examples.BlackBody</a>.
      In this situation, Modelica modeling environments typically show
      a window that allows you to select what data from this weather
      data bus you want to connect with your model.
    </p>
  </li>
</ol>
<h4>
  Conventions for surface azimuth and tilt
</h4>
<p>
  To compute the solar irradiation, parameters such as the surface
  azimuth and the surface tilt are defined as shown in the following
  three figures.
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/BoundaryConditions/ear_ray.png\">
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/BoundaryConditions/zen_sun.png\">
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/BoundaryConditions/zen_pla.png\">
</p>
<p>
  For the surface azimuth and tilt, the enumerations <a href=
  \"modelica://AixLib.Types.Azimuth\">AixLib.Types.Azimuth</a> and
  <a href=\"modelica://AixLib.Types.Tilt\">AixLib.Types.Tilt</a> can be
  used.
</p>
<p>
  Note that a ceiling has a tilt of <i>0</i> <!-- @include_Buildings
, and also the solar collector models
in
<a href=\"AixLib.Fluid.SolarCollectors\">AixLib.Fluid.SolarCollectors</a>
require a tilt of <i>0</i>
-->
  if they are facing straight upwards. This is correct because the
  solar irradiation on a ceiling construction is on the other-side
  surface, which faces upwards toward the sky. Hence, a construction is
  considered a ceiling from the view point of a person standing inside
  a room.
</p>
<h4>
  References
</h4>
<ul>
  <li>Michael Wetter.<br/>
    <a href=
    \"http://simulationresearch.lbl.gov/wetter/download/mwdiss.pdf\">Simulation-based
    Building Energy Optimization</a>.<br/>
    Dissertation. University of California at Berkeley. 2004.
  </li>
</ul>

-------- Errors --------
line 60 column 1 - Warning: <p> attribute "align" not allowed for HTML5
line 61 column 1 - Warning: <p> attribute "align" not allowed for HTML5
line 62 column 1 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Geothermal/Borefields/BaseClasses/HeatTransfer/ThermalResponseFactors/finiteLineSource.mo ----
-------- HTML Code --------

 <p>
 This function evaluates the finite line source solution. This solution
 gives the relation between the constant heat transfer rate (per unit length)
 injected by a line source of finite length <i>H<sub>1</sub></i> buried at a
 distance <i>D<sub>1</sub></i> from a constant temperature surface
 (<i>T=0</i>) and the average temperature raise over a line of finite length
 <i>H<sub>2</sub></i> buried at a distance <i>D<sub>2</sub></i> from the constant
 temperature surface.
 The finite line source solution is defined by:
 </p>
 <p align=\"center\">
 <img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/FiniteLineSource_01.png\" />
 </p>
 <p>
 where <i>&Delta;T<sub>1-2</sub>(t,r,H<sub>1</sub>,D<sub>1</sub>,H<sub>2</sub>,D<sub>2</sub>)</i>
 is the temperature raise after a time <i>t</i> of constant heat injection and at
 a distance <i>r</i> from the line heat source, <i>Q'</i> is the heat injection
 rate per unit length, <i>k<sub>s</sub></i> is the soil thermal conductivity and
 <i>h<sub>FLS</sub></i> is the finite line source solution.
 </p>
 <p>
 The finite line source solution is given by:
 </p>
 <p align=\"center\">
 <img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/FiniteLineSource_02.png\" />
 </p>
 <p>
 where <i>&alpha;<sub>s</sub></i> is the ground thermal diffusivity and
 <i>erfint</i> is the integral of the error function, defined in
 <a href=\"modelica://AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.ThermalResponseFactors.finiteLineSource_Erfint\">AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.ThermalResponseFactors.finiteLineSource_erfint</a>.
 The integral is solved numerically, with the integrand defined in
 <a href=\"modelica://AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.ThermalResponseFactors.finiteLineSource_Integrand\">AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.ThermalResponseFactors.finiteLineSource_Integrand</a>.
 </p>
 
 <ul>
 <li>
 March 17, 2019, by Massimo Cimmino:<br/>
 Modified the upper bound of integration to avoid underestimating the value of
 the integral.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1107\">IBPSA, issue 1107</a>.
 </li>
 <li>
 March 22, 2018 by Massimo Cimmino:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This function evaluates the finite line source solution. This
  solution gives the relation between the constant heat transfer rate
  (per unit length) injected by a line source of finite length
  <i>H<sub>1</sub></i> buried at a distance <i>D<sub>1</sub></i> from a
  constant temperature surface (<i>T=0</i>) and the average temperature
  raise over a line of finite length <i>H<sub>2</sub></i> buried at a
  distance <i>D<sub>2</sub></i> from the constant temperature surface.
  The finite line source solution is defined by:
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/FiniteLineSource_01.png\">
</p>
<p>
  where
  <i>ΔT<sub>1-2</sub>(t,r,H<sub>1</sub>,D<sub>1</sub>,H<sub>2</sub>,D<sub>2</sub>)</i>
  is the temperature raise after a time <i>t</i> of constant heat
  injection and at a distance <i>r</i> from the line heat source,
  <i>Q'</i> is the heat injection rate per unit length,
  <i>k<sub>s</sub></i> is the soil thermal conductivity and
  <i>h<sub>FLS</sub></i> is the finite line source solution.
</p>
<p>
  The finite line source solution is given by:
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/FiniteLineSource_02.png\">
</p>
<p>
  where <i>α<sub>s</sub></i> is the ground thermal diffusivity and
  <i>erfint</i> is the integral of the error function, defined in
  <a href=
  \"modelica://AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.ThermalResponseFactors.finiteLineSource_Erfint\">
  AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.ThermalResponseFactors.finiteLineSource_erfint</a>.
  The integral is solved numerically, with the integrand defined in
  <a href=
  \"modelica://AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.ThermalResponseFactors.finiteLineSource_Integrand\">
  AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.ThermalResponseFactors.finiteLineSource_Integrand</a>.
</p>
<ul>
  <li>March 17, 2019, by Massimo Cimmino:<br/>
    Modified the upper bound of integration to avoid underestimating
    the value of the integral. This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1107\">IBPSA, issue
    1107</a>.
  </li>
  <li>March 22, 2018 by Massimo Cimmino:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 12 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 25 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Media/Specialized/Air/PerfectGas.mo ----
-------- HTML Code --------

 Function to set the state for given pressure, enthalpy and species concentration.
 
   The thermodynamic state record
   is computed from density d, temperature T and composition X.
 
 Saturation pressure of water above the triple point temperature is computed from temperature. It's range of validity is between
 273.16 and 373.16 K. Outside these limits a less accurate result is returned.
 
 Derivative function of
 <a href=\"modelica://AixLib.Media.Specialized.Air.PerfectGas.saturationPressureLiquid\">
 AixLib.Media.Specialized.Air.PerfectGas.saturationPressureLiquid</a>
 
 Pressure is returned from the thermodynamic state record input as a simple assignment.
 
 Temperature is returned from the thermodynamic state record input as a simple assignment.
 
 Density is computed from pressure, temperature and composition in the thermodynamic state record applying the ideal gas law.
 
 Specific entropy is calculated from the thermodynamic state record, assuming ideal gas behavior and including entropy of mixing. Liquid or solid water is not taken into account, the entire water content X[1] is assumed to be in the vapor state (relative humidity below 1.0).
 
 Temperature as a function of specific enthalpy and species concentration.
 The pressure is input for compatibility with the medium models, but the temperature
 is independent of the pressure.
 
 <p>
 This data record contains the coefficients for perfect gases.
 </p>
 
 <ul>
 <li>
 June 6, 2015, by Michael Wetter:<br/>
 Set <code>AbsolutePressure(start=p_default)</code>
 and <code>Temperature(start=T_default)</code>
 to have to have conistent start values.
 See also revision notes of
 <a href=\"modelica://AixLib.Media.Water\">
 AixLib.Media.Water</a>.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/266\">#266</a>.
 </li>
 <li>
 May 1, 2015, by Michael Wetter:<br/>
 Added <code>Inline=true</code> for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/227\">
 issue 227</a>.
 </li>
 <li>
 September 12, 2014, by Michael Wetter:<br/>
 Corrected the wrong location of the <code>preferredView</code>
 and the <code>revisions</code> annotation.
 </li>
 <li>
 November 21, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This package contains a <i>thermally perfect</i> model of moist air.
 </p>
 <p>
 A medium is called thermally perfect if
 </p>
 <ul>
 <li>
 it is in thermodynamic equilibrium,
 </li><li>
 it is chemically not reacting, and
 </li><li>
 internal energy and enthalpy are functions of temperature only.
 </li>
 </ul>
 <p>
 In addition, this medium model is <i>calorically perfect</i>, i.e., the
 specific heat capacities at constant pressure <i>c<sub>p</sub></i>
 and constant volume <i>c<sub>v</sub></i> are both constant (Bower 1998).
 </p>
 <p>
 This medium uses the ideal gas law
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 &rho; = p &frasl;(R T),
 </p>
 <p>
 where
 <i>&rho;</i> is the density,
 <i>p</i> is the pressure,
 <i>R</i> is the gas constant and
 <i>T</i> is the temperature.
 </p>
 <p>
 The enthalpy is computed using the convention that <i>h=0</i>
 if <i>T=0</i> &deg;C and no water vapor is present.
 </p>
 <p>
 Note that for typical building simulations, the media
 <a href=\"modelica://AixLib.Media.Air\">AixLib.Media.Air</a>
 should be used as it leads generally to faster simulation.
 </p>
 <h4>References</h4>
 <p>
 Bower, William B. <i>A primer in fluid mechanics: Dynamics of flows in one
 space dimension</i>. CRC Press. 1998.
 </p>
 
 <ul>
 <li>
 October 26, 2018, by Filip Jorissen and Michael Wetter:<br/>
 Now printing different messages if temperature is above or below its limit,
 and adding instance name as JModelica does not print the full instance name in the assertion.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1045\">#1045</a>.
 </li>
 <li>
 March 15, 2016, by Michael Wetter:<br/>
 Replaced <code>spliceFunction</code> with <code>regStep</code>.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/300\">issue 300</a>.
 </li>
 <li>
 November 13, 2014, by Michael Wetter:<br/>
 Removed <code>phi</code> and removed non-required computations.
 </li>
 <li>
 March 29, 2013, by Michael Wetter:<br/>
 Added <code>final standardOrderComponents=true</code> in the
 <code>BaseProperties</code> declaration. This avoids an error
 when models are checked in Dymola 2014 in the pedenatic mode.
 </li>
 <li>
 April 12, 2012, by Michael Wetter:<br/>
 Added keyword <code>each</code> to <code>Xi(stateSelect=...)</code>.
 </li>
 <li>
 April 4, 2012, by Michael Wetter:<br/>
 Added redeclaration of <code>ThermodynamicState</code> to avoid a warning
 during model check and translation.
 </li>
 <li>
 January 27, 2010, by Michael Wetter:<br/>
 Added function <code>enthalpyOfNonCondensingGas</code> and its derivative.
 </li>
 <li>
 January 27, 2010, by Michael Wetter:<br/>
 Fixed bug with temperature offset in <code>T_phX</code>.
 </li>
 <li>
 August 18, 2008, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
Function to set the state for given pressure, enthalpy and species
concentration.
The thermodynamic state record is computed from density d, temperature
T and composition X.
Saturation pressure of water above the triple point temperature is
computed from temperature. It's range of validity is between 273.16 and
373.16 K. Outside these limits a less accurate result is returned.
Derivative function of <a href=
\"modelica://AixLib.Media.Specialized.Air.PerfectGas.saturationPressureLiquid\">
AixLib.Media.Specialized.Air.PerfectGas.saturationPressureLiquid</a>
Pressure is returned from the thermodynamic state record input as a
simple assignment.
Temperature is returned from the thermodynamic state record input as a
simple assignment.
Density is computed from pressure, temperature and composition in the
thermodynamic state record applying the ideal gas law.
Specific entropy is calculated from the thermodynamic state record,
assuming ideal gas behavior and including entropy of mixing. Liquid or
solid water is not taken into account, the entire water content X[1] is
assumed to be in the vapor state (relative humidity below 1.0).
Temperature as a function of specific enthalpy and species
concentration. The pressure is input for compatibility with the medium
models, but the temperature is independent of the pressure.
<p>
  This data record contains the coefficients for perfect gases.
</p>
<ul>
  <li>June 6, 2015, by Michael Wetter:<br/>
    Set <code>AbsolutePressure(start=p_default)</code> and
    <code>Temperature(start=T_default)</code> to have to have conistent
    start values. See also revision notes of <a href=
    \"modelica://AixLib.Media.Water\">AixLib.Media.Water</a>. This is for
    <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/266\">#266</a>.
  </li>
  <li>May 1, 2015, by Michael Wetter:<br/>
    Added <code>Inline=true</code> for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/227\">issue 227</a>.
  </li>
  <li>September 12, 2014, by Michael Wetter:<br/>
    Corrected the wrong location of the <code>preferredView</code> and
    the <code>revisions</code> annotation.
  </li>
  <li>November 21, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This package contains a <i>thermally perfect</i> model of moist air.
</p>
<p>
  A medium is called thermally perfect if
</p>
<ul>
  <li>it is in thermodynamic equilibrium,
  </li>
  <li>it is chemically not reacting, and
  </li>
  <li>internal energy and enthalpy are functions of temperature only.
  </li>
</ul>
<p>
  In addition, this medium model is <i>calorically perfect</i>, i.e.,
  the specific heat capacities at constant pressure
  <i>c<sub>p</sub></i> and constant volume <i>c<sub>v</sub></i> are
  both constant (Bower 1998).
</p>
<p>
  This medium uses the ideal gas law
</p>
<p align=\"center\" style=\"font-style:italic;\">
  ρ = p ⁄(R T),
</p>
<p>
  where <i>ρ</i> is the density, <i>p</i> is the pressure, <i>R</i> is
  the gas constant and <i>T</i> is the temperature.
</p>
<p>
  The enthalpy is computed using the convention that <i>h=0</i> if
  <i>T=0</i> °C and no water vapor is present.
</p>
<p>
  Note that for typical building simulations, the media <a href=
  \"modelica://AixLib.Media.Air\">AixLib.Media.Air</a> should be used as
  it leads generally to faster simulation.
</p>
<h4>
  References
</h4>
<p>
  Bower, William B. <i>A primer in fluid mechanics: Dynamics of flows
  in one space dimension</i>. CRC Press. 1998.
</p>
<ul>
  <li>October 26, 2018, by Filip Jorissen and Michael Wetter:<br/>
    Now printing different messages if temperature is above or below
    its limit, and adding instance name as JModelica does not print the
    full instance name in the assertion. This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1045\">#1045</a>.
  </li>
  <li>March 15, 2016, by Michael Wetter:<br/>
    Replaced <code>spliceFunction</code> with <code>regStep</code>.
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/300\">issue 300</a>.
  </li>
  <li>November 13, 2014, by Michael Wetter:<br/>
    Removed <code>phi</code> and removed non-required computations.
  </li>
  <li>March 29, 2013, by Michael Wetter:<br/>
    Added <code>final standardOrderComponents=true</code> in the
    <code>BaseProperties</code> declaration. This avoids an error when
    models are checked in Dymola 2014 in the pedenatic mode.
  </li>
  <li>April 12, 2012, by Michael Wetter:<br/>
    Added keyword <code>each</code> to
    <code>Xi(stateSelect=...)</code>.
  </li>
  <li>April 4, 2012, by Michael Wetter:<br/>
    Added redeclaration of <code>ThermodynamicState</code> to avoid a
    warning during model check and translation.
  </li>
  <li>January 27, 2010, by Michael Wetter:<br/>
    Added function <code>enthalpyOfNonCondensingGas</code> and its
    derivative.
  </li>
  <li>January 27, 2010, by Michael Wetter:<br/>
    Fixed bug with temperature offset in <code>T_phX</code>.
  </li>
  <li>August 18, 2008, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 25 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/HeatExchangers/SensibleCooler_T.mo ----
-------- HTML Code --------

 <p>
 Model for an ideal sensible-only cooler that controls its outlet temperature to
 a prescribed outlet temperature.
 </p>
 <p>
 This model forces the outlet temperature at <code>port_b</code> to be
 no higher than the temperature of the input signal
 <code>TSet</code>, subject to optional limits on the
 capacity.
 By default, the model has unlimited cooling capacity.
 </p>
 <p>
 The output signal <code>Q_flow &le; 0</code> is the heat added
 to the medium if the mass flow rate is from <code>port_a</code> to <code>port_b</code>.
 If the flow is reversed, then <code>Q_flow=0</code>.
 </p>
 <p>
 The outlet conditions at <code>port_a</code> are not affected by this model,
 other than for a possible pressure difference due to flow friction.
 </p>
 <p>
 If the parameter <code>energyDynamics</code> is different from
 <code>Modelica.Fluid.Types.Dynamics.SteadyState</code>,
 the component models the dynamic response using a first order differential equation.
 The time constant of the component is equal to the parameter <code>tau</code>.
 This time constant is adjusted based on the mass flow rate using
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 &tau;<sub>eff</sub> = &tau; |m&#775;| &frasl; m&#775;<sub>nom</sub>
 </p>
 <p>
 where
 <i>&tau;<sub>eff</sub></i> is the effective time constant for the given mass flow rate
 <i>m&#775;</i> and
 <i>&tau;</i> is the time constant at the nominal mass flow rate
 <i>m&#775;<sub>nom</sub></i>.
 This type of dynamics is equal to the dynamics that a completely mixed
 control volume would have.
 </p>
 <p>
 Optionally, this model can have a flow resistance.
 Set <code>dp_nominal = 0</code> to disable the flow friction calculation.
 </p>
 <p>
 For a similar model that is a heater, use
 <a href=\"modelica://AixLib.Fluid.HeatExchangers.Heater_T\">
 AixLib.Fluid.HeatExchangers.Heater_T</a>.
 For a model that uses a control signal <i>u &isin; [0, 1]</i> and multiplies
 this with the nominal heating or cooling power, use
 <a href=\"modelica://AixLib.Fluid.HeatExchangers.HeaterCooler_u\">
 AixLib.Fluid.HeatExchangers.HeaterCooler_u</a>.
 </p>
 <h4>Limitations</h4>
 <p>
 If the flow is from <code>port_b</code> to <code>port_a</code>,
 then the enthalpy of the medium is not affected by this model.
 </p>
 <p>
 This model does not affect the humidity of the air. Therefore,
 if used to cool air below the dew point temperature, the water mass fraction
 will not change.
 </p>
 <h4>Validation</h4>
 <p>
 The model has been validated against the analytical solution in
 the examples
 <a href=\"modelica://AixLib.Fluid.HeatExchangers.Validation.PrescribedOutlet\">
 AixLib.Fluid.HeatExchangers.Validation.PrescribedOutlet</a>
 and
 <a href=\"modelica://AixLib.Fluid.HeatExchangers.Validation.PrescribedOutlet_dynamic\">
 AixLib.Fluid.HeatExchangers.Validation.PrescribedOutlet_dynamic</a>.
 </p>
 
 <ul>
 <li>
 September 10, 2018, by Michael Wetter:<br/>
 Corrected missing propagation of initial conditions.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1016\">
 AixLib, #1016</a>.
 </li>
 <li>
 May 3, 2017, by Michael Wetter:<br/>
 First implementation.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/763\">
 AixLib, #763</a>.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Model for an ideal sensible-only cooler that controls its outlet
  temperature to a prescribed outlet temperature.
</p>
<p>
  This model forces the outlet temperature at <code>port_b</code> to be
  no higher than the temperature of the input signal <code>TSet</code>,
  subject to optional limits on the capacity. By default, the model has
  unlimited cooling capacity.
</p>
<p>
  The output signal <code>Q_flow ≤ 0</code> is the heat added to the
  medium if the mass flow rate is from <code>port_a</code> to
  <code>port_b</code>. If the flow is reversed, then
  <code>Q_flow=0</code>.
</p>
<p>
  The outlet conditions at <code>port_a</code> are not affected by this
  model, other than for a possible pressure difference due to flow
  friction.
</p>
<p>
  If the parameter <code>energyDynamics</code> is different from
  <code>Modelica.Fluid.Types.Dynamics.SteadyState</code>, the component
  models the dynamic response using a first order differential
  equation. The time constant of the component is equal to the
  parameter <code>tau</code>. This time constant is adjusted based on
  the mass flow rate using
</p>
<p align=\"center\" style=\"font-style:italic;\">
  τ<sub>eff</sub> = τ |ṁ| ⁄ ṁ<sub>nom</sub>
</p>
<p>
  where <i>τ<sub>eff</sub></i> is the effective time constant for the
  given mass flow rate <i>ṁ</i> and <i>τ</i> is the time constant at
  the nominal mass flow rate <i>ṁ<sub>nom</sub></i>. This type of
  dynamics is equal to the dynamics that a completely mixed control
  volume would have.
</p>
<p>
  Optionally, this model can have a flow resistance. Set
  <code>dp_nominal = 0</code> to disable the flow friction calculation.
</p>
<p>
  For a similar model that is a heater, use <a href=
  \"modelica://AixLib.Fluid.HeatExchangers.Heater_T\">AixLib.Fluid.HeatExchangers.Heater_T</a>.
  For a model that uses a control signal <i>u ∈ [0, 1]</i> and
  multiplies this with the nominal heating or cooling power, use
  <a href=
  \"modelica://AixLib.Fluid.HeatExchangers.HeaterCooler_u\">AixLib.Fluid.HeatExchangers.HeaterCooler_u</a>.
</p>
<h4>
  Limitations
</h4>
<p>
  If the flow is from <code>port_b</code> to <code>port_a</code>, then
  the enthalpy of the medium is not affected by this model.
</p>
<p>
  This model does not affect the humidity of the air. Therefore, if
  used to cool air below the dew point temperature, the water mass
  fraction will not change.
</p>
<h4>
  Validation
</h4>
<p>
  The model has been validated against the analytical solution in the
  examples <a href=
  \"modelica://AixLib.Fluid.HeatExchangers.Validation.PrescribedOutlet\">AixLib.Fluid.HeatExchangers.Validation.PrescribedOutlet</a>
  and <a href=
  \"modelica://AixLib.Fluid.HeatExchangers.Validation.PrescribedOutlet_dynamic\">
  AixLib.Fluid.HeatExchangers.Validation.PrescribedOutlet_dynamic</a>.
</p>
<ul>
  <li>September 10, 2018, by Michael Wetter:<br/>
    Corrected missing propagation of initial conditions.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1016\">AixLib,
    #1016</a>.
  </li>
  <li>May 3, 2017, by Michael Wetter:<br/>
    First implementation.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/763\">AixLib,
    #763</a>.
  </li>
</ul>

-------- Errors --------
line 29 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/FMI/ExportContainers/HVACZone.mo ----
-------- HTML Code --------

 <p>
 Model that is used as a container for an HVAC system that is
 to be exported as an FMU and that serves a single zone.
 </p>
 <h4>Typical use and important parameters</h4>
 <p>
 To use this model as a container for an FMU, extend
 from this model, rather than instantiate it,
 and add your HVAC system. By extending from this model, the top-level
 signal connectors on the right stay at the top-level, and hence
 will be visible at the FMI interface.
 The example
 <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.HVACZone\">
 AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.HVACZone</a>
 shows how a simple HVAC system can be implemented and exported as
 an FMU.
 <!-- @include_Buildings
 The example
 <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.Validation.RoomHVAC\">
 AixLib.Fluid.FMI.ExportContainers.Validation.RoomHVAC</a>
 shows how such an FMU can be connected
 to a room model that has signal flow.
 -->
 </p>
 <p>
 The conversion between the fluid ports and signal ports is done
 in the HVAC adapter <code>hvacAda</code>.
 This adapter has a vector of fluid ports called <code>ports</code>.
 The supply and return air ducts, including any resistance model for the inlet
 diffusor or exhaust grill, need to be connected to these ports.
 Also, if a thermal zone has interzonal air exchange or air infiltration,
 these flows need to be connected to <code>ports</code>.
 This model outputs at the port <code>fluPor</code> the mass flow rate for
 each flow that is connected to <code>ports</code>, together with its
 temperature, water vapor mass fraction per total mass of the air (not per kg dry
 air), and trace substances. These quantities are always as if the flow
 enters the room, even if the flow is zero or negative.
 If a medium has no moisture, e.g., if <code>Medium.nXi=0</code>, or
 if it has no trace substances, e.g., if <code>Medium.nC=0</code>, then
 the output signal for these properties are removed.
 These quantities are always as if the flow
 enters the room, even if the flow is zero or negative.
 Thus, a thermal zone model that uses these signals to compute the
 heat added by the HVAC system needs to implement an equation such as
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 Q<sub>sen</sub> = max(0, &#7745;<sub>sup</sub>) &nbsp; c<sub>p</sub> &nbsp; (T<sub>sup</sub> - T<sub>air,zon</sub>),
 </p>
 <p>
 where
 <i>Q<sub>sen</sub></i> is the sensible heat flow rate added to the thermal zone,
 <i>&#7745;<sub>sup</sub></i> is the supply air mass flow rate from
 the port <code>fluPor</code> (which is negative if it is an exhaust),
 <i>c<sub>p</sub></i> is the specific heat capacity at constant pressure,
 <i>T<sub>sup</sub></i> is the supply air temperature and
 <i>T<sub>air,zon</sub></i> is the zone air temperature.
 Note that without the <i>max(&middot;, &middot;)</i>, the energy
 balance would be wrong.
 </p>
 <p>
 The input signals of this model are the zone radiative temperature.
 The the zone air temperature,
 the water vapor mass fraction per total mass of the air (unless <code>Medium.nXi=0</code>)
 and trace substances (unless <code>Medium.nC=0</code>) are obtained from the connector
 <code>fluPor.backward</code>.
 The outflowing fluid stream(s) at the port <code>ports</code> will be at the
 states obtained from <code>fluPor.backward</code>.
 All fluid streams at port <code>ports</code> are at the same
 pressure.
 For convenience, the instance <code>hvacAda</code> also outputs the
 properties obtained from <code>fluPor.backward</code>. These can be used
 to connect a controller. The properties are available for each flow path in
 <code>fluPor.backward</code>. For a thermal zone with mixed air, these are
 all equal, while for a stratified room model, they can be different.
 </p>
 
 <p>
 See
 <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.HVACZone\">
 AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.HVACZone</a>
 for a model that uses this model.
 </p>
 <p>
 For models that multiple thermal zones connected to the HVAC system,
 use the model
 <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.HVACZones\">
 AixLib.Fluid.FMI.ExportContainers.HVACZones</a>.
 </p>
 <h4>Assumption and limitations</h4>
 <p>
 The mass flow rates at <code>ports</code> sum to zero, hence this
 model conserves mass.
 </p>
 <p>
 This model does not impose any pressure, other than setting the pressure
 of all fluid connections to <code>ports</code> to be equal.
 The reason is that setting a pressure can lead to non-physical system models,
 for example if a mass flow rate is imposed and the HVAC system is connected
 to a model that sets a pressure boundary condition such as
 <a href=\"modelica://AixLib.Fluid.Sources.Outside\">
 AixLib.Fluid.Sources.Outside</a>.
 Also, setting a pressure would make it impossible to use multiple instances
 of this model (one for each thermal zone) and build in Modelica an airflow network
 model with pressure driven mass flow rates.
 </p>
 <p>
 The model has no pressure drop. Hence, the pressure drop
 of an air diffuser or of an exhaust grill needs to be modelled
 in models that are connected to <code>ports</code>.
 </p>
 
 <ul>
 <li>
 January 18, 2019, by Jianjun Hu:<br/>
 Limited the media choice to moist air only.
 See <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1050\">#1050</a>.
 </li>
 <li>
 April 15, 2016, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Model that is used as a container for an HVAC system that is to be
  exported as an FMU and that serves a single zone.
</p>
<h4>
  Typical use and important parameters
</h4>
<p>
  To use this model as a container for an FMU, extend from this model,
  rather than instantiate it, and add your HVAC system. By extending
  from this model, the top-level signal connectors on the right stay at
  the top-level, and hence will be visible at the FMI interface. The
  example <a href=
  \"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.HVACZone\">
  AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.HVACZone</a> shows
  how a simple HVAC system can be implemented and exported as an FMU. 
  <!-- @include_Buildings
 The example
 <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.Validation.RoomHVAC\">
 AixLib.Fluid.FMI.ExportContainers.Validation.RoomHVAC</a>
 shows how such an FMU can be connected
 to a room model that has signal flow.
 -->
</p>
<p>
  The conversion between the fluid ports and signal ports is done in
  the HVAC adapter <code>hvacAda</code>. This adapter has a vector of
  fluid ports called <code>ports</code>. The supply and return air
  ducts, including any resistance model for the inlet diffusor or
  exhaust grill, need to be connected to these ports. Also, if a
  thermal zone has interzonal air exchange or air infiltration, these
  flows need to be connected to <code>ports</code>. This model outputs
  at the port <code>fluPor</code> the mass flow rate for each flow that
  is connected to <code>ports</code>, together with its temperature,
  water vapor mass fraction per total mass of the air (not per kg dry
  air), and trace substances. These quantities are always as if the
  flow enters the room, even if the flow is zero or negative. If a
  medium has no moisture, e.g., if <code>Medium.nXi=0</code>, or if it
  has no trace substances, e.g., if <code>Medium.nC=0</code>, then the
  output signal for these properties are removed. These quantities are
  always as if the flow enters the room, even if the flow is zero or
  negative. Thus, a thermal zone model that uses these signals to
  compute the heat added by the HVAC system needs to implement an
  equation such as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  Q<sub>sen</sub> = max(0, ṁ<sub>sup</sub>) &#160; c<sub>p</sub> &#160;
  (T<sub>sup</sub> - T<sub>air,zon</sub>),
</p>
<p>
  where <i>Q<sub>sen</sub></i> is the sensible heat flow rate added to
  the thermal zone, <i>ṁ<sub>sup</sub></i> is the supply air mass flow
  rate from the port <code>fluPor</code> (which is negative if it is an
  exhaust), <i>c<sub>p</sub></i> is the specific heat capacity at
  constant pressure, <i>T<sub>sup</sub></i> is the supply air
  temperature and <i>T<sub>air,zon</sub></i> is the zone air
  temperature. Note that without the <i>max(·, ·)</i>, the energy
  balance would be wrong.
</p>
<p>
  The input signals of this model are the zone radiative temperature.
  The the zone air temperature, the water vapor mass fraction per total
  mass of the air (unless <code>Medium.nXi=0</code>) and trace
  substances (unless <code>Medium.nC=0</code>) are obtained from the
  connector <code>fluPor.backward</code>. The outflowing fluid
  stream(s) at the port <code>ports</code> will be at the states
  obtained from <code>fluPor.backward</code>. All fluid streams at port
  <code>ports</code> are at the same pressure. For convenience, the
  instance <code>hvacAda</code> also outputs the properties obtained
  from <code>fluPor.backward</code>. These can be used to connect a
  controller. The properties are available for each flow path in
  <code>fluPor.backward</code>. For a thermal zone with mixed air,
  these are all equal, while for a stratified room model, they can be
  different.
</p>
<p>
  See <a href=
  \"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.HVACZone\">
  AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.HVACZone</a> for a
  model that uses this model.
</p>
<p>
  For models that multiple thermal zones connected to the HVAC system,
  use the model <a href=
  \"modelica://AixLib.Fluid.FMI.ExportContainers.HVACZones\">AixLib.Fluid.FMI.ExportContainers.HVACZones</a>.
</p>
<h4>
  Assumption and limitations
</h4>
<p>
  The mass flow rates at <code>ports</code> sum to zero, hence this
  model conserves mass.
</p>
<p>
  This model does not impose any pressure, other than setting the
  pressure of all fluid connections to <code>ports</code> to be equal.
  The reason is that setting a pressure can lead to non-physical system
  models, for example if a mass flow rate is imposed and the HVAC
  system is connected to a model that sets a pressure boundary
  condition such as <a href=
  \"modelica://AixLib.Fluid.Sources.Outside\">AixLib.Fluid.Sources.Outside</a>.
  Also, setting a pressure would make it impossible to use multiple
  instances of this model (one for each thermal zone) and build in
  Modelica an airflow network model with pressure driven mass flow
  rates.
</p>
<p>
  The model has no pressure drop. Hence, the pressure drop of an air
  diffuser or of an exhaust grill needs to be modelled in models that
  are connected to <code>ports</code>.
</p>
<ul>
  <li>January 18, 2019, by Jianjun Hu:<br/>
    Limited the media choice to moist air only. See <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1050\">#1050</a>.
  </li>
  <li>April 15, 2016, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 47 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Chillers/Carnot_y.mo ----
-------- HTML Code --------

 <p>
 This is model of a chiller whose coefficient of performance COP changes
 with temperatures in the same way as the Carnot efficiency changes.
 The input signal <i>y</i> is the control signal for the compressor.
 </p>
 <p>
 The model allows to either specify the Carnot effectivness
 <i>&eta;<sub>Carnot,0</sub></i>, or
 a <i>COP<sub>0</sub></i>
 at the nominal conditions, together with
 the evaporator temperature <i>T<sub>eva,0</sub></i> and
 the condenser temperature <i>T<sub>con,0</sub></i>, in which
 case the model computes the Carnot effectivness as
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 &eta;<sub>Carnot,0</sub> =
   COP<sub>0</sub>
 &frasl;  (T<sub>eva,0</sub> &frasl; (T<sub>con,0</sub>-T<sub>eva,0</sub>)).
 </p>
 <p>
 The chiller COP is computed as the product
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   COP = &eta;<sub>Carnot,0</sub> COP<sub>Carnot</sub> &eta;<sub>PL</sub>,
 </p>
 <p>
 where <i>COP<sub>Carnot</sub></i> is the Carnot efficiency and
 <i>&eta;<sub>PL</sub></i> is a polynomial in the cooling part load ratio <i>y<sub>PL</sub></i>
 that can be used to take into account a change in <i>COP</i> at part load
 conditions.
 This polynomial has the form
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   &eta;<sub>PL</sub> = a<sub>1</sub> + a<sub>2</sub> y<sub>PL</sub> + a<sub>3</sub> y<sub>PL</sub><sup>2</sup> + ...
 </p>
 <p>
 where the coefficients <i>a<sub>i</sub></i>
 are declared by the parameter <code>a</code>.
 </p>
 <p>
 On the <code>Dynamics</code> tag, the model can be parametrized to compute a transient
 or steady-state response.
 The transient response of the model is computed using a first
 order differential equation for the evaporator and condenser fluid volumes.
 The chiller outlet temperatures are equal to the temperatures of these lumped volumes.
 </p>
 <h4>Typical use and important parameters</h4>
 <p>
 When using this component, make sure that the evaporator and the condenser have sufficient mass flow rate.
 Based on the mass flow rates, the compressor power, temperature difference and the efficiencies,
 the model computes how much heat will be added to the condenser and removed at the evaporator.
 If the mass flow rates are too small, very high temperature differences can result.
 </p>
 <p>
 The evaporator heat flow rate <code>QEva_flow_nominal</code> is used to assign
 the default value for the mass flow rates, which are used for the pressure drop
 calculations.
 It is also used to compute the part load efficiency.
 Hence, make sure that <code>QEva_flow_nominal</code> is set to a reasonable value.
 </p>
 <p>
 The maximum cooling capacity is set by the parameter <code>QEva_flow_min</code>,
 which is by default set to negative infinity.
 </p>
 <p>
 The coefficient of performance depends on the
 evaporator and condenser leaving temperature
 since otherwise the second law of thermodynamics may be violated.
 </p>
 <h4>Notes</h4>
 <p>
 For a similar model that can be used as a heat pump, see
 <a href=\"modelica://AixLib.Fluid.HeatPumps.Carnot_y\">AixLib.Fluid.HeatPumps.Carnot_y</a>.
 </p>
 
 <ul>
 <li>
 January 2, 2017, by Filip Jorissen:<br/>
 Removed parameters
 <code>effInpEva</code> and <code>effInpCon</code>
 and updated documentation.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/497\">
 issue 497</a>.
 </li>
 <li>
 August 8, 2016, by Michael Wetter:<br/>
 Changed default temperature to compute COP to be the leaving temperature as
 use of the entering temperature can violate the 2nd law if the temperature
 lift is small.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/497\">
 Annex 60, issue 497</a>.
 </li>
 <li>
 January 26, 2016, by Michael Wetter:<br/>
 Refactored model to use the same base class as
 <a href=\"modelica://AixLib.Fluid.HeatPumps.Carnot_y\">AixLib.Fluid.HeatPumps.Carnot_y</a>.
 <br/>
 Changed part load efficiency to depend on cooling part load ratio rather than on the compressor
 part load ratio.<br/>
 Changed sign convention of <code>dTEva_nominal</code> to be negative rather than positive.
 For positive values, the simulation will stop with an assertion.
 </li>
 <li>
 December 18, 2015, by Michael Wetter:<br/>
 Corrected wrong computation of <code>staB1</code> and <code>staB2</code>
 which mistakenly used the <code>inStream</code> operator
 for the configuration without flow reversal.
 This is for
 <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/476\">
 issue 476</a>.
 </li>
 <li>
 November 25, 2015 by Michael Wetter:<br/>
 Changed sign convention for <code>dTEva_nominal</code> to be consistent with
 other models.
 The model will still work with the old values for <code>dTEva_nominal</code>,
 but it will write a warning so that users can transition their models.
 <br/>
 Corrected <code>assert</code> statement for the efficiency curve.
 This is for
 <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/468\">
 issue 468</a>.
 </li>
 <li>
 September 3, 2015 by Michael Wetter:<br/>
 Expanded documentation.
 </li>
 <li>
 May 6, 2015 by Michael Wetter:<br/>
 Added <code>prescribedHeatFlowRate=true</code> for <code>vol2</code>.
 </li>
 <li>
 October 9, 2013 by Michael Wetter:<br/>
 Reimplemented the computation of the port states to avoid using
 the conditionally removed variables <code>sta_a1</code>,
 <code>sta_a2</code>, <code>sta_b1</code> and <code>sta_b2</code>.
 </li>
 <li>
 May 10, 2013 by Michael Wetter:<br/>
 Added electric power <code>P</code> as an output signal.
 </li>
 <li>
 October 11, 2010 by Michael Wetter:<br/>
 Fixed bug in energy balance.
 </li>
 <li>
 March 3, 2009 by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This is model of a chiller whose coefficient of performance COP
  changes with temperatures in the same way as the Carnot efficiency
  changes. The input signal <i>y</i> is the control signal for the
  compressor.
</p>
<p>
  The model allows to either specify the Carnot effectivness
  <i>η<sub>Carnot,0</sub></i>, or a <i>COP<sub>0</sub></i> at the
  nominal conditions, together with the evaporator temperature
  <i>T<sub>eva,0</sub></i> and the condenser temperature
  <i>T<sub>con,0</sub></i>, in which case the model computes the Carnot
  effectivness as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  η<sub>Carnot,0</sub> = COP<sub>0</sub> ⁄ (T<sub>eva,0</sub> ⁄
  (T<sub>con,0</sub>-T<sub>eva,0</sub>)).
</p>
<p>
  The chiller COP is computed as the product
</p>
<p align=\"center\" style=\"font-style:italic;\">
  COP = η<sub>Carnot,0</sub> COP<sub>Carnot</sub> η<sub>PL</sub>,
</p>
<p>
  where <i>COP<sub>Carnot</sub></i> is the Carnot efficiency and
  <i>η<sub>PL</sub></i> is a polynomial in the cooling part load ratio
  <i>y<sub>PL</sub></i> that can be used to take into account a change
  in <i>COP</i> at part load conditions. This polynomial has the form
</p>
<p align=\"center\" style=\"font-style:italic;\">
  η<sub>PL</sub> = a<sub>1</sub> + a<sub>2</sub> y<sub>PL</sub> +
  a<sub>3</sub> y<sub>PL</sub><sup>2</sup> + ...
</p>
<p>
  where the coefficients <i>a<sub>i</sub></i> are declared by the
  parameter <code>a</code>.
</p>
<p>
  On the <code>Dynamics</code> tag, the model can be parametrized to
  compute a transient or steady-state response. The transient response
  of the model is computed using a first order differential equation
  for the evaporator and condenser fluid volumes. The chiller outlet
  temperatures are equal to the temperatures of these lumped volumes.
</p>
<h4>
  Typical use and important parameters
</h4>
<p>
  When using this component, make sure that the evaporator and the
  condenser have sufficient mass flow rate. Based on the mass flow
  rates, the compressor power, temperature difference and the
  efficiencies, the model computes how much heat will be added to the
  condenser and removed at the evaporator. If the mass flow rates are
  too small, very high temperature differences can result.
</p>
<p>
  The evaporator heat flow rate <code>QEva_flow_nominal</code> is used
  to assign the default value for the mass flow rates, which are used
  for the pressure drop calculations. It is also used to compute the
  part load efficiency. Hence, make sure that
  <code>QEva_flow_nominal</code> is set to a reasonable value.
</p>
<p>
  The maximum cooling capacity is set by the parameter
  <code>QEva_flow_min</code>, which is by default set to negative
  infinity.
</p>
<p>
  The coefficient of performance depends on the evaporator and
  condenser leaving temperature since otherwise the second law of
  thermodynamics may be violated.
</p>
<h4>
  Notes
</h4>
<p>
  For a similar model that can be used as a heat pump, see <a href=
  \"modelica://AixLib.Fluid.HeatPumps.Carnot_y\">AixLib.Fluid.HeatPumps.Carnot_y</a>.
</p>
<ul>
  <li>January 2, 2017, by Filip Jorissen:<br/>
    Removed parameters <code>effInpEva</code> and
    <code>effInpCon</code> and updated documentation. This is for
    <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/497\">issue
    497</a>.
  </li>
  <li>August 8, 2016, by Michael Wetter:<br/>
    Changed default temperature to compute COP to be the leaving
    temperature as use of the entering temperature can violate the 2nd
    law if the temperature lift is small.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/497\">Annex 60,
    issue 497</a>.
  </li>
  <li>January 26, 2016, by Michael Wetter:<br/>
    Refactored model to use the same base class as <a href=
    \"modelica://AixLib.Fluid.HeatPumps.Carnot_y\">AixLib.Fluid.HeatPumps.Carnot_y</a>.<br/>

    Changed part load efficiency to depend on cooling part load ratio
    rather than on the compressor part load ratio.<br/>
    Changed sign convention of <code>dTEva_nominal</code> to be
    negative rather than positive. For positive values, the simulation
    will stop with an assertion.
  </li>
  <li>December 18, 2015, by Michael Wetter:<br/>
    Corrected wrong computation of <code>staB1</code> and
    <code>staB2</code> which mistakenly used the <code>inStream</code>
    operator for the configuration without flow reversal. This is for
    <a href=
    \"https://github.com/lbl-srg/modelica-buildings/issues/476\">issue
    476</a>.
  </li>
  <li>November 25, 2015 by Michael Wetter:<br/>
    Changed sign convention for <code>dTEva_nominal</code> to be
    consistent with other models. The model will still work with the
    old values for <code>dTEva_nominal</code>, but it will write a
    warning so that users can transition their models.<br/>
    Corrected <code>assert</code> statement for the efficiency curve.
    This is for <a href=
    \"https://github.com/lbl-srg/modelica-buildings/issues/468\">issue
    468</a>.
  </li>
  <li>September 3, 2015 by Michael Wetter:<br/>
    Expanded documentation.
  </li>
  <li>May 6, 2015 by Michael Wetter:<br/>
    Added <code>prescribedHeatFlowRate=true</code> for
    <code>vol2</code>.
  </li>
  <li>October 9, 2013 by Michael Wetter:<br/>
    Reimplemented the computation of the port states to avoid using the
    conditionally removed variables <code>sta_a1</code>,
    <code>sta_a2</code>, <code>sta_b1</code> and <code>sta_b2</code>.
  </li>
  <li>May 10, 2013 by Michael Wetter:<br/>
    Added electric power <code>P</code> as an output signal.
  </li>
  <li>October 11, 2010 by Michael Wetter:<br/>
    Fixed bug in energy balance.
  </li>
  <li>March 3, 2009 by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 16 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 24 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 34 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Movers/Data/Pumps/Wilo/Stratos25slash1to6.mo ----
-------- HTML Code --------

 <p>Data from
 <a href=\"http://productfinder.wilo.com/en/COM/product/00000018000028040002003a/fc_product_datasheet\">
 http://productfinder.wilo.com/en/COM/product/00000018000028040002003a/fc_product_datasheet</a>
 </p>
 <p>
 The nominal rpm is arbitrarily chosen as the rpm of the pump curve
 in the data sheet that has the highest rpm,
 without being limited by the maximum power limitation
 (see dotted curve on figure below).
 Pump curves (H(m_flow) and P(m_flow)) from the data sheets
 are digitized using
 <a href=\"https://automeris.io/WebPlotDigitizer/\">web plot digitizer</a>.
 </p>
 <h4>Limitations:</h4>
 <ul>
 <li>The pump curve cap at high rpm that can be seen is not enforced
 by the model.
 </li>
 <li>
 The pump curve may be altered slightly to guarantee that <i>dp/dm&lt;0</i>
 </li>
 </ul>
 <p>
 The figure below illustrates a digitized pump curve.
 </p>
 <p align=\"center\">
 <img alt=\"Pump curve\" src=\"modelica://AixLib/Resources/Images/Fluid/Movers/Data/stratoscurve.png\"/></p>
 
 <ul>
 <li>
 February 17, 2016, by Michael Wetter:<br/>
 Updated parameter names for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/396\">#396</a>.
 </li>
 <li>
 December 12, 2014, by Michael Wetter:<br/>
 Added <code>defaultComponentPrefixes</code> and
 <code>defaultComponentName</code> annotations.
 </li>
 <li>April 17, 2014
     by Filip Jorissen:<br/>
        Initial version
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Data from <a href=
  \"http://productfinder.wilo.com/en/COM/product/00000018000028040002003a/fc_product_datasheet\">
  http://productfinder.wilo.com/en/COM/product/00000018000028040002003a/fc_product_datasheet</a>
</p>
<p>
  The nominal rpm is arbitrarily chosen as the rpm of the pump curve in
  the data sheet that has the highest rpm, without being limited by the
  maximum power limitation (see dotted curve on figure below). Pump
  curves (H(m_flow) and P(m_flow)) from the data sheets are digitized
  using <a href=\"https://automeris.io/WebPlotDigitizer/\">web plot
  digitizer</a>.
</p>
<h4>
  Limitations:
</h4>
<ul>
  <li>The pump curve cap at high rpm that can be seen is not enforced
  by the model.
  </li>
  <li>The pump curve may be altered slightly to guarantee that
  <i>dp/dm&lt;0</i>
  </li>
</ul>
<p>
  The figure below illustrates a digitized pump curve.
</p>
<p align=\"center\">
  <img alt=\"Pump curve\" src=
  \"modelica://AixLib/Resources/Images/Fluid/Movers/Data/stratoscurve.png\">
</p>
<ul>
  <li>February 17, 2016, by Michael Wetter:<br/>
    Updated parameter names for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/396\">#396</a>.
  </li>
  <li>December 12, 2014, by Michael Wetter:<br/>
    Added <code>defaultComponentPrefixes</code> and
    <code>defaultComponentName</code> annotations.
  </li>
  <li>April 17, 2014 by Filip Jorissen:<br/>
    Initial version
  </li>
</ul>

-------- Errors --------
line 27 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Utilities/Math/Functions/bicubic.mo ----
-------- HTML Code --------

 This function computes
 <p align=\"center\" style=\"font-style:italic;\">
  y = a<sub>1</sub>
     + a<sub>2</sub>  x<sub>1</sub> + a<sub>3</sub>  x<sub>1</sub><sup>2</sup>
     + a<sub>4</sub>  x<sub>2</sub> + a<sub>5</sub>  x<sub>2</sub><sup>2</sup>
     + a<sub>6</sub>  x<sub>1</sub>  x<sub>2</sub>
     + a<sub>7</sub>  x<sub>1</sub>^3
     + a<sub>8</sub>  x<sub>2</sub>^3
     + a<sub>9</sub>  x<sub>1</sub><sup>2</sup>  x<sub>2</sub>
     + a<sub>1</sub>0  x<sub>1</sub>  x<sub>2</sub><sup>2</sup>
 </p>
 
 <ul>
 <li>
 Sep 17, 2010 by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
This function computes
<p align=\"center\" style=\"font-style:italic;\">
  y = a<sub>1</sub> + a<sub>2</sub> x<sub>1</sub> + a<sub>3</sub>
  x<sub>1</sub><sup>2</sup> + a<sub>4</sub> x<sub>2</sub> +
  a<sub>5</sub> x<sub>2</sub><sup>2</sup> + a<sub>6</sub> x<sub>1</sub>
  x<sub>2</sub> + a<sub>7</sub> x<sub>1</sub>^3 + a<sub>8</sub>
  x<sub>2</sub>^3 + a<sub>9</sub> x<sub>1</sub><sup>2</sup>
  x<sub>2</sub> + a<sub>1</sub>0 x<sub>1</sub>
  x<sub>2</sub><sup>2</sup>
</p>
<ul>
  <li>Sep 17, 2010 by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 3 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/FixedResistances/HydraulicDiameter.mo ----
-------- HTML Code --------

 <p>
 This is a model of a flow resistance with a fixed flow coefficient.
 The mass flow rate is computed as
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 m&#775; = k
 &radic;<span style=\"text-decoration:overline;\">&Delta;P</span>,
 </p>
 <p>
 where
 <i>k</i> is a constant and
 <i>&Delta;P</i> is the pressure drop.
 The constant <i>k</i> is equal to
 <code>k=m_flow_nominal/sqrt(dp_nominal)</code>,
 where <code>m_flow_nominal</code> is a parameter.
 </p>
 <h4>Assumptions</h4>
 <p>
 In the region
 <code>abs(m_flow) &lt; m_flow_turbulent</code>,
 the square root is replaced by a differentiable function
 with finite slope.
 The value of <code>m_flow_turbulent</code> is
 computed as
 <code>m_flow_turbulent = eta_nominal*dh/4*&pi;*ReC</code>,
 where
 <code>eta_nominal</code> is the dynamic viscosity, obtained from
 the medium model. The parameter
 <code>dh</code> is the hydraulic diameter and
 <code>ReC=4000</code> is the critical Reynolds number, which both
 can be set by the user.
 </p>
 <h4>Important parameters</h4>
 <p>
 By default, the pressure drop at nominal flow rate is computed as
 </p>
 <pre>
 dp_nominal = fac * dpStraightPipe_nominal,
 </pre>
 <p>
 where <code>dpStraightPipe_nominal</code> is a parameter that is automatically computed
 based on the
 nominal mass flow rate, hydraulic diameter, pipe roughness and medium properties.
 The hydraulic diameter <code>dh</code> is by default
 computed based on the flow velocity <code>v_nominal</code> and the nominal
 mass flow rate <code>m_flow_nominal</code>. Hence, users should change the
 default values of <code>dh</code> or <code>v_nominal</code>
 if they are not applicable for their model.
 </p>
 <p>
 The factor <code>fac</code> takes into account additional resistances such as
 for bends. The default value of <code>2</code> can be changed by the user.
 </p>
 <p>
 The parameter <code>from_dp</code> is used to determine
 whether the mass flow rate is computed as a function of the
 pressure drop (if <code>from_dp=true</code>), or vice versa.
 This setting can affect the size of the nonlinear system of equations.
 </p>
 <p>
 If the parameter <code>linearized</code> is set to <code>true</code>,
 then the pressure drop is computed as a linear function of the
 mass flow rate.
 </p>
 <p>
 Setting <code>allowFlowReversal=false</code> can lead to simpler
 equations. However, this should only be set to <code>false</code>
 if one can guarantee that the flow never reverses its direction.
 This can be difficult to guarantee, as pressure imbalance after
 the initialization, or due to medium expansion and contraction,
 can lead to reverse flow.
 </p>
 <p>
 If the parameter
 <code>show_T</code> is set to <code>true</code>,
 then the model will compute the
 temperature at its ports. Note that this can lead to state events
 when the mass flow rate approaches zero,
 which can increase computing time.
 </p>
 <h4>Notes</h4>
 <p>
 For more detailed models that compute the actual flow friction,
 models from the package
 <a href=\"modelica://Modelica.Fluid\">
 Modelica.Fluid</a>
 can be used and combined with models from the
 <code>AixLib</code> library.
 </p>
 <p>
 For a model that uses <code>dp_nominal</code> as a parameter rather than
 geoemetric data, use
 <a href=\"modelica://AixLib.Fluid.FixedResistances.PressureDrop\">
 AixLib.Fluid.FixedResistances.PressureDrop</a>.
 </p>
 <h4>Implementation</h4>
 <p>
 The pressure drop is computed by calling a function in the package
 <a href=\"modelica://AixLib.Fluid.BaseClasses.FlowModels\">
 AixLib.Fluid.BaseClasses.FlowModels</a>,
 This package contains regularized implementations of the equation
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   m = sign(&Delta;p) k  &radic;<span style=\"text-decoration:overline;\">&nbsp;&Delta;p &nbsp;</span>
 </p>
 <p>
 and its inverse function.
 </p>
 <p>
 To decouple the energy equation from the mass equations,
 the pressure drop is a function of the mass flow rate,
 and not the volume flow rate.
 This leads to simpler equations.
 </p>
 
 <ul>
 <li>
 September 21, 2021, by Michael Wetter:<br/>
 Corrected typo in comments.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1525\">#1525</a>.
 </li>
 <li>
 December 1, 2016, by Michael Wetter:<br/>
 First implementation for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/480\">#480</a>.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This is a model of a flow resistance with a fixed flow coefficient.
  The mass flow rate is computed as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  ṁ = k √<span style=\"text-decoration:overline;\">ΔP</span>,
</p>
<p>
  where <i>k</i> is a constant and <i>ΔP</i> is the pressure drop. The
  constant <i>k</i> is equal to
  <code>k=m_flow_nominal/sqrt(dp_nominal)</code>, where
  <code>m_flow_nominal</code> is a parameter.
</p>
<h4>
  Assumptions
</h4>
<p>
  In the region <code>abs(m_flow) &lt; m_flow_turbulent</code>, the
  square root is replaced by a differentiable function with finite
  slope. The value of <code>m_flow_turbulent</code> is computed as
  <code>m_flow_turbulent = eta_nominal*dh/4*π*ReC</code>, where
  <code>eta_nominal</code> is the dynamic viscosity, obtained from the
  medium model. The parameter <code>dh</code> is the hydraulic diameter
  and <code>ReC=4000</code> is the critical Reynolds number, which both
  can be set by the user.
</p>
<h4>
  Important parameters
</h4>
<p>
  By default, the pressure drop at nominal flow rate is computed as
</p>
<pre>
 dp_nominal = fac * dpStraightPipe_nominal,
 </pre>
<p>
  where <code>dpStraightPipe_nominal</code> is a parameter that is
  automatically computed based on the nominal mass flow rate, hydraulic
  diameter, pipe roughness and medium properties. The hydraulic
  diameter <code>dh</code> is by default computed based on the flow
  velocity <code>v_nominal</code> and the nominal mass flow rate
  <code>m_flow_nominal</code>. Hence, users should change the default
  values of <code>dh</code> or <code>v_nominal</code> if they are not
  applicable for their model.
</p>
<p>
  The factor <code>fac</code> takes into account additional resistances
  such as for bends. The default value of <code>2</code> can be changed
  by the user.
</p>
<p>
  The parameter <code>from_dp</code> is used to determine whether the
  mass flow rate is computed as a function of the pressure drop (if
  <code>from_dp=true</code>), or vice versa. This setting can affect
  the size of the nonlinear system of equations.
</p>
<p>
  If the parameter <code>linearized</code> is set to <code>true</code>,
  then the pressure drop is computed as a linear function of the mass
  flow rate.
</p>
<p>
  Setting <code>allowFlowReversal=false</code> can lead to simpler
  equations. However, this should only be set to <code>false</code> if
  one can guarantee that the flow never reverses its direction. This
  can be difficult to guarantee, as pressure imbalance after the
  initialization, or due to medium expansion and contraction, can lead
  to reverse flow.
</p>
<p>
  If the parameter <code>show_T</code> is set to <code>true</code>,
  then the model will compute the temperature at its ports. Note that
  this can lead to state events when the mass flow rate approaches
  zero, which can increase computing time.
</p>
<h4>
  Notes
</h4>
<p>
  For more detailed models that compute the actual flow friction,
  models from the package <a href=
  \"modelica://Modelica.Fluid\">Modelica.Fluid</a> can be used and
  combined with models from the <code>AixLib</code> library.
</p>
<p>
  For a model that uses <code>dp_nominal</code> as a parameter rather
  than geoemetric data, use <a href=
  \"modelica://AixLib.Fluid.FixedResistances.PressureDrop\">AixLib.Fluid.FixedResistances.PressureDrop</a>.
</p>
<h4>
  Implementation
</h4>
<p>
  The pressure drop is computed by calling a function in the package
  <a href=
  \"modelica://AixLib.Fluid.BaseClasses.FlowModels\">AixLib.Fluid.BaseClasses.FlowModels</a>,
  This package contains regularized implementations of the equation
</p>
<p align=\"center\" style=\"font-style:italic;\">
  m = sign(Δp) k √<span style=\"text-decoration:overline;\">&#160;Δp
  &#160;</span>
</p>
<p>
  and its inverse function.
</p>
<p>
  To decouple the energy equation from the mass equations, the pressure
  drop is a function of the mass flow rate, and not the volume flow
  rate. This leads to simpler equations.
</p>
<ul>
  <li>September 21, 2021, by Michael Wetter:<br/>
    Corrected typo in comments.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1525\">#1525</a>.
  </li>
  <li>December 1, 2016, by Michael Wetter:<br/>
    First implementation for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/480\">#480</a>.
  </li>
</ul>

-------- Errors --------
line 6 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 104 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/HeatPumps/Carnot_y.mo ----
-------- HTML Code --------

 <p>
 This is model of a heat pump whose coefficient of performance COP changes
 with temperatures in the same way as the Carnot efficiency changes.
 The input signal <i>y</i> is the control signal for the compressor.
 </p>
 <p>
 The model allows to either specify the Carnot effectivness
 <i>&eta;<sub>Carnot,0</sub></i>, or
 a <i>COP<sub>0</sub></i>
 at the nominal conditions, together with
 the evaporator temperature <i>T<sub>eva,0</sub></i> and
 the condenser temperature <i>T<sub>con,0</sub></i>, in which
 case the model computes the Carnot effectivness as
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 &eta;<sub>Carnot,0</sub> =
   COP<sub>0</sub>
 &frasl;  (T<sub>con,0</sub> &frasl; (T<sub>con,0</sub>-T<sub>eva,0</sub>)).
 </p>
 <p>
 The heat pump COP is computed as the product
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   COP = &eta;<sub>Carnot,0</sub> COP<sub>Carnot</sub> &eta;<sub>PL</sub>,
 </p>
 <p>
 where <i>COP<sub>Carnot</sub></i> is the Carnot efficiency and
 <i>&eta;<sub>PL</sub></i> is a polynomial in the heating part load ratio <i>y<sub>PL</sub></i>
 that can be used to take into account a change in <i>COP</i> at part load
 conditions.
 This polynomial has the form
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   &eta;<sub>PL</sub> = a<sub>1</sub> + a<sub>2</sub> y<sub>PL</sub> + a<sub>3</sub> y<sub>PL</sub><sup>2</sup> + ...
 </p>
 <p>
 where the coefficients <i>a<sub>i</sub></i> are declared by the parameter <code>a</code>.
 </p>
 <p>
 On the <code>Dynamics</code> tag, the model can be parametrized to compute a transient
 or steady-state response.
 The transient response of the model is computed using a first
 order differential equation for the evaporator and condenser fluid volumes.
 The heat pump outlet temperatures are equal to the temperatures of these lumped volumes.
 </p>
 <h4>Typical use and important parameters</h4>
 <p>
 When using this component, make sure that the evaporator and the condenser have sufficient mass flow rate.
 Based on the mass flow rates, the compressor power, temperature difference and the efficiencies,
 the model computes how much heat will be added to the condenser and removed at the evaporator.
 If the mass flow rates are too small, very high temperature differences can result.
 </p>
 <p>
 The condenser heat flow rate <code>QCon_flow_nominal</code> is used to assign
 the default value for the mass flow rates, which are used for the pressure drop
 calculations.
 It is also used to compute the part load efficiency.
 Hence, make sure that <code>QCon_flow_nominal</code> is set to a reasonable value.
 </p>
 <p>
 The maximum heating capacity is set by the parameter <code>QCon_flow_max</code>,
 which is by default set to infinity.
 </p>
 <p>
 The coefficient of performance depends on the
 evaporator and condenser leaving temperature
 since otherwise the second law of thermodynamics may be violated.
 </p>
 <h4>Notes</h4>
 <p>
 For a similar model that can be used as a chiller, see
 <a href=\"modelica://AixLib.Fluid.Chillers.Carnot_y\">AixLib.Fluid.Chillers.Carnot_y</a>.
 </p>
 
 <ul>
 <li>
 January 3, 2017, by Michael Wetter:<br/>
 Removed parameters
 <code>effInpEva</code> and <code>effInpCon</code>
 and updated documentation.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/497\">
 issue 497</a>.
 </li>
 <li>
 August 8, 2016, by Michael Wetter:<br/>
 Changed default temperature to compute COP to be the leaving temperature as
 use of the entering temperature can violate the 2nd law if the temperature
 lift is small.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/497\">
 Annex 60, issue 497</a>.
 </li>
 <li>
 January 26, 2016, by Michael Wetter:<br/>
 Refactored model to use the same base class as
 <a href=\"modelica://AixLib.Fluid.Chillers.Carnot_y\">AixLib.Fluid.Chillers.Carnot_y</a>.<br/>
 Changed part load efficiency to depend on heating part load ratio rather than on the compressor
 part load ratio.
 </li>
 <li>
 January 20, 2015, by Damien Picard:<br/>
 Add Carnot model to Annex 60 from the Buildings library.<br/>
 Removed the flow direction dependency of
 <code>staA1</code>, <code>staB1</code>, <code>staA2</code> and <code>staB2</code> as the
 efficiency of the Carnot machine should only be computed in the design flow direction.<br/>
 </li>
 <li>
 December 18, 2015, by Michael Wetter:<br/>
 Corrected wrong computation of <code>staB1</code> and <code>staB2</code>
 which mistakenly used the <code>inStream</code> operator
 for the configuration without flow reversal.
 This is for
 <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/476\">
 issue 476</a>.
 </li>
 <li>
 November 25, 2015 by Michael Wetter:<br/>
 Changed sign convention for <code>dTEva_nominal</code> to be consistent with
 other models.
 The model will still work with the old values for <code>dTEva_nominal</code>,
 but it will write a warning so that users can transition their models.
 <br/>
 Corrected <code>assert</code> statement for the efficiency curve.
 This is for
 <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/468\">
 issue 468</a>.
 </li>
 <li>
 September 3, 2015 by Michael Wetter:<br/>
 Expanded documentation.
 </li>
 <li>
 May 6, 2015 by Michael Wetter:<br/>
 Added <code>prescribedHeatFlowRate=true</code> for <code>vol2</code>.
 </li>
 <li>
 October 9, 2013 by Michael Wetter:<br/>
 Reimplemented the computation of the port states to avoid using
 the conditionally removed variables <code>sta_a1</code>,
 <code>sta_a2</code>, <code>sta_b1</code> and <code>sta_b2</code>.
 </li>
 <li>
 May 10, 2013 by Michael Wetter:<br/>
 Added electric power <code>P</code> as an output signal.
 </li>
 <li>
 October 11, 2010 by Michael Wetter:<br/>
 Fixed bug in energy balance.
 </li>
 <li>
 March 3, 2009 by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This is model of a heat pump whose coefficient of performance COP
  changes with temperatures in the same way as the Carnot efficiency
  changes. The input signal <i>y</i> is the control signal for the
  compressor.
</p>
<p>
  The model allows to either specify the Carnot effectivness
  <i>η<sub>Carnot,0</sub></i>, or a <i>COP<sub>0</sub></i> at the
  nominal conditions, together with the evaporator temperature
  <i>T<sub>eva,0</sub></i> and the condenser temperature
  <i>T<sub>con,0</sub></i>, in which case the model computes the Carnot
  effectivness as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  η<sub>Carnot,0</sub> = COP<sub>0</sub> ⁄ (T<sub>con,0</sub> ⁄
  (T<sub>con,0</sub>-T<sub>eva,0</sub>)).
</p>
<p>
  The heat pump COP is computed as the product
</p>
<p align=\"center\" style=\"font-style:italic;\">
  COP = η<sub>Carnot,0</sub> COP<sub>Carnot</sub> η<sub>PL</sub>,
</p>
<p>
  where <i>COP<sub>Carnot</sub></i> is the Carnot efficiency and
  <i>η<sub>PL</sub></i> is a polynomial in the heating part load ratio
  <i>y<sub>PL</sub></i> that can be used to take into account a change
  in <i>COP</i> at part load conditions. This polynomial has the form
</p>
<p align=\"center\" style=\"font-style:italic;\">
  η<sub>PL</sub> = a<sub>1</sub> + a<sub>2</sub> y<sub>PL</sub> +
  a<sub>3</sub> y<sub>PL</sub><sup>2</sup> + ...
</p>
<p>
  where the coefficients <i>a<sub>i</sub></i> are declared by the
  parameter <code>a</code>.
</p>
<p>
  On the <code>Dynamics</code> tag, the model can be parametrized to
  compute a transient or steady-state response. The transient response
  of the model is computed using a first order differential equation
  for the evaporator and condenser fluid volumes. The heat pump outlet
  temperatures are equal to the temperatures of these lumped volumes.
</p>
<h4>
  Typical use and important parameters
</h4>
<p>
  When using this component, make sure that the evaporator and the
  condenser have sufficient mass flow rate. Based on the mass flow
  rates, the compressor power, temperature difference and the
  efficiencies, the model computes how much heat will be added to the
  condenser and removed at the evaporator. If the mass flow rates are
  too small, very high temperature differences can result.
</p>
<p>
  The condenser heat flow rate <code>QCon_flow_nominal</code> is used
  to assign the default value for the mass flow rates, which are used
  for the pressure drop calculations. It is also used to compute the
  part load efficiency. Hence, make sure that
  <code>QCon_flow_nominal</code> is set to a reasonable value.
</p>
<p>
  The maximum heating capacity is set by the parameter
  <code>QCon_flow_max</code>, which is by default set to infinity.
</p>
<p>
  The coefficient of performance depends on the evaporator and
  condenser leaving temperature since otherwise the second law of
  thermodynamics may be violated.
</p>
<h4>
  Notes
</h4>
<p>
  For a similar model that can be used as a chiller, see <a href=
  \"modelica://AixLib.Fluid.Chillers.Carnot_y\">AixLib.Fluid.Chillers.Carnot_y</a>.
</p>
<ul>
  <li>January 3, 2017, by Michael Wetter:<br/>
    Removed parameters <code>effInpEva</code> and
    <code>effInpCon</code> and updated documentation. This is for
    <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/497\">issue
    497</a>.
  </li>
  <li>August 8, 2016, by Michael Wetter:<br/>
    Changed default temperature to compute COP to be the leaving
    temperature as use of the entering temperature can violate the 2nd
    law if the temperature lift is small.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/497\">Annex 60,
    issue 497</a>.
  </li>
  <li>January 26, 2016, by Michael Wetter:<br/>
    Refactored model to use the same base class as <a href=
    \"modelica://AixLib.Fluid.Chillers.Carnot_y\">AixLib.Fluid.Chillers.Carnot_y</a>.<br/>

    Changed part load efficiency to depend on heating part load ratio
    rather than on the compressor part load ratio.
  </li>
  <li>January 20, 2015, by Damien Picard:<br/>
    Add Carnot model to Annex 60 from the Buildings library.<br/>
    Removed the flow direction dependency of <code>staA1</code>,
    <code>staB1</code>, <code>staA2</code> and <code>staB2</code> as
    the efficiency of the Carnot machine should only be computed in the
    design flow direction.<br/>
  </li>
  <li>December 18, 2015, by Michael Wetter:<br/>
    Corrected wrong computation of <code>staB1</code> and
    <code>staB2</code> which mistakenly used the <code>inStream</code>
    operator for the configuration without flow reversal. This is for
    <a href=
    \"https://github.com/lbl-srg/modelica-buildings/issues/476\">issue
    476</a>.
  </li>
  <li>November 25, 2015 by Michael Wetter:<br/>
    Changed sign convention for <code>dTEva_nominal</code> to be
    consistent with other models. The model will still work with the
    old values for <code>dTEva_nominal</code>, but it will write a
    warning so that users can transition their models.<br/>
    Corrected <code>assert</code> statement for the efficiency curve.
    This is for <a href=
    \"https://github.com/lbl-srg/modelica-buildings/issues/468\">issue
    468</a>.
  </li>
  <li>September 3, 2015 by Michael Wetter:<br/>
    Expanded documentation.
  </li>
  <li>May 6, 2015 by Michael Wetter:<br/>
    Added <code>prescribedHeatFlowRate=true</code> for
    <code>vol2</code>.
  </li>
  <li>October 9, 2013 by Michael Wetter:<br/>
    Reimplemented the computation of the port states to avoid using the
    conditionally removed variables <code>sta_a1</code>,
    <code>sta_a2</code>, <code>sta_b1</code> and <code>sta_b2</code>.
  </li>
  <li>May 10, 2013 by Michael Wetter:<br/>
    Added electric power <code>P</code> as an output signal.
  </li>
  <li>October 11, 2010 by Michael Wetter:<br/>
    Fixed bug in energy balance.
  </li>
  <li>March 3, 2009 by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 16 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 24 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 34 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/ThermalZones/ReducedOrder/RC/OneElement.mo ----
-------- HTML Code --------

 <p>
 This model merges all thermal masses into one
 element, parameterized by the length of the RC-chain
 <code>nExt,</code> the vector of the capacities <code>CExt[nExt]</code> that is
 connected via the vector of resistances <code>RExt[nExt]</code> and
 <code>RExtRem</code> to the ambient and indoor air.
 By default, the model neglects all
 internal thermal masses that are not directly connected to the ambient.
 However, the thermal capacity of the room air can be increased by
 using the parameter <code>mSenFac</code>.
 </p>
 <p>
 The image below shows the RC-network of this model.
 </p>
 <p align=\"center\">
 <img src=\"modelica://AixLib/Resources/Images/ThermalZones/ReducedOrder/RC/OneElement.png\" alt=\"image\"/>
 </p>
   
 <ul>
 <li>
 March 7, 2022, by Michael Wetter:<br/>
 Removed <code>massDynamics</code>.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1542\">#1542</a>.
 </li>
 <li>
 October 9, 2019, by Michael Wetter:<br/>
 Refactored addition of moisture to also account for the energy content of the
 water vapor.<br/>
 This is for <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1209\">IBPSA, issue 1209</a>.
 </li>
   <li>
   September 24, 2019, by Martin Kremer:<br/>
   Added possibility to consider moisture balance. <br/>
   Defined <code>volAir</code> conditional. Added conditional <code>volMoistAir</code> and corresponding in- and output connectors.
   </li>
   <li>
   July 11, 2019, by Katharina Brinkmann:<br/>
   Renamed <code>alphaRad</code> to <code>hRad</code>,
   <code>alphaWin</code> to <code>hConWin</code>,
   <code>alphaExt</code> to <code>hConExt</code>,
   <code>alphaExtWallConst</code> to <code>hConExtWall_const</code>,
   <code>alphaWinConst</code> to <code>hConWin_const</code>
   </li>
   <li>
   January 25, 2019, by Michael Wetter:<br/>
   Added start value to avoid warning in JModelica.
   </li>
   <li>
   September 26, 2016, by Moritz Lauster:<br/>
   Added conditional statements to solar radiation part.<br/>
   Deleted conditional statements of
   <code>splitFactor</code> and <code>splitFactorSolRad</code>.
   </li>
   <li>
   April 17, 2015, by Moritz Lauster:<br/>
   First implementation.
   </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This model merges all thermal masses into one element, parameterized
  by the length of the RC-chain <code>nExt,</code> the vector of the
  capacities <code>CExt[nExt]</code> that is connected via the vector
  of resistances <code>RExt[nExt]</code> and <code>RExtRem</code> to
  the ambient and indoor air. By default, the model neglects all
  internal thermal masses that are not directly connected to the
  ambient. However, the thermal capacity of the room air can be
  increased by using the parameter <code>mSenFac</code>.
</p>
<p>
  The image below shows the RC-network of this model.
</p>
<p align=\"center\">
  <img src=
  \"modelica://AixLib/Resources/Images/ThermalZones/ReducedOrder/RC/OneElement.png\"
  alt=\"image\">
</p>
<ul>
  <li>March 7, 2022, by Michael Wetter:<br/>
    Removed <code>massDynamics</code>.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1542\">#1542</a>.
  </li>
  <li>October 9, 2019, by Michael Wetter:<br/>
    Refactored addition of moisture to also account for the energy
    content of the water vapor.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1209\">IBPSA, issue
    1209</a>.
  </li>
  <li>September 24, 2019, by Martin Kremer:<br/>
    Added possibility to consider moisture balance.<br/>
    Defined <code>volAir</code> conditional. Added conditional
    <code>volMoistAir</code> and corresponding in- and output
    connectors.
  </li>
  <li>July 11, 2019, by Katharina Brinkmann:<br/>
    Renamed <code>alphaRad</code> to <code>hRad</code>,
    <code>alphaWin</code> to <code>hConWin</code>,
    <code>alphaExt</code> to <code>hConExt</code>,
    <code>alphaExtWallConst</code> to <code>hConExtWall_const</code>,
    <code>alphaWinConst</code> to <code>hConWin_const</code>
  </li>
  <li>January 25, 2019, by Michael Wetter:<br/>
    Added start value to avoid warning in JModelica.
  </li>
  <li>September 26, 2016, by Moritz Lauster:<br/>
    Added conditional statements to solar radiation part.<br/>
    Deleted conditional statements of <code>splitFactor</code> and
    <code>splitFactorSolRad</code>.
  </li>
  <li>April 17, 2015, by Moritz Lauster:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 16 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/FixedResistances/CheckValve.mo ----
-------- HTML Code --------

 <p>
 Implementation of a hydraulic check valve.
 Note that the small reverse flows can still occur with this model.
 </p>
 <h4>Main equations</h4>
 <p>
 The basic flow function
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   m = sign(&Delta;p) k  &radic;<span style=\"text-decoration:overline;\">&nbsp;&Delta;p &nbsp;</span>,
 </p>
 <p>
 with regularization near the origin, is used to compute the pressure drop.
 The flow coefficient
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   k = m &frasl; &radic;<span style=\"text-decoration:overline;\">&nbsp;&Delta;p &nbsp;</span>
 </p>
 <p>
 is increased from <code>l*KV_Si</code> to <code>KV_Si</code>,
 where <code>KV_Si</code> is equal to <code>Kv</code> but in SI units.
 Therefore, the flow coefficient <code>k</code> is set to a value close to zero for negative pressure differences, thereby
 restricting reverse flow to a small value.
 The flow coefficient <code>k</code> saturates to its maximum value at the pressure <code>dpValve_closing</code>.
 For larger pressure drops, the pressure drop is a quadratic function of the flow rate.
 </p>
 <h4>Typical use and important parameters</h4>
 <p>
 The parameters <code>m_flow_nominal</code> and <code>dpValve_nominal</code> 
 determine the flow coefficient of the check valve when it is fully opened. 
 A typical value for a nominal flow rate of <i>1</i> m/s is
 <code>dpValve_nominal = 3400 Pa</code>.
 The leakage ratio <code>l</code> determines the minimum flow coefficient, 
 for negative pressure differences.
 The parameter <code>dpFixed_nominal</code> allows to include a series
 pressure drop with a fixed flow coefficient into the model.
 The parameter <code>dpValve_closing</code> determines when the
 flow coefficient starts to increase,
 which is typically in the order of <code>dpValve_nominal</code>.
 </p>
 <h4>Implementation</h4>
 <p>
 The check valve implementation approximates the physics
 where a forward pressure difference opens the valve such that
 the valve opening increases, causing a growing orifice area
 and thus increasing the flow coefficient.
 Near <code>dp=dpValve_closing</code>, the valve is fully open and the flow coefficient saturates
 to the flow coefficient value determined by <code>dpValve_nominal</code> and <code>m_flow_nominal</code>.
 For typical valve diameters, the check valve is only fully open
 near nominal mass flow rate. Therefore, the model sets <code>dpValve_closing=dpValve_nominal/2</code>
 by default.
 </p>
 
 <ul>
 <li>
 September 16, 2019, by Kristoff Six and Filip Jorissen:<br/>
 Implementation of a hydraulic check valve. This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1198\">issue 1198</a>.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Implementation of a hydraulic check valve. Note that the small
  reverse flows can still occur with this model.
</p>
<h4>
  Main equations
</h4>
<p>
  The basic flow function
</p>
<p align=\"center\" style=\"font-style:italic;\">
  m = sign(Δp) k √<span style=\"text-decoration:overline;\">&#160;Δp
  &#160;</span>,
</p>
<p>
  with regularization near the origin, is used to compute the pressure
  drop. The flow coefficient
</p>
<p align=\"center\" style=\"font-style:italic;\">
  k = m ⁄ √<span style=\"text-decoration:overline;\">&#160;Δp
  &#160;</span>
</p>
<p>
  is increased from <code>l*KV_Si</code> to <code>KV_Si</code>, where
  <code>KV_Si</code> is equal to <code>Kv</code> but in SI units.
  Therefore, the flow coefficient <code>k</code> is set to a value
  close to zero for negative pressure differences, thereby restricting
  reverse flow to a small value. The flow coefficient <code>k</code>
  saturates to its maximum value at the pressure
  <code>dpValve_closing</code>. For larger pressure drops, the pressure
  drop is a quadratic function of the flow rate.
</p>
<h4>
  Typical use and important parameters
</h4>
<p>
  The parameters <code>m_flow_nominal</code> and
  <code>dpValve_nominal</code> determine the flow coefficient of the
  check valve when it is fully opened. A typical value for a nominal
  flow rate of <i>1</i> m/s is <code>dpValve_nominal = 3400 Pa</code>.
  The leakage ratio <code>l</code> determines the minimum flow
  coefficient, for negative pressure differences. The parameter
  <code>dpFixed_nominal</code> allows to include a series pressure drop
  with a fixed flow coefficient into the model. The parameter
  <code>dpValve_closing</code> determines when the flow coefficient
  starts to increase, which is typically in the order of
  <code>dpValve_nominal</code>.
</p>
<h4>
  Implementation
</h4>
<p>
  The check valve implementation approximates the physics where a
  forward pressure difference opens the valve such that the valve
  opening increases, causing a growing orifice area and thus increasing
  the flow coefficient. Near <code>dp=dpValve_closing</code>, the valve
  is fully open and the flow coefficient saturates to the flow
  coefficient value determined by <code>dpValve_nominal</code> and
  <code>m_flow_nominal</code>. For typical valve diameters, the check
  valve is only fully open near nominal mass flow rate. Therefore, the
  model sets <code>dpValve_closing=dpValve_nominal/2</code> by default.
</p>
<ul>
  <li>September 16, 2019, by Kristoff Six and Filip Jorissen:<br/>
    Implementation of a hydraulic check valve. This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1198\">issue
    1198</a>.
  </li>
</ul>

-------- Errors --------
line 10 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 17 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/FixedResistances/Validation/PlugFlowPipes/PlugFlowAIT.mo ----
-------- HTML Code --------

 <p>
 The example contains
 experimental data from a real district heating network.
 </p>
 <p>The pipes' temperatures are not initialized. Therefore, results of
 outflow temperature before approximately the first 10000 seconds should not be
 considered.
 </p>
 <p>
 Note that these three models are identical, except for the pipe model that is used:
 </p>
 <ul>
 <li>
 The model
 <a href=\"modelica://AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.MSLAIT\">
 AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.MSLAIT</a>
 uses the pipe model from the Modelica Standard Library, with a fine discretization.
 See the parameter <code>nNodes</code>.
 </li>
 <li>
 The model
 <a href=\"modelica://AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.MSLAIT2Nodes\">
 AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.MSLAIT2Nodes</a>
 uses the same model as above, but sets <code>nNodes=2</code>.
 </li>
 <li>
 The model
 <a href=\"modelica://AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.PlugFlowAIT\">
 AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.PlugFlowAIT</a>
 uses the plug flow model
 <a href=\"modelica://AixLib.Fluid.FixedResistances.PlugFlowPipe\">
 AixLib.Fluid.FixedResistances.PlugFlowPipe</a>.
 </li>
 </ul>
 <p>
 This comparison between different discretization levels and pipe models is made
 to check the influence of the discretization and pipe model on computation time
 and simulation accuracy.
 </p>
 <h4>Test bench schematic</h4>
 <p><img alt=\"Schematic of test district heating network\"
 src=\"modelica://AixLib/Resources/Images/Fluid/FixedResistances/Validation/PlugFlowPipes/AITTestBench.png\"/>
 </p>
 <h4>Calibration</h4>
 <p>To calculate the length specific thermal resistance <code>R</code> of the pipe,
 the thermal resistance of the surrounding ground is added, which yields</p>
 <p align=\"center\"style=\"font-style:italic;\">
 R=1/(0.208)+1/(2 &nbsp; lambda_g &nbsp; Modelica.Constants.pi) &nbsp; log(1/0.18),</p>
 <p>where the thermal conductivity of the ground <code>lambda_g</code> = 2.4 W/(m K).
 </p>
 
 <ul>
 <li>
 March 7, 2020, by Michael Wetter:<br/>
 Replaced measured data from specification in Modelica file to external table,
 as this reduces the computing time.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1289\"> #1289</a>.
 </li>
 <li>
 May 15, 2019, by Jianjun Hu:<br/>
 Replaced fluid source. This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1072\"> #1072</a>.
 </li>
 <li>July 4, 2016 by Bram van der Heijde:<br/>Added parameters to test the
 influence of allowFlowReversal and the presence of explicit volumes in the pipe.
 </li>
 <li>January 26, 2016 by Carles Ribas:<br/>First implementation. </li>
 </ul>
 
-------- Corrected Code --------
<p>
  The example contains experimental data from a real district heating
  network.
</p>
<p>
  The pipes' temperatures are not initialized. Therefore, results of
  outflow temperature before approximately the first 10000 seconds
  should not be considered.
</p>
<p>
  Note that these three models are identical, except for the pipe model
  that is used:
</p>
<ul>
  <li>The model <a href=
  \"modelica://AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.MSLAIT\">
    AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.MSLAIT</a>
    uses the pipe model from the Modelica Standard Library, with a fine
    discretization. See the parameter <code>nNodes</code>.
  </li>
  <li>The model <a href=
  \"modelica://AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.MSLAIT2Nodes\">
    AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.MSLAIT2Nodes</a>
    uses the same model as above, but sets <code>nNodes=2</code>.
  </li>
  <li>The model <a href=
  \"modelica://AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.PlugFlowAIT\">
    AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.PlugFlowAIT</a>
    uses the plug flow model <a href=
    \"modelica://AixLib.Fluid.FixedResistances.PlugFlowPipe\">AixLib.Fluid.FixedResistances.PlugFlowPipe</a>.
  </li>
</ul>
<p>
  This comparison between different discretization levels and pipe
  models is made to check the influence of the discretization and pipe
  model on computation time and simulation accuracy.
</p>
<h4>
  Test bench schematic
</h4>
<p>
  <img alt=\"Schematic of test district heating network\" src=
  \"modelica://AixLib/Resources/Images/Fluid/FixedResistances/Validation/PlugFlowPipes/AITTestBench.png\">
</p>
<h4>
  Calibration
</h4>
<p>
  To calculate the length specific thermal resistance <code>R</code> of
  the pipe, the thermal resistance of the surrounding ground is added,
  which yields
</p>
<p align=\"center\" style=\"font-style:italic;\">
  R=1/(0.208)+1/(2 &#160; lambda_g &#160; Modelica.Constants.pi) &#160;
  log(1/0.18),
</p>
<p>
  where the thermal conductivity of the ground <code>lambda_g</code> =
  2.4 W/(m K).
</p>
<ul>
  <li>March 7, 2020, by Michael Wetter:<br/>
    Replaced measured data from specification in Modelica file to
    external table, as this reduces the computing time.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1289\">#1289</a>.
  </li>
  <li>May 15, 2019, by Jianjun Hu:<br/>
    Replaced fluid source. This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1072\">#1072</a>.
  </li>
  <li>July 4, 2016 by Bram van der Heijde:<br/>
    Added parameters to test the influence of allowFlowReversal and the
    presence of explicit volumes in the pipe.
  </li>
  <li>January 26, 2016 by Carles Ribas:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 48 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Utilities/Math/Functions/Examples/CubicHermite.mo ----
-------- HTML Code --------

 <p>
 This example demonstrates the use of the function for cubic hermite interpolation
 and linear extrapolation.
 The example use interpolation with two different settings: One settings
 produces a monotone cubic hermite, whereas the other setting
 does not enforce monotonicity.
 The resulting plot should look as shown below, where for better visibility, the support points have been marked with black dots.
 Notice that the red curve is monotone increasing.
 </p>
 <p align=\"center\"><img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Utilities/Math/Functions/Examples/cubicHermite.png\"/></p>
 
 <ul>
 <li>
 March 8, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This example demonstrates the use of the function for cubic hermite
  interpolation and linear extrapolation. The example use interpolation
  with two different settings: One settings produces a monotone cubic
  hermite, whereas the other setting does not enforce monotonicity. The
  resulting plot should look as shown below, where for better
  visibility, the support points have been marked with black dots.
  Notice that the red curve is monotone increasing.
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Utilities/Math/Functions/Examples/cubicHermite.png\">
</p>
<ul>
  <li>March 8, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 11 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/HeatExchangers/ConstantEffectiveness.mo ----
-------- HTML Code --------

 <p>
 Model for a heat exchanger with constant effectiveness.
 </p>
 <p>
 This model transfers heat in the amount of
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   Q = Q<sub>max</sub> &epsilon;,
 </p>
 <p>
 where <i>&epsilon;</i> is a constant effectiveness and
 <i>Q<sub>max</sub></i> is the maximum heat that can be transferred.
 </p>
 <p>
 For a heat and moisture exchanger, use
 <a href=\"modelica://AixLib.Fluid.MassExchangers.ConstantEffectiveness\">
 AixLib.Fluid.MassExchangers.ConstantEffectiveness</a>
 instead of this model.
 </p>
 
 <ul>
 <li>
 August 13, 2013 by Michael Wetter:<br/>
 Corrected error in the documentation.
 </li>
 <li>
 July 30, 2013 by Michael Wetter:<br/>
 Updated model to use new variable <code>mWat_flow</code>
 in the base class.
 </li>
 <li>
 January 28, 2010, by Michael Wetter:<br/>
 Added regularization near zero flow.
 </li>
 <li>
 October 2, 2009, by Michael Wetter:<br/>
 Changed computation of inlet temperatures to use
 <code>state_*_inflow</code> which is already known in base class.
 </li>
 <li>
 April 28, 2008, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Model for a heat exchanger with constant effectiveness.
</p>
<p>
  This model transfers heat in the amount of
</p>
<p align=\"center\" style=\"font-style:italic;\">
  Q = Q<sub>max</sub> ε,
</p>
<p>
  where <i>ε</i> is a constant effectiveness and <i>Q<sub>max</sub></i>
  is the maximum heat that can be transferred.
</p>
<p>
  For a heat and moisture exchanger, use <a href=
  \"modelica://AixLib.Fluid.MassExchangers.ConstantEffectiveness\">AixLib.Fluid.MassExchangers.ConstantEffectiveness</a>
  instead of this model.
</p>
<ul>
  <li>August 13, 2013 by Michael Wetter:<br/>
    Corrected error in the documentation.
  </li>
  <li>July 30, 2013 by Michael Wetter:<br/>
    Updated model to use new variable <code>mWat_flow</code> in the
    base class.
  </li>
  <li>January 28, 2010, by Michael Wetter:<br/>
    Added regularization near zero flow.
  </li>
  <li>October 2, 2009, by Michael Wetter:<br/>
    Changed computation of inlet temperatures to use
    <code>state_*_inflow</code> which is already known in base class.
  </li>
  <li>April 28, 2008, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 8 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/HeatPumps/ReciprocatingWaterToWater.mo ----
-------- HTML Code --------

 <p>
 Model for a water to water heat pump with a reciprocating compressor, as
 described in Jin (2002). The thermodynamic heat pump cycle is represented below.
 </p>
 <p align=\"center\">
 <img  alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/HeatPumps/WaterToWater_Cycle.png\" border=\"1\"/>
 </p>
 <p>
 The rate of heat transferred to the evaporator is given by:
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 Q&#775;<sub>Eva</sub> = m&#775;<sub>ref</sub> ( h<sub>Vap</sub>(T<sub>Eva</sub>) - h<sub>Liq</sub>(T<sub>Con</sub>) ).
 </p>
 <p>
 The power consumed by the compressor is given by a linear efficiency relation:
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 P = P<sub>Theoretical</sub> / &eta; + P<sub>Loss,constant</sub>.
 </p>
 <p>
 Heat transfer in the evaporator and condenser is calculated using an
 &epsilon;-NTU method, assuming constant refrigerant temperature and constant heat
 transfer coefficient between fluid and refrigerant.
 </p>
 <p>
 Variable speed is acheived by multiplying the full load piston displacement
 by the normalized compressor speed. The power and heat transfer rates are forced
 to zero if the resulting heat pump state has higher evaporating pressure than
 condensing pressure.
 </p>
 <h4>Options</h4>
 <p>
 Parameters <code>TConMax</code> and <code>TEvaMin</code>
 may be used to set an upper or lower bound for the
 condenser and evaporator.
 The compressor is disabled when these conditions
 are not satisfied, or when the
 evaporator temperature is larger
 than the condenser temperature.
 This mimics the temperature protection
 of heat pumps and moreover it avoids
 non-converging algebraic loops of equations,
 or freezing of evaporator medium.
 This option can be disabled by setting
 <code>enable_temperature_protection = false</code>.
 </p>
 <h4>Assumptions and limitations</h4>
 <p>
 The compression process is assumed isentropic. The thermal energy
 of superheating is ignored in the evaluation of the heat transferred to the refrigerant
 in the evaporator. There is no supercooling.
 </p>
 <h4>References</h4>
 <p>
 H. Jin.
 <i>
 Parameter estimation based models of water source heat pumps.
 </i>
 PhD Thesis. Oklahoma State University. Stillwater, Oklahoma, USA. 2002.
 </p>
 
 <ul>
 <li>
 May 30, 2017, by Filip Jorissen:<br/>
 Revised documentation for temperature protection.
 See <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/769\">#769</a>.
 </li>
 <li>
 November 14, 2016, by Massimo Cimmino:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Model for a water to water heat pump with a reciprocating compressor,
  as described in Jin (2002). The thermodynamic heat pump cycle is
  represented below.
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/HeatPumps/WaterToWater_Cycle.png\"
  border=\"1\">
</p>
<p>
  The rate of heat transferred to the evaporator is given by:
</p>
<p align=\"center\" style=\"font-style:italic;\">
  Q̇<sub>Eva</sub> = ṁ<sub>ref</sub> (
  h<sub>Vap</sub>(T<sub>Eva</sub>) - h<sub>Liq</sub>(T<sub>Con</sub>)
  ).
</p>
<p>
  The power consumed by the compressor is given by a linear efficiency
  relation:
</p>
<p align=\"center\" style=\"font-style:italic;\">
  P = P<sub>Theoretical</sub> / η + P<sub>Loss,constant</sub>.
</p>
<p>
  Heat transfer in the evaporator and condenser is calculated using an
  ε-NTU method, assuming constant refrigerant temperature and constant
  heat transfer coefficient between fluid and refrigerant.
</p>
<p>
  Variable speed is acheived by multiplying the full load piston
  displacement by the normalized compressor speed. The power and heat
  transfer rates are forced to zero if the resulting heat pump state
  has higher evaporating pressure than condensing pressure.
</p>
<h4>
  Options
</h4>
<p>
  Parameters <code>TConMax</code> and <code>TEvaMin</code> may be used
  to set an upper or lower bound for the condenser and evaporator. The
  compressor is disabled when these conditions are not satisfied, or
  when the evaporator temperature is larger than the condenser
  temperature. This mimics the temperature protection of heat pumps and
  moreover it avoids non-converging algebraic loops of equations, or
  freezing of evaporator medium. This option can be disabled by setting
  <code>enable_temperature_protection = false</code>.
</p>
<h4>
  Assumptions and limitations
</h4>
<p>
  The compression process is assumed isentropic. The thermal energy of
  superheating is ignored in the evaluation of the heat transferred to
  the refrigerant in the evaporator. There is no supercooling.
</p>
<h4>
  References
</h4>
<p>
  H. Jin. <i>Parameter estimation based models of water source heat
  pumps.</i> PhD Thesis. Oklahoma State University. Stillwater,
  Oklahoma, USA. 2002.
</p>
<ul>
  <li>May 30, 2017, by Filip Jorissen:<br/>
    Revised documentation for temperature protection. See <a href=
    \"https://github.com/lbl-srg/modelica-buildings/issues/769\">#769</a>.
  </li>
  <li>November 14, 2016, by Massimo Cimmino:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 6 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 12 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 18 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Utilities/Math/Functions/biquadratic.mo ----
-------- HTML Code --------

 This function computes
 <p align=\"center\" style=\"font-style:italic;\">
   y =   a<sub>1</sub> + a<sub>2</sub>  x<sub>1</sub>
         + a<sub>3</sub>  x<sub>1</sub><sup>2</sup>
         + a<sub>4</sub>  x<sub>2</sub> + a<sub>5</sub>  x<sub>2</sub><sup>2</sup>
         + a<sub>6</sub>  x<sub>1</sub>  x<sub>2</sub>
 </p>
 
 <ul>
 <li>
 Sep 8, 2010 by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
This function computes
<p align=\"center\" style=\"font-style:italic;\">
  y = a<sub>1</sub> + a<sub>2</sub> x<sub>1</sub> + a<sub>3</sub>
  x<sub>1</sub><sup>2</sup> + a<sub>4</sub> x<sub>2</sub> +
  a<sub>5</sub> x<sub>2</sub><sup>2</sup> + a<sub>6</sub> x<sub>1</sub>
  x<sub>2</sub>
</p>
<ul>
  <li>Sep 8, 2010 by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 3 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/FixedResistances/BaseClasses/PlugFlowTransportDelay.mo ----
-------- HTML Code --------

 <p>
 Calculates time delay at both sides of the pipe as the difference between the
 current simulation time and the inlet time of the fluid at both ends of the pipe.
 </p>
 <h4>Main equation</h4>
 <p align=\"center\">
 <i>&part;z(x,t)/&part;t + v(t) &part;z(x,t)/&part;x = 0,</i>
 </p>
 <p>
 where <i>z(x,t)</i> is the spatial distribution as a function of time of any
 property <i>z</i> of the fluid. For the inlet time propagation, <i>z</i> will
 be replaced by the inlet time of the fluid <i>t<sub>in</sub></i>.
 </p>
 <h4>Implementation</h4>
 <p>
 The inlet time is approached as a fluid property and its propagation follows
 the one-dimensional wave equation, implemented using the spatialDistribution
 function. This components requires the mass flow through the pipe and the pipe
 dimensions in order to derive information about the fluid propagation.
 </p>
 <p>
 The component calculates the delay time at the inlet and the outlet port of the pipe.
 For the forward flow, the time delay is exposed at the output <code>tau</code>,
 and for the backward flow, the time delay is exposed at the output <code>tauRev</code>.
 </p>
 <h4>Assumption</h4>
 <p>
 No axial mixing takes place in the pipe.
 </p>
 
 <ul>
 <li>
 December 2, 2020, by Philipp Mehrfeld:<br/>
 Corrected calculation of <code>tau</code> and <code>tauRev</code> to be be 
 only positive.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1427\">#1427</a>.
 </li>
 <li>
 December 14, 2018, by Michael Wetter:<br/>
 Corrected argument of <code>spatialDistribution</code> operator to be a parameter
 expression.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1055\">#1055</a>.
 </li>
 <li>
 September 9, 2016 by Bram van der Heijde:<br/>
 Rename from PDETime_massFlowMod to PlugFlowTransportDelayMod
 </li>
 <li>
 December 2015 by Carles Ribas Tugores:<br/>
 Modification in delay calculation to fix issues.
 </li>
 <li>
 November 6, 2015 by Bram van der Heijde:<br/>
 Adapted flow parameter to mass flow rate instead of velocity.
 This change should also fix the reverse and zero flow issues.
 </li>
 <li>
 October 13, 2015 by Marcus Fuchs:<br/>
 Use <code>abs()</code> of normalized velocity input in order to avoid negative
 delay times.
 </li>
 <li>
 July 2015 by Arnout Aertgeerts:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Calculates time delay at both sides of the pipe as the difference
  between the current simulation time and the inlet time of the fluid
  at both ends of the pipe.
</p>
<h4>
  Main equation
</h4>
<p align=\"center\">
  <i>∂z(x,t)/∂t + v(t) ∂z(x,t)/∂x = 0,</i>
</p>
<p>
  where <i>z(x,t)</i> is the spatial distribution as a function of time
  of any property <i>z</i> of the fluid. For the inlet time
  propagation, <i>z</i> will be replaced by the inlet time of the fluid
  <i>t<sub>in</sub></i>.
</p>
<h4>
  Implementation
</h4>
<p>
  The inlet time is approached as a fluid property and its propagation
  follows the one-dimensional wave equation, implemented using the
  spatialDistribution function. This components requires the mass flow
  through the pipe and the pipe dimensions in order to derive
  information about the fluid propagation.
</p>
<p>
  The component calculates the delay time at the inlet and the outlet
  port of the pipe. For the forward flow, the time delay is exposed at
  the output <code>tau</code>, and for the backward flow, the time
  delay is exposed at the output <code>tauRev</code>.
</p>
<h4>
  Assumption
</h4>
<p>
  No axial mixing takes place in the pipe.
</p>
<ul>
  <li>December 2, 2020, by Philipp Mehrfeld:<br/>
    Corrected calculation of <code>tau</code> and <code>tauRev</code>
    to be be only positive.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1427\">#1427</a>.
  </li>
  <li>December 14, 2018, by Michael Wetter:<br/>
    Corrected argument of <code>spatialDistribution</code> operator to
    be a parameter expression.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1055\">#1055</a>.
  </li>
  <li>September 9, 2016 by Bram van der Heijde:<br/>
    Rename from PDETime_massFlowMod to PlugFlowTransportDelayMod
  </li>
  <li>December 2015 by Carles Ribas Tugores:<br/>
    Modification in delay calculation to fix issues.
  </li>
  <li>November 6, 2015 by Bram van der Heijde:<br/>
    Adapted flow parameter to mass flow rate instead of velocity. This
    change should also fix the reverse and zero flow issues.
  </li>
  <li>October 13, 2015 by Marcus Fuchs:<br/>
    Use <code>abs()</code> of normalized velocity input in order to
    avoid negative delay times.
  </li>
  <li>July 2015 by Arnout Aertgeerts:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 7 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Geothermal/Borefields/BaseClasses/HeatTransfer/GroundTemperatureResponse.mo ----
-------- HTML Code --------

 <p>
 This model calculates the ground temperature response to obtain the temperature
 at the borehole wall in a geothermal system where heat is being injected into or
 extracted from the ground.
 </p>
 <p>
 A load-aggregation scheme based on that developed by Claesson and Javed (2012) is
 used to calculate the borehole wall temperature response with the temporal superposition
 of ground thermal loads. In its base form, the
 load-aggregation scheme uses fixed-length aggregation cells to agglomerate
 thermal load history together, with more distant cells (denoted with a higher cell and vector index)
 representing more distant thermal history. The more distant the thermal load, the
 less impactful it is on the borehole wall temperature change at the current time step.
 Each cell has an <em>aggregation time</em> associated to it denoted by <code>nu</code>,
 which corresponds to the simulation time (since the beginning of heat injection or
 extraction) at which the cell will begin shifting its thermal load to more distant
 cells. To determine <code>nu</code>, cells have a temporal size <i>r<sub>cel</sub></i>
 (<code>rcel</code> in this model)
 which follows the exponential growth
 </p>
 <p align=\"center\">
 <img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/LoadAggregation_02.png\" />
 </p>
 <p>
 where <i>n<sub>Cel</sub></i> is the number of consecutive cells which can have the same size.
 Decreasing <i>r<sub>cel</sub></i> will generally decrease calculation times, at the cost of
 precision in the temporal superposition. <code>rcel</code> is expressed in multiples
 of the aggregation time resolution (via the parameter <code>tLoaAgg</code>).
 Then, <code>nu</code> may be expressed as the sum of all <code>rcel</code> values
 (multiplied by the aggregation time resolution) up to and including that cell in question.
 </p>
 <p>
 To determine the weighting factors, the borefield's temperature
 step response at the borefield wall is determined as
 </p>
 <p align=\"center\">
 <img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/LoadAggregation_03.png\" />
 </p>
 <p>
 where <i>g(&middot;)</i> is the borefield's thermal response factor known as the <em>g-function</em>,
 <i>H</i> is the total length of all boreholes and <i>k<sub>s</sub></i> is the thermal
 conductivity of the soil. The weighting factors <code>kappa</code> (<i>&kappa;</i> in the equation below)
 for a given cell <i>i</i> are then expressed as follows.
 </p>
 <p align=\"center\">
 <img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/LoadAggregation_04.png\" />
 </p>
 <p>
 where <i>&nu;</i> refers to the vector <code>nu</code> in this model and
 <i>T<sub>step</sub>(&nu;<sub>0</sub>)</i>=0.
 </p>
 <p>
 At every aggregation time step, a time event is generated to perform the load aggregation steps.
 First, the thermal load is shifted. When shifting between cells of different size, total
 energy is conserved. This operation is illustred in the figure below by Cimmino (2014).
 </p>
 <p align=\"center\">
 <img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/LoadAggregation_01.png\" />
 </p>
 <p>
 After the cell-shifting operation is performed, the first aggregation cell has its
 value set to the average thermal load since the last aggregation step.
 Temporal superposition is then applied by means
 of a scalar product between the aggregated thermal loads <code>QAgg_flow</code> and the
 weighting factors <i>&kappa;</i>.
 </p>
 <p>
 Due to Modelica's variable time steps, the load aggregation scheme is modified by separating
 the thermal response between the current aggregation time step and everything preceding it.
 This is done according to
 </p>
 <p align=\"center\">
 <img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/LoadAggregation_05.png\" />
 <br/>
 <img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/LoadAggregation_06.png\" />
 </p>
 <p>
 where <i>T<sub>b</sub></i> is the borehole wall temperature,
 <i>T<sub>g</sub></i>
 is the undisturbed ground temperature,
 <i>Q</i> is the ground thermal load per borehole length and <i>h = g/(2 &pi; k<sub>s</sub>)</i>
 is a temperature response factor based on the g-function. <i>t<sub>k</sub></i>
 is the last discrete aggregation time step, meaning that the current time <i>t</i>
 satisfies <i>t<sub>k</sub>&le;t&le;t<sub>k+1</sub></i>.
 <i>&Delta;t<sub>agg</sub>(=t<sub>k+1</sub>-t<sub>k</sub>)</i> is the
 parameter <code>tLoaAgg</code> in the present model.
 </p>
 <p>
 Thus,
 <i>&Delta;T<sub>b</sub>*(t)</i>
 is the borehole wall temperature change due to the thermal history prior to the current
 aggregation step. At every aggregation time step, load aggregation and temporal superposition
 are used to calculate its discrete value. Assuming no heat injection or extraction until
 <i>t<sub>k+1</sub></i>, this term is assumed to have a linear
 time derivative, which is given by the difference between <i>&Delta;T<sub>b</sub>*(t<sub>k+1</sub>)</i>
 (the temperature change from load history at the next discrete aggregation time step, which
 is constant over the duration of the ongoing aggregation time step) and the total
 temperature change at the last aggregation time step, <i>&Delta;T<sub>b</sub>(t)</i>.
 </p>
 <p align=\"center\">
 <img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/LoadAggregation_09.png\" />
 </p>
 <p>
 The second term <i>&Delta;T<sub>b,q</sub>(t)</i> concerns the ongoing aggregation time step.
 To obtain the time derivative of this term, the thermal response factor <i>h</i> is assumed
 to vary linearly over the course of an aggregation time step. Therefore, because
 the ongoing aggregation time step always concerns the first aggregation cell, its derivative (denoted
 by the parameter <code>dTStepdt</code> in this model) can be calculated as
 <code>kappa[1]</code>, the first value in the <code>kappa</code> vector,
 divided by the aggregation time step <i>&Delta;t</i>.
 The derivative of the temperature change at the borehole wall is then expressed
 as the multiplication of <code>dTStepdt</code> (which only needs to be
 calculated once at the start of the simulation) and the heat flow <i>Q</i> at
 the borehole wall.
 </p>
 <p align=\"center\">
 <img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/LoadAggregation_10.png\" />
 </p>
 <p align=\"center\">
 <img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/LoadAggregation_11.png\" />
 </p>
 <p>
 With the two terms in the expression of <i>&Delta;T<sub>b</sub>(t)</i> expressed
 as time derivatives, <i>&Delta;T<sub>b</sub>(t)</i> can itself also be
 expressed as its time derivative and implemented as such directly in the Modelica
 equations block with the <code>der()</code> operator.
 </p>
 <p align=\"center\">
 <img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/LoadAggregation_07.png\" />
 <br/>
 <img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/LoadAggregation_08.png\" />
 </p>
 <p>
 This load aggregation scheme is validated in
 <a href=\"modelica://AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.Validation.Analytic_20Years\">
 AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.Validation.Analytic_20Years</a>.
 </p>
 <h4>References</h4>
 <p>
 Cimmino, M. 2014. <i>D&eacute;veloppement et validation exp&eacute;rimentale de facteurs de r&eacute;ponse
 thermique pour champs de puits g&eacute;othermiques</i>,
 Ph.D. Thesis, &Eacute;cole Polytechnique de Montr&eacute;al.
 </p>
 <p>
 Claesson, J. and Javed, S. 2012. <i>A load-aggregation method to calculate extraction temperatures of borehole heat exchangers</i>. ASHRAE Transactions 118(1): 530-539.
 </p>
 
 <ul>
 <li>
 August 30, 2018, by Michael Wetter:<br/>
 Refactored model to compute the temperature difference relative to the initial temperature,
 because the model is independent of the initial temperature.
 </li>
 <li>
 April 5, 2018, by Alex Laferri&egrave;re:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This model calculates the ground temperature response to obtain the
  temperature at the borehole wall in a geothermal system where heat is
  being injected into or extracted from the ground.
</p>
<p>
  A load-aggregation scheme based on that developed by Claesson and
  Javed (2012) is used to calculate the borehole wall temperature
  response with the temporal superposition of ground thermal loads. In
  its base form, the load-aggregation scheme uses fixed-length
  aggregation cells to agglomerate thermal load history together, with
  more distant cells (denoted with a higher cell and vector index)
  representing more distant thermal history. The more distant the
  thermal load, the less impactful it is on the borehole wall
  temperature change at the current time step. Each cell has an
  <em>aggregation time</em> associated to it denoted by
  <code>nu</code>, which corresponds to the simulation time (since the
  beginning of heat injection or extraction) at which the cell will
  begin shifting its thermal load to more distant cells. To determine
  <code>nu</code>, cells have a temporal size <i>r<sub>cel</sub></i>
  (<code>rcel</code> in this model) which follows the exponential
  growth
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/LoadAggregation_02.png\">
</p>
<p>
  where <i>n<sub>Cel</sub></i> is the number of consecutive cells which
  can have the same size. Decreasing <i>r<sub>cel</sub></i> will
  generally decrease calculation times, at the cost of precision in the
  temporal superposition. <code>rcel</code> is expressed in multiples
  of the aggregation time resolution (via the parameter
  <code>tLoaAgg</code>). Then, <code>nu</code> may be expressed as the
  sum of all <code>rcel</code> values (multiplied by the aggregation
  time resolution) up to and including that cell in question.
</p>
<p>
  To determine the weighting factors, the borefield's temperature step
  response at the borefield wall is determined as
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/LoadAggregation_03.png\">
</p>
<p>
  where <i>g(·)</i> is the borefield's thermal response factor known as
  the <em>g-function</em>, <i>H</i> is the total length of all
  boreholes and <i>k<sub>s</sub></i> is the thermal conductivity of the
  soil. The weighting factors <code>kappa</code> (<i>κ</i> in the
  equation below) for a given cell <i>i</i> are then expressed as
  follows.
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/LoadAggregation_04.png\">
</p>
<p>
  where <i>ν</i> refers to the vector <code>nu</code> in this model and
  <i>T<sub>step</sub>(ν<sub>0</sub>)</i>=0.
</p>
<p>
  At every aggregation time step, a time event is generated to perform
  the load aggregation steps. First, the thermal load is shifted. When
  shifting between cells of different size, total energy is conserved.
  This operation is illustred in the figure below by Cimmino (2014).
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/LoadAggregation_01.png\">
</p>
<p>
  After the cell-shifting operation is performed, the first aggregation
  cell has its value set to the average thermal load since the last
  aggregation step. Temporal superposition is then applied by means of
  a scalar product between the aggregated thermal loads
  <code>QAgg_flow</code> and the weighting factors <i>κ</i>.
</p>
<p>
  Due to Modelica's variable time steps, the load aggregation scheme is
  modified by separating the thermal response between the current
  aggregation time step and everything preceding it. This is done
  according to
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/LoadAggregation_05.png\"><br/>

  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/LoadAggregation_06.png\">
</p>
<p>
  where <i>T<sub>b</sub></i> is the borehole wall temperature,
  <i>T<sub>g</sub></i> is the undisturbed ground temperature, <i>Q</i>
  is the ground thermal load per borehole length and <i>h = g/(2 π
  k<sub>s</sub>)</i> is a temperature response factor based on the
  g-function. <i>t<sub>k</sub></i> is the last discrete aggregation
  time step, meaning that the current time <i>t</i> satisfies
  <i>t<sub>k</sub>≤t≤t<sub>k+1</sub></i>.
  <i>Δt<sub>agg</sub>(=t<sub>k+1</sub>-t<sub>k</sub>)</i> is the
  parameter <code>tLoaAgg</code> in the present model.
</p>
<p>
  Thus, <i>ΔT<sub>b</sub>*(t)</i> is the borehole wall temperature
  change due to the thermal history prior to the current aggregation
  step. At every aggregation time step, load aggregation and temporal
  superposition are used to calculate its discrete value. Assuming no
  heat injection or extraction until <i>t<sub>k+1</sub></i>, this term
  is assumed to have a linear time derivative, which is given by the
  difference between <i>ΔT<sub>b</sub>*(t<sub>k+1</sub>)</i> (the
  temperature change from load history at the next discrete aggregation
  time step, which is constant over the duration of the ongoing
  aggregation time step) and the total temperature change at the last
  aggregation time step, <i>ΔT<sub>b</sub>(t)</i>.
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/LoadAggregation_09.png\">
</p>
<p>
  The second term <i>ΔT<sub>b,q</sub>(t)</i> concerns the ongoing
  aggregation time step. To obtain the time derivative of this term,
  the thermal response factor <i>h</i> is assumed to vary linearly over
  the course of an aggregation time step. Therefore, because the
  ongoing aggregation time step always concerns the first aggregation
  cell, its derivative (denoted by the parameter <code>dTStepdt</code>
  in this model) can be calculated as <code>kappa[1]</code>, the first
  value in the <code>kappa</code> vector, divided by the aggregation
  time step <i>Δt</i>. The derivative of the temperature change at the
  borehole wall is then expressed as the multiplication of
  <code>dTStepdt</code> (which only needs to be calculated once at the
  start of the simulation) and the heat flow <i>Q</i> at the borehole
  wall.
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/LoadAggregation_10.png\">
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/LoadAggregation_11.png\">
</p>
<p>
  With the two terms in the expression of <i>ΔT<sub>b</sub>(t)</i>
  expressed as time derivatives, <i>ΔT<sub>b</sub>(t)</i> can itself
  also be expressed as its time derivative and implemented as such
  directly in the Modelica equations block with the <code>der()</code>
  operator.
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/LoadAggregation_07.png\"><br/>

  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/LoadAggregation_08.png\">
</p>
<p>
  This load aggregation scheme is validated in <a href=
  \"modelica://AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.Validation.Analytic_20Years\">
  AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.Validation.Analytic_20Years</a>.
</p>
<h4>
  References
</h4>
<p>
  Cimmino, M. 2014. <i>Développement et validation expérimentale de
  facteurs de réponse thermique pour champs de puits géothermiques</i>,
  Ph.D. Thesis, École Polytechnique de Montréal.
</p>
<p>
  Claesson, J. and Javed, S. 2012. <i>A load-aggregation method to
  calculate extraction temperatures of borehole heat exchangers</i>.
  ASHRAE Transactions 118(1): 530-539.
</p>
<ul>
  <li>August 30, 2018, by Michael Wetter:<br/>
    Refactored model to compute the temperature difference relative to
    the initial temperature, because the model is independent of the
    initial temperature.
  </li>
  <li>April 5, 2018, by Alex Laferrière:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 22 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 37 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 46 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 58 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 73 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 101 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 117 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 120 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 129 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Utilities/Math/Bicubic.mo ----
-------- HTML Code --------

 <p>
 This block computes
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
  y = a<sub>1</sub>
     + a<sub>2</sub>  x<sub>1</sub> + a<sub>3</sub>  x<sub>1</sub><sup>2</sup>
     + a<sub>4</sub>  x<sub>2</sub> + a<sub>5</sub>  x<sub>2</sub><sup>2</sup>
     + a<sub>6</sub>  x<sub>1</sub>  x<sub>2</sub>
     + a<sub>7</sub>  x<sub>1</sub>^3
     + a<sub>8</sub>  x<sub>2</sub>^3
     + a<sub>9</sub>  x<sub>1</sub><sup>2</sup>  x<sub>2</sub>
     + a<sub>1</sub>0  x<sub>1</sub>  x<sub>2</sub><sup>2</sup>
 </p>
 
 <ul>
 <li>
 Sep 17, 2010 by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This block computes
</p>
<p align=\"center\" style=\"font-style:italic;\">
  y = a<sub>1</sub> + a<sub>2</sub> x<sub>1</sub> + a<sub>3</sub>
  x<sub>1</sub><sup>2</sup> + a<sub>4</sub> x<sub>2</sub> +
  a<sub>5</sub> x<sub>2</sub><sup>2</sup> + a<sub>6</sub> x<sub>1</sub>
  x<sub>2</sub> + a<sub>7</sub> x<sub>1</sub>^3 + a<sub>8</sub>
  x<sub>2</sub>^3 + a<sub>9</sub> x<sub>1</sub><sup>2</sup>
  x<sub>2</sub> + a<sub>1</sub>0 x<sub>1</sub>
  x<sub>2</sub><sup>2</sup>
</p>
<ul>
  <li>Sep 17, 2010 by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 5 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Geothermal/Borefields/BaseClasses/HeatTransfer/Cylindrical.mo ----
-------- HTML Code --------

 <p>
 Model for radial heat transfer in a hollow cylinder.
 </p>
 <p>
 If the heat capacity of the material is non-zero, then this model computes transient heat conduction, i.e., it
 computes a numerical approximation to the solution of the heat equation
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
    &rho; c ( &part; T(r,t) &frasl; &part;t ) = 
     k ( &part;&sup2; T(r,t) &frasl; &part;r&sup2; + 1 &frasl; r &nbsp;  &part; T(r,t) &frasl; &part;r ),
 </p>
 <p>
 where 
 <i>&rho;</i>
 is the mass density,
 <i>c</i>
 is the specific heat capacity per unit mass,
 <i>T</i>
 is the temperature at location <i>r</i> and time <i>t</i> and
 <i>k</i> is the heat conductivity. 
 At the locations <i>r=r<sub>a</sub></i> and <i>r=r<sub>b</sub></i>, 
 the temperature and heat flow rate are equal to the 
 temperature and heat flow rate of the heat ports.
 </p>
 <p>
 If the heat capacity of the material is set to zero, then steady-state heat flow is computed using
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
    Q = 2 &pi; k (T<sub>a</sub>-T<sub>b</sub>)&frasl; ln(r<sub>a</sub> &frasl; r<sub>b</sub>),
 </p>
 <p>
 where
 <i>r<sub>a</sub></i> is the internal radius,
 <i>r<sub>b</sub></i> is the external radius,
 <i>T<sub>a</sub></i> is the temperature at port a and
 <i>T<sub>b</sub></i> is the temperature at port b.
 </p>
 <h4>Implementation</h4>
 <p>
 To spatially discretize the heat equation, the construction is 
 divided into compartments with <code>nSta &ge; 1</code> state variables. 
 The state variables are connected to each other through thermal conductors. 
 There is also a thermal conductor
 between the surfaces and the outermost state variables. Thus, to obtain
 the surface temperature, use <code>port_a.T</code> (or <code>port_b.T</code>)
 and not the variable <code>T[1]</code>.
 </p>
 
 <ul>
 <li>
 January, 2014, by Damien Picard:<br/>
 Modify the discretization of the cilindrical layer so that the first three layers have an equal thickness the following an exponentionally growing thickness.
 This follows the guidelines of Eskilson (P. Eskilson. Thermal analysis of heat extraction
 boreholes. PhD thesis, Dep. of Mathematical
 Physics, University of Lund, Sweden, 1987).
 </li>
 <li>
 March 9, 2012, by Michael Wetter:<br/>
 Removed protected variable <code>der_T</code> as it is not required.
 </li>
 <li>
 April 14 2011, by Pierre Vigouroux:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Model for radial heat transfer in a hollow cylinder.
</p>
<p>
  If the heat capacity of the material is non-zero, then this model
  computes transient heat conduction, i.e., it computes a numerical
  approximation to the solution of the heat equation
</p>
<p align=\"center\" style=\"font-style:italic;\">
  ρ c ( ∂ T(r,t) ⁄ ∂t ) = k ( ∂² T(r,t) ⁄ ∂r² + 1 ⁄ r &#160; ∂ T(r,t) ⁄
  ∂r ),
</p>
<p>
  where <i>ρ</i> is the mass density, <i>c</i> is the specific heat
  capacity per unit mass, <i>T</i> is the temperature at location
  <i>r</i> and time <i>t</i> and <i>k</i> is the heat conductivity. At
  the locations <i>r=r<sub>a</sub></i> and <i>r=r<sub>b</sub></i>, the
  temperature and heat flow rate are equal to the temperature and heat
  flow rate of the heat ports.
</p>
<p>
  If the heat capacity of the material is set to zero, then
  steady-state heat flow is computed using
</p>
<p align=\"center\" style=\"font-style:italic;\">
  Q = 2 π k (T<sub>a</sub>-T<sub>b</sub>)⁄ ln(r<sub>a</sub> ⁄
  r<sub>b</sub>),
</p>
<p>
  where <i>r<sub>a</sub></i> is the internal radius,
  <i>r<sub>b</sub></i> is the external radius, <i>T<sub>a</sub></i> is
  the temperature at port a and <i>T<sub>b</sub></i> is the temperature
  at port b.
</p>
<h4>
  Implementation
</h4>
<p>
  To spatially discretize the heat equation, the construction is
  divided into compartments with <code>nSta ≥ 1</code> state variables.
  The state variables are connected to each other through thermal
  conductors. There is also a thermal conductor between the surfaces
  and the outermost state variables. Thus, to obtain the surface
  temperature, use <code>port_a.T</code> (or <code>port_b.T</code>) and
  not the variable <code>T[1]</code>.
</p>
<ul>
  <li>January, 2014, by Damien Picard:<br/>
    Modify the discretization of the cilindrical layer so that the
    first three layers have an equal thickness the following an
    exponentionally growing thickness. This follows the guidelines of
    Eskilson (P. Eskilson. Thermal analysis of heat extraction
    boreholes. PhD thesis, Dep. of Mathematical Physics, University of
    Lund, Sweden, 1987).
  </li>
  <li>March 9, 2012, by Michael Wetter:<br/>
    Removed protected variable <code>der_T</code> as it is not
    required.
  </li>
  <li>April 14 2011, by Pierre Vigouroux:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 9 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 29 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/HeatExchangers/BaseClasses/PartialEffectivenessNTU.mo ----
-------- HTML Code --------

 <p>
 Partial model of a heat exchanger without humidity condensation.
 This model transfers heat in the amount of
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   Q = Q<sub>max</sub>  &epsilon;<br/>
   &epsilon; = f(NTU, Z, flowRegime),
 </p>
 <p>
 where
 <i>Q<sub>max</sub></i> is the maximum heat that can be transferred,
 <i>&epsilon;</i> is the heat transfer effectiveness,
 <i>NTU</i> is the Number of Transfer Units,
 <i>Z</i> is the ratio of minimum to maximum capacity flow rate and
 <i>flowRegime</i> is the heat exchanger flow regime.
 such as
 parallel flow, cross flow or counter flow.
 </p>
 <p>
 The flow regimes depend on the heat exchanger configuration. All configurations
 defined in
 <a href=\"modelica://AixLib.Fluid.Types.HeatExchangerConfiguration\">
 AixLib.Fluid.Types.HeatExchangerConfiguration</a>
 are supported.
 </p>
 <p>
 Models that extend from this partial model need to provide an assignment
 for <code>UA</code>.
 </p>
 
 <ul>
 <li>
 February 25, 2021 by Baptiste Ravache:<br/>
 Added a warning for when Q_flow_nominal is specified with the wrong sign.
 </li>
 <li>
 January 10, 2018 by Michael Wetter:<br/>
 Removed variable <code>Z</code> that is not used.
 This is for
 <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/1328\">issue 1328</a>.
 </li>
 <li>
 January 10, 2018 by Filip Jorissen:<br/>
 Corrected an error where the value of NTU was assigned to Z.
 This is for
 <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/1328\">issue 1328</a>.
 </li>
 <li>
 February 27, 2016 by Michael Wetter:<br/>
 Introduced <code>sta1_default</code> and <code>sta2_default</code>
 to enable translation under OpenModelica.
 Removed <code>max=1</code> attribute for <code>Z</code>. This is needed as near
 zero flow, <code>Z</code> can be larger than one due to the regularization.
 As <code>Z</code> is not used in this model other than for reporting, this bound
 need not be enforced (and the calculation of <code>eps</code> is fine at these small flow rates).
 This is for
 <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/490\">issue 490</a>.
 </li>
 <li>
 April 29, 2014 by Michael Wetter:<br/>
 Changed <code>assert</code> statement to avoid comparing
 enumeration with an integer, which triggers a warning
 in Dymola 2015.
 </li>
 <li>
 July 30, 2013 by Michael Wetter:<br/>
 Updated model to use new variable <code>mWat_flow</code>
 in the base class.
 </li>
 <li>
 February 12, 2010, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Partial model of a heat exchanger without humidity condensation. This
  model transfers heat in the amount of
</p>
<p align=\"center\" style=\"font-style:italic;\">
  Q = Q<sub>max</sub> ε<br/>
  ε = f(NTU, Z, flowRegime),
</p>
<p>
  where <i>Q<sub>max</sub></i> is the maximum heat that can be
  transferred, <i>ε</i> is the heat transfer effectiveness, <i>NTU</i>
  is the Number of Transfer Units, <i>Z</i> is the ratio of minimum to
  maximum capacity flow rate and <i>flowRegime</i> is the heat
  exchanger flow regime. such as parallel flow, cross flow or counter
  flow.
</p>
<p>
  The flow regimes depend on the heat exchanger configuration. All
  configurations defined in <a href=
  \"modelica://AixLib.Fluid.Types.HeatExchangerConfiguration\">AixLib.Fluid.Types.HeatExchangerConfiguration</a>
  are supported.
</p>
<p>
  Models that extend from this partial model need to provide an
  assignment for <code>UA</code>.
</p>
<ul>
  <li>February 25, 2021 by Baptiste Ravache:<br/>
    Added a warning for when Q_flow_nominal is specified with the wrong
    sign.
  </li>
  <li>January 10, 2018 by Michael Wetter:<br/>
    Removed variable <code>Z</code> that is not used. This is for
    <a href=
    \"https://github.com/lbl-srg/modelica-buildings/issues/1328\">issue
    1328</a>.
  </li>
  <li>January 10, 2018 by Filip Jorissen:<br/>
    Corrected an error where the value of NTU was assigned to Z. This
    is for <a href=
    \"https://github.com/lbl-srg/modelica-buildings/issues/1328\">issue
    1328</a>.
  </li>
  <li>February 27, 2016 by Michael Wetter:<br/>
    Introduced <code>sta1_default</code> and <code>sta2_default</code>
    to enable translation under OpenModelica. Removed
    <code>max=1</code> attribute for <code>Z</code>. This is needed as
    near zero flow, <code>Z</code> can be larger than one due to the
    regularization. As <code>Z</code> is not used in this model other
    than for reporting, this bound need not be enforced (and the
    calculation of <code>eps</code> is fine at these small flow rates).
    This is for <a href=
    \"https://github.com/lbl-srg/modelica-buildings/issues/490\">issue
    490</a>.
  </li>
  <li>April 29, 2014 by Michael Wetter:<br/>
    Changed <code>assert</code> statement to avoid comparing
    enumeration with an integer, which triggers a warning in Dymola
    2015.
  </li>
  <li>July 30, 2013 by Michael Wetter:<br/>
    Updated model to use new variable <code>mWat_flow</code> in the
    base class.
  </li>
  <li>February 12, 2010, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 6 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/HeatExchangers/ActiveBeams/BaseClasses/Convector.mo ----
-------- HTML Code --------

 <p>
 In cooling mode, this model adds heat to the water stream. The heat added is equal to:
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 Q<sub>Beam</sub> = Q<sub>rated</sub> f<sub><code>&#916;</code>T</sub> f<sub>SA</sub> f<sub>W</sub>
 </p>
 <p>
 In heating mode, the heat is removed from the water stream.
 </p>
 
 <ul>
 <li>
 March 3, 2022, by Michael Wetter:<br/>
 Removed <code>massDynamics</code>.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1542\">issue 1542</a>.
 </li>
 <li>
 April 14, 2020, by Michael Wetter:<br/>
 Changed <code>homotopyInitialization</code> to a constant.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1341\">IBPSA, #1341</a>.
 </li>
 <li>
 November 2, 2016, by Michael Wetter:<br/>
 Made assignment of <code>senTem.y</code> final.
 </li>
 <li>
 June 13, 2016, by Michael Wetter:<br/>
 Revised implementation.
 </li>
 <li>
 May 20, 2016, by Alessandro Maccarini:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  In cooling mode, this model adds heat to the water stream. The heat
  added is equal to:
</p>
<p align=\"center\" style=\"font-style:italic;\">
  Q<sub>Beam</sub> = Q<sub>rated</sub> f<sub><code>Δ</code>T</sub>
  f<sub>SA</sub> f<sub>W</sub>
</p>
<p>
  In heating mode, the heat is removed from the water stream.
</p>
<ul>
  <li>March 3, 2022, by Michael Wetter:<br/>
    Removed <code>massDynamics</code>.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1542\">issue
    1542</a>.
  </li>
  <li>April 14, 2020, by Michael Wetter:<br/>
    Changed <code>homotopyInitialization</code> to a constant.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1341\">IBPSA,
    #1341</a>.
  </li>
  <li>November 2, 2016, by Michael Wetter:<br/>
    Made assignment of <code>senTem.y</code> final.
  </li>
  <li>June 13, 2016, by Michael Wetter:<br/>
    Revised implementation.
  </li>
  <li>May 20, 2016, by Alessandro Maccarini:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 5 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/FixedResistances/Junction.mo ----
-------- HTML Code --------

 <p>
 Model of a flow junction with an optional fixed resistance in each flow leg
 and an optional mixing volume at the junction.
 </p>
 <p>
 The pressure drop is implemented using the model
 <a href=\"modelica://AixLib.Fluid.FixedResistances.PressureDrop\">
 AixLib.Fluid.FixedResistances.PressureDrop</a>.
 If its nominal pressure drop is set to zero, then the pressure drop
 model will be removed.
 For example, the pressure drop declaration
 </p>
 <pre>
   m_flow_nominal={ 0.1, 0.1,  -0.2},
   dp_nominal =   {500,    0, -6000}
 </pre>
 <p>
 would model a flow mixer that has the nominal flow rates and associated pressure drops
 as shown in the figure below. Note that <code>port_3</code> is set to negative values.
 The negative values indicate that at the nominal conditions, fluid is leaving the component.
 </p>
 <p align=\"center\">
 <img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/FixedResistances/Junction.png\"/>
 </p>
 <p>
 If
 <code>energyDynamics &lt;&gt; Modelica.Fluid.Types.Dynamics.SteadyState</code>,
 then at the flow junction, a fluid volume is modeled.
 The fluid volume is implemented using the model
 <a href=\"modelica://AixLib.Fluid.Delays.DelayFirstOrder\">
 AixLib.Fluid.Delays.DelayFirstOrder</a>.
 The fluid volume has the size
 </p>
 <pre>
   V = sum(abs(m_flow_nominal[:])/3)*tau/rho_nominal
 </pre>
 <p>
 where <code>tau</code> is a parameter and <code>rho_nominal</code> is the density
 of the medium in the volume at nominal condition.
 Setting <code>energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial</code>
 can help reducing the size of the nonlinear
 system of equations.
 </p>
 
 <ul>
 <li>
 April 14, 2020, by Michael Wetter:<br/>
 Changed <code>homotopyInitialization</code> to a constant.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1341\">IBPSA, #1341</a>.
 </li>
 <li>
 February 26, 2020, by Michael Wetter:<br/>
 Changed icon to display its operating state.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1294\">#1294</a>.
 </li>
 <li>
 March 26, 2018 by Filip Jorissen:<br/>
 Removed <code>final allowFlowReversal=true</code> from all resistances
 since this overrides the default simplification when the flow
 is not bidirectional.
 This change can lead to smaller algebraic loops.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/898\">issue 898</a>.
 </li>
 <li>
 December 1, 2016, by Michael Wetter:<br/>
 Renamed model from <code>SplitterFixedResistanceDpM</code> to
 <code>FlowJunction</code> and removed the parameters
 <code>use_dh</code>, <code>dh</code> and <code>ReC</code>.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/451\">issue 451</a>.
 </li>
 <li>
 October 14, 2016 by Michael Wetter:<br/>
 Added to Annex 60 library.<br/>
 Updated comment for parameter <code>use_dh</code>.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/451\">issue 451</a>.
 </li>
 <li>
 Removed parameter <code>dynamicBalance</code> that overwrote the setting
 of <code>energyDynamics</code> and <code>massDynamics</code>.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/411\">
 Annex 60, issue 411</a>.
 </li>
 <li>
 February 1, 2012 by Michael Wetter:<br/>
 Expanded documentation.
 </li>
 <li>
 August 4, 2011 by Michael Wetter:<br/>
 Added <code>final allowFlowReversal=true</code> to all resistances since it is impractical
 to avoid flow reversal in large flow networks where such a setting may be useful.
 </li>
 <li>
 June 11, 2008 by Michael Wetter:<br/>
 Based class on
 <a href=\"modelica://AixLib.Fluid.BaseClasses.PartialThreeWayFixedResistance\">
 AixLib.Fluid.BaseClasses.PartialThreeWayFixedResistance</a>.
 </li>
 <li>
 July 20, 2007 by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Model of a flow junction with an optional fixed resistance in each
  flow leg and an optional mixing volume at the junction.
</p>
<p>
  The pressure drop is implemented using the model <a href=
  \"modelica://AixLib.Fluid.FixedResistances.PressureDrop\">AixLib.Fluid.FixedResistances.PressureDrop</a>.
  If its nominal pressure drop is set to zero, then the pressure drop
  model will be removed. For example, the pressure drop declaration
</p>
<pre>
   m_flow_nominal={ 0.1, 0.1,  -0.2},
   dp_nominal =   {500,    0, -6000}
 </pre>
<p>
  would model a flow mixer that has the nominal flow rates and
  associated pressure drops as shown in the figure below. Note that
  <code>port_3</code> is set to negative values. The negative values
  indicate that at the nominal conditions, fluid is leaving the
  component.
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/FixedResistances/Junction.png\">
</p>
<p>
  If <code>energyDynamics &lt;&gt;
  Modelica.Fluid.Types.Dynamics.SteadyState</code>, then at the flow
  junction, a fluid volume is modeled. The fluid volume is implemented
  using the model <a href=
  \"modelica://AixLib.Fluid.Delays.DelayFirstOrder\">AixLib.Fluid.Delays.DelayFirstOrder</a>.
  The fluid volume has the size
</p>
<pre>
   V = sum(abs(m_flow_nominal[:])/3)*tau/rho_nominal
 </pre>
<p>
  where <code>tau</code> is a parameter and <code>rho_nominal</code> is
  the density of the medium in the volume at nominal condition. Setting
  <code>energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial</code>
  can help reducing the size of the nonlinear system of equations.
</p>
<ul>
  <li>April 14, 2020, by Michael Wetter:<br/>
    Changed <code>homotopyInitialization</code> to a constant.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1341\">IBPSA,
    #1341</a>.
  </li>
  <li>February 26, 2020, by Michael Wetter:<br/>
    Changed icon to display its operating state.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1294\">#1294</a>.
  </li>
  <li>March 26, 2018 by Filip Jorissen:<br/>
    Removed <code>final allowFlowReversal=true</code> from all
    resistances since this overrides the default simplification when
    the flow is not bidirectional. This change can lead to smaller
    algebraic loops. This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/898\">issue 898</a>.
  </li>
  <li>December 1, 2016, by Michael Wetter:<br/>
    Renamed model from <code>SplitterFixedResistanceDpM</code> to
    <code>FlowJunction</code> and removed the parameters
    <code>use_dh</code>, <code>dh</code> and <code>ReC</code>.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/451\">issue 451</a>.
  </li>
  <li>October 14, 2016 by Michael Wetter:<br/>
    Added to Annex 60 library.<br/>
    Updated comment for parameter <code>use_dh</code>.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/451\">issue 451</a>.
  </li>
  <li>Removed parameter <code>dynamicBalance</code> that overwrote the
  setting of <code>energyDynamics</code> and <code>massDynamics</code>.
  This is for <a href=
  \"https://github.com/ibpsa/modelica-ibpsa/issues/411\">Annex 60, issue
  411</a>.
  </li>
  <li>February 1, 2012 by Michael Wetter:<br/>
    Expanded documentation.
  </li>
  <li>August 4, 2011 by Michael Wetter:<br/>
    Added <code>final allowFlowReversal=true</code> to all resistances
    since it is impractical to avoid flow reversal in large flow
    networks where such a setting may be useful.
  </li>
  <li>June 11, 2008 by Michael Wetter:<br/>
    Based class on <a href=
    \"modelica://AixLib.Fluid.BaseClasses.PartialThreeWayFixedResistance\">
    AixLib.Fluid.BaseClasses.PartialThreeWayFixedResistance</a>.
  </li>
  <li>July 20, 2007 by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 23 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Media/Water.mo ----
-------- HTML Code --------

 <p>
 Model with basic thermodynamic properties.
 </p>
 <p>
 This base properties model is identical to
 <a href=\"modelica://Modelica.Media.Water.ConstantPropertyLiquidWater\">
 Modelica.Media.Water.ConstantPropertyLiquidWater</a>,
 except that the equation
 <code>u = cv_const*(T - reference_T)</code>
 has been replaced by <code>u=h</code> because
 <code>cp_const=cv_const</code>.
 </p>
 <p>
 This model provides equation for the following thermodynamic properties:
 </p>
 <table border=\"1\" cellspacing=\"0\" cellpadding=\"2\" summary=\"Thermodynamic properties\">
   <tr><td><strong>Variable</strong></td>
       <td><strong>Unit</strong></td>
       <td><strong>Description</strong></td></tr>
   <tr><td>T</td>
       <td>K</td>
       <td>temperature</td></tr>
   <tr><td>p</td>
       <td>Pa</td>
       <td>absolute pressure</td></tr>
   <tr><td>d</td>
       <td>kg/m3</td>
       <td>density</td></tr>
   <tr><td>h</td>
       <td>J/kg</td>
       <td>specific enthalpy</td></tr>
   <tr><td>u</td>
       <td>J/kg</td>
       <td>specific internal energy</td></tr>
   <tr><td>Xi[nXi]</td>
       <td>kg/kg</td>
       <td>independent mass fractions m_i/m</td></tr>
   <tr><td>R</td>
       <td>J/kg.K</td>
       <td>gas constant</td></tr>
   <tr><td>M</td>
       <td>kg/mol</td>
       <td>molar mass</td></tr>
 </table>
 
 <p>
 Enthalpy of the water.
 </p>
 
 <ul>
 <li>
 October 16, 2014 by Michael Wetter:<br/>
 First implementation.
 This function is used by
 <a href=\"modelica://AixLib.Fluid.MixingVolumes.MixingVolumeMoistAir\">
 AixLib.Fluid.MixingVolumes.MixingVolumeMoistAir</a>.
 </li>
 </ul>
 
 <p>
 This medium package models liquid water.
 </p>
 <p>
 The mass density is computed using a constant value of <i>995.586</i> kg/s.
 For a medium model in which the density is a function of temperature, use
 <a href=\"modelica://AixLib.Media.Specialized.Water.TemperatureDependentDensity\">
 AixLib.Media.Specialized.Water.TemperatureDependentDensity</a> which may have considerably higher computing time.
 </p>
 <p>
 For the specific heat capacities at constant pressure and at constant volume,
 a constant value of <i>4184</i> J/(kg K), which corresponds to <i>20</i>&deg;C
 is used.
 The figure below shows the relative error of the specific heat capacity that
 is introduced by this simplification.
 </p>
 <p align=\"center\">
 <img src=\"modelica://AixLib/Resources/Images/Media/Water/plotCp.png\" border=\"1\"
 alt=\"Relative variation of specific heat capacity with temperature\"/>
 </p>
 <p>
 The enthalpy is computed using the convention that <i>h=0</i>
 if <i>T=0</i> &deg;C.
 </p>
 <h4>Limitations</h4>
 <p>
 Density, specific heat capacity, thermal conductivity and viscosity are constant.
 Water is modeled as an incompressible liquid.
 There are no phase changes.
 </p>
 
 <ul>
 <li>
 September 28, 2020, by Michael Wetter:<br/>
 Reformulated <code>BaseProperties</code> to avoid event-triggering assertions.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1401\">#1401</a>.
 </li>
 <li>
 October 26, 2018, by Filip Jorissen and Michael Wetter:<br/>
 Now printing different messages if temperature is above or below its limit,
 and adding instance name as JModelica does not print the full instance name in the assertion.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1045\">#1045</a>.
 </li>
 <li>
 June 6, 2015, by Michael Wetter:<br/>
 Set <code>AbsolutePressure(start=p_default)</code> to avoid
 a translation error if
 <a href=\"modelica://AixLib.Fluid.Sources.Examples.TraceSubstancesFlowSource\">
 AixLib.Fluid.Sources.Examples.TraceSubstancesFlowSource</a>
 (if used with water instead of air)
 is translated in pedantic mode in Dymola 2016.
 The reason is that pressures use <code>Medium.p_default</code> as start values,
 but
 <a href=\"modelica://Modelica.Media.Interfaces.Types\">
 Modelica.Media.Interfaces.Types</a>
 sets a default value of <i>1E-5</i>.
 A similar change has been done for pressure and density.
 This fixes
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/266\">#266</a>.
 </li>
 <li>
 June 6, 2015, by Michael Wetter:<br/>
 Changed type of <code>BaseProperties.T</code> from
 <code>Modelica.Units.SI.Temperature</code> to <code>Temperature</code>.
 Otherwise, it has a different start value than <code>Medium.T</code>, which
 causes an error if
 <a href=\"AixLib.Media.Examples.WaterProperties\">
 AixLib.Media.Examples.WaterProperties</a>
 is translated in pedantic mode.
 This fixes
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/266\">#266</a>.
 </li>
 <li>
 June 5, 2015, by Michael Wetter:<br/>
 Added <code>stateSelect</code> attribute in <code>BaseProperties.T</code>
 to allow correct use of <code>preferredMediumState</code> as
 described in
 <a href=\"modelica://Modelica.Media.Interfaces.PartialMedium\">
 Modelica.Media.Interfaces.PartialMedium</a>,
 and set <code>preferredMediumState=false</code>
 to keep the same states as were used before.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/260\">#260</a>.
 </li>
 <li>
 June 5, 2015, by Michael Wetter:<br/>
 Removed <code>ThermodynamicState</code> declaration as this lead to
 the error
 \"Attempting to redeclare record ThermodynamicState when the original was not replaceable.\"
 in Dymola 2016 using the pedantic model check.
 </li>
 <li>
 May 1, 2015, by Michael Wetter:<br/>
 Added <code>Inline=true</code> for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/227\">
 issue 227</a>.
 </li>
 <li>
 February 25, 2015, by Michael Wetter:<br/>
 Removed <code>stateSelect</code> attribute on pressure as this caused
 <a href=\"modelica://AixLib.Examples.Tutorial.SpaceCooling.System3\">
 AixLib.Examples.Tutorial.SpaceCooling.System3</a>
 to fail with the error message
 \"differentiated if-then-else was not continuous\".
 </li>
 <li>
 October 15, 2014, by Michael Wetter:<br/>
 Reimplemented media based on
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/blob/446aa83720884052476ad6d6d4f90a6a29bb8ec9/AixLib/Media/Water.mo\">446aa83</a>.
 </li>
 <li>
 November 15, 2013, by Michael Wetter:<br/>
 Complete new reimplementation because the previous version
 had the option to add a compressibility to the medium, which
 has never been used.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Model with basic thermodynamic properties.
</p>
<p>
  This base properties model is identical to <a href=
  \"modelica://Modelica.Media.Water.ConstantPropertyLiquidWater\">Modelica.Media.Water.ConstantPropertyLiquidWater</a>,
  except that the equation <code>u = cv_const*(T - reference_T)</code>
  has been replaced by <code>u=h</code> because
  <code>cp_const=cv_const</code>.
</p>
<p>
  This model provides equation for the following thermodynamic
  properties:
</p>
<table border=\"1\" cellspacing=\"0\" cellpadding=\"2\" summary=
\"Thermodynamic properties\">
  <tr>
    <td>
      <strong>Variable</strong>
    </td>
    <td>
      <strong>Unit</strong>
    </td>
    <td>
      <strong>Description</strong>
    </td>
  </tr>
  <tr>
    <td>
      T
    </td>
    <td>
      K
    </td>
    <td>
      temperature
    </td>
  </tr>
  <tr>
    <td>
      p
    </td>
    <td>
      Pa
    </td>
    <td>
      absolute pressure
    </td>
  </tr>
  <tr>
    <td>
      d
    </td>
    <td>
      kg/m3
    </td>
    <td>
      density
    </td>
  </tr>
  <tr>
    <td>
      h
    </td>
    <td>
      J/kg
    </td>
    <td>
      specific enthalpy
    </td>
  </tr>
  <tr>
    <td>
      u
    </td>
    <td>
      J/kg
    </td>
    <td>
      specific internal energy
    </td>
  </tr>
  <tr>
    <td>
      Xi[nXi]
    </td>
    <td>
      kg/kg
    </td>
    <td>
      independent mass fractions m_i/m
    </td>
  </tr>
  <tr>
    <td>
      R
    </td>
    <td>
      J/kg.K
    </td>
    <td>
      gas constant
    </td>
  </tr>
  <tr>
    <td>
      M
    </td>
    <td>
      kg/mol
    </td>
    <td>
      molar mass
    </td>
  </tr>
</table>
<p>
  Enthalpy of the water.
</p>
<ul>
  <li>October 16, 2014 by Michael Wetter:<br/>
    First implementation. This function is used by <a href=
    \"modelica://AixLib.Fluid.MixingVolumes.MixingVolumeMoistAir\">AixLib.Fluid.MixingVolumes.MixingVolumeMoistAir</a>.
  </li>
</ul>
<p>
  This medium package models liquid water.
</p>
<p>
  The mass density is computed using a constant value of <i>995.586</i>
  kg/s. For a medium model in which the density is a function of
  temperature, use <a href=
  \"modelica://AixLib.Media.Specialized.Water.TemperatureDependentDensity\">
  AixLib.Media.Specialized.Water.TemperatureDependentDensity</a> which
  may have considerably higher computing time.
</p>
<p>
  For the specific heat capacities at constant pressure and at constant
  volume, a constant value of <i>4184</i> J/(kg K), which corresponds
  to <i>20</i>°C is used. The figure below shows the relative error of
  the specific heat capacity that is introduced by this simplification.
</p>
<p align=\"center\">
  <img src=\"modelica://AixLib/Resources/Images/Media/Water/plotCp.png\"
  border=\"1\" alt=
  \"Relative variation of specific heat capacity with temperature\">
</p>
<p>
  The enthalpy is computed using the convention that <i>h=0</i> if
  <i>T=0</i> °C.
</p>
<h4>
  Limitations
</h4>
<p>
  Density, specific heat capacity, thermal conductivity and viscosity
  are constant. Water is modeled as an incompressible liquid. There are
  no phase changes.
</p>
<ul>
  <li>September 28, 2020, by Michael Wetter:<br/>
    Reformulated <code>BaseProperties</code> to avoid event-triggering
    assertions.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1401\">#1401</a>.
  </li>
  <li>October 26, 2018, by Filip Jorissen and Michael Wetter:<br/>
    Now printing different messages if temperature is above or below
    its limit, and adding instance name as JModelica does not print the
    full instance name in the assertion. This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1045\">#1045</a>.
  </li>
  <li>June 6, 2015, by Michael Wetter:<br/>
    Set <code>AbsolutePressure(start=p_default)</code> to avoid a
    translation error if <a href=
    \"modelica://AixLib.Fluid.Sources.Examples.TraceSubstancesFlowSource\">
    AixLib.Fluid.Sources.Examples.TraceSubstancesFlowSource</a> (if
    used with water instead of air) is translated in pedantic mode in
    Dymola 2016. The reason is that pressures use
    <code>Medium.p_default</code> as start values, but <a href=
    \"modelica://Modelica.Media.Interfaces.Types\">Modelica.Media.Interfaces.Types</a>
    sets a default value of <i>1E-5</i>. A similar change has been done
    for pressure and density. This fixes <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/266\">#266</a>.
  </li>
  <li>June 6, 2015, by Michael Wetter:<br/>
    Changed type of <code>BaseProperties.T</code> from
    <code>Modelica.Units.SI.Temperature</code> to
    <code>Temperature</code>. Otherwise, it has a different start value
    than <code>Medium.T</code>, which causes an error if <a href=
    \"AixLib.Media.Examples.WaterProperties\">AixLib.Media.Examples.WaterProperties</a>
    is translated in pedantic mode. This fixes <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/266\">#266</a>.
  </li>
  <li>June 5, 2015, by Michael Wetter:<br/>
    Added <code>stateSelect</code> attribute in
    <code>BaseProperties.T</code> to allow correct use of
    <code>preferredMediumState</code> as described in <a href=
    \"modelica://Modelica.Media.Interfaces.PartialMedium\">Modelica.Media.Interfaces.PartialMedium</a>,
    and set <code>preferredMediumState=false</code> to keep the same
    states as were used before. This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/260\">#260</a>.
  </li>
  <li>June 5, 2015, by Michael Wetter:<br/>
    Removed <code>ThermodynamicState</code> declaration as this lead to
    the error \"Attempting to redeclare record ThermodynamicState when
    the original was not replaceable.\" in Dymola 2016 using the
    pedantic model check.
  </li>
  <li>May 1, 2015, by Michael Wetter:<br/>
    Added <code>Inline=true</code> for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/227\">issue 227</a>.
  </li>
  <li>February 25, 2015, by Michael Wetter:<br/>
    Removed <code>stateSelect</code> attribute on pressure as this
    caused <a href=
    \"modelica://AixLib.Examples.Tutorial.SpaceCooling.System3\">AixLib.Examples.Tutorial.SpaceCooling.System3</a>
    to fail with the error message \"differentiated if-then-else was not
    continuous\".
  </li>
  <li>October 15, 2014, by Michael Wetter:<br/>
    Reimplemented media based on <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/blob/446aa83720884052476ad6d6d4f90a6a29bb8ec9/AixLib/Media/Water.mo\">
    446aa83</a>.
  </li>
  <li>November 15, 2013, by Michael Wetter:<br/>
    Complete new reimplementation because the previous version had the
    option to add a compressibility to the medium, which has never been
    used.
  </li>
</ul>

-------- Errors --------
line 17 column 2 - Warning: The summary attribute on the <table> element is obsolete in HTML5


line 18 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Actuators/BaseClasses/exponentialDamper.mo ----
-------- HTML Code --------

 <p>
 This function computes the opening characteristics of an exponential damper.
 </p><p>
 The function is used by the model
 <a href=\"modelica://AixLib.Fluid.Actuators.Dampers.Exponential\">
 AixLib.Fluid.Actuators.Dampers.Exponential</a>.
 </p><p>
 For <code>yL &lt; y &lt; yU</code>, the damper characteristics is
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   k<sub>d</sub>(y) = exp(a+b (1-y)).
 </p>
 <p>
 Outside this range, the damper characteristic is defined by a quadratic polynomial.
 </p>
 <p>
 Note that this implementation returns <i>sqrt(k<sub>d</sub>(y))</i> instead of <i>k<sub>d</sub>(y)</i>.
 This is done for numerical reason since otherwise <i>k<sub>d</sub>(y)</i> may be an iteration
 variable, which may cause a lot of warnings and slower convergence if the solver
 attempts <i>k<sub>d</sub>(y) &lt; 0</i> during the iterative solution procedure.
 </p>
 
 <ul>
 <li>
 April 14, 2014 by Michael Wetter:<br/>
 Improved documentation.
 </li>
 <li>
 July 1, 2011 by Michael Wetter:<br/>
 Added constraint to control input to avoid using a number outside
 <code>0</code> and <code>1</code> in case that the control input
 has a numerical integration error.
 </li>
 <li>
 April 4, 2010 by Michael Wetter:<br/>
 Reformulated implementation. The new implementation computes
 <code>sqrt(kTheta)</code>. This avoid having <code>kTheta</code> in
 the iteration variables, which caused warnings when the solver attempted
 <code>kTheta &lt; 0</code>.
 </li>
 <li>
 June 22, 2008 by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This function computes the opening characteristics of an exponential
  damper.
</p>
<p>
  The function is used by the model <a href=
  \"modelica://AixLib.Fluid.Actuators.Dampers.Exponential\">AixLib.Fluid.Actuators.Dampers.Exponential</a>.
</p>
<p>
  For <code>yL &lt; y &lt; yU</code>, the damper characteristics is
</p>
<p align=\"center\" style=\"font-style:italic;\">
  k<sub>d</sub>(y) = exp(a+b (1-y)).
</p>
<p>
  Outside this range, the damper characteristic is defined by a
  quadratic polynomial.
</p>
<p>
  Note that this implementation returns <i>sqrt(k<sub>d</sub>(y))</i>
  instead of <i>k<sub>d</sub>(y)</i>. This is done for numerical reason
  since otherwise <i>k<sub>d</sub>(y)</i> may be an iteration variable,
  which may cause a lot of warnings and slower convergence if the
  solver attempts <i>k<sub>d</sub>(y) &lt; 0</i> during the iterative
  solution procedure.
</p>
<ul>
  <li>April 14, 2014 by Michael Wetter:<br/>
    Improved documentation.
  </li>
  <li>July 1, 2011 by Michael Wetter:<br/>
    Added constraint to control input to avoid using a number outside
    <code>0</code> and <code>1</code> in case that the control input
    has a numerical integration error.
  </li>
  <li>April 4, 2010 by Michael Wetter:<br/>
    Reformulated implementation. The new implementation computes
    <code>sqrt(kTheta)</code>. This avoid having <code>kTheta</code> in
    the iteration variables, which caused warnings when the solver
    attempted <code>kTheta &lt; 0</code>.
  </li>
  <li>June 22, 2008 by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 11 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Movers/BaseClasses/Characteristics/efficiency.mo ----
-------- HTML Code --------

 <p>
 This function computes the fan or pump efficiency for given normalized volume flow rate
 and performance data. The efficiency is
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   &eta; = s(V&#775;/r<sub>N</sub>, d),
 </p>
 <p>
 where
 <i>&eta;</i> is the efficiency,
 <i>r<sub>N</sub></i> is the normalized fan speed,
 <i>V&#775;</i> is the volume flow rate, and
 <i>d</i> are performance data for fan or pump efficiency.
 </p>
 <h4>Implementation</h4>
 <p>
 The function <i>s(&middot;, &middot;)</i> is a cubic hermite spline.
 If the data <i>d</i> define a monotone decreasing sequence, then
 <i>s(&middot;, d)</i> is a monotone decreasing function.
 </p>
 
 <ul>
 <li>
 December 2, 2016, by Michael Wetter:<br/>
 Removed <code>min</code> attribute as otherwise numerical noise can cause
 the assertion on the limit to fail.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/606\">#606</a>.
 </li>
 <li>
 November 22, 2014, by Michael Wetter:<br/>
 Corrected documentation as curve uses <i>V&#775;</i>
 as an independent variable.
 </li>
 <li>
 September 30, 2014, by Filip Jorissen:<br/>
 Changed polynomial to be evaluated at <code>V_flow</code>
 instead of <code>r_V</code>.
 </li>
 <li>
 April 19, 2014, by Filip Jorissen:<br/>
 Changed polynomial to be evaluated at <code>r_V/r_N</code>
 instead of <code>r_V</code> to properly account for the
 scaling law. See
 <a href=\"https://github.com/lbl-srg/modelica-buildings/pull/202\">#202</a>
 for a discussion and validation.
 </li>
 <li>
 September 28, 2011, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This function computes the fan or pump efficiency for given
  normalized volume flow rate and performance data. The efficiency is
</p>
<p align=\"center\" style=\"font-style:italic;\">
  η = s(V̇/r<sub>N</sub>, d),
</p>
<p>
  where <i>η</i> is the efficiency, <i>r<sub>N</sub></i> is the
  normalized fan speed, <i>V̇</i> is the volume flow rate, and <i>d</i>
  are performance data for fan or pump efficiency.
</p>
<h4>
  Implementation
</h4>
<p>
  The function <i>s(·, ·)</i> is a cubic hermite spline. If the data
  <i>d</i> define a monotone decreasing sequence, then <i>s(·, d)</i>
  is a monotone decreasing function.
</p>
<ul>
  <li>December 2, 2016, by Michael Wetter:<br/>
    Removed <code>min</code> attribute as otherwise numerical noise can
    cause the assertion on the limit to fail.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/606\">#606</a>.
  </li>
  <li>November 22, 2014, by Michael Wetter:<br/>
    Corrected documentation as curve uses <i>V̇</i> as an independent
    variable.
  </li>
  <li>September 30, 2014, by Filip Jorissen:<br/>
    Changed polynomial to be evaluated at <code>V_flow</code> instead
    of <code>r_V</code>.
  </li>
  <li>April 19, 2014, by Filip Jorissen:<br/>
    Changed polynomial to be evaluated at <code>r_V/r_N</code> instead
    of <code>r_V</code> to properly account for the scaling law. See
    <a href=
    \"https://github.com/lbl-srg/modelica-buildings/pull/202\">#202</a>
    for a discussion and validation.
  </li>
  <li>September 28, 2011, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 6 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/HeatExchangers/ActiveBeams/Data/BaseClasses/TemperatureDifference.mo ----
-------- HTML Code --------

 <p>
 Data record for performance data that describe the normalized
 temperature difference
 versus the change in the rate of heating or cooling.
 The normalized temperature difference is defined as
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 r<sub>&#916;T</sub><sup>i</sup>=
 &#916;T<sup>i</sup> &frasl; &#916;T<sub>nominal</sub>
 =
 (T<sub>w</sub><sup>i</sup>-T<sub>z</sub>)
 &frasl;
 (T<sub>w,nominal</sub>-T<sub>z</sub>),
 </p>
 <p>
 where
 <i>T<sub>w</sub><sup>i</sup></i> is the water inlet temperature,
 <i>T<sub>z</sub></i> is the zone air temperature and
 <i>T<sub>w,nominal</sub></i> is the nominal water inlet temperature.
 </p>
 <p>
 The normalized temperature difference <i>r<sub>&#916;T</sub></i> must be strictly increasing, i.e.,
 <i>r<sub>&#916;T</sub><sup>i</sup> &lt; r<sub>&#916;T</sub><sup>i+1</sup></i>.
 Both vectors, <i>r<sub>&#916;T</sub></i> and <i>f</i>
 must have the same size.
 </p>
 
 <ul>
 <li>
 June 13, 2016, by Michael Wetter:<br/>
 Revised implementation.
 </li>
 <li>
 May 20, 2016, by Alessandro Maccarini:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Data record for performance data that describe the normalized
  temperature difference versus the change in the rate of heating or
  cooling. The normalized temperature difference is defined as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  r<sub>ΔT</sub><sup>i</sup>= ΔT<sup>i</sup> ⁄ ΔT<sub>nominal</sub> =
  (T<sub>w</sub><sup>i</sup>-T<sub>z</sub>) ⁄
  (T<sub>w,nominal</sub>-T<sub>z</sub>),
</p>
<p>
  where <i>T<sub>w</sub><sup>i</sup></i> is the water inlet
  temperature, <i>T<sub>z</sub></i> is the zone air temperature and
  <i>T<sub>w,nominal</sub></i> is the nominal water inlet temperature.
</p>
<p>
  The normalized temperature difference <i>r<sub>ΔT</sub></i> must be
  strictly increasing, i.e., <i>r<sub>ΔT</sub><sup>i</sup> &lt;
  r<sub>ΔT</sub><sup>i+1</sup></i>. Both vectors, <i>r<sub>ΔT</sub></i>
  and <i>f</i> must have the same size.
</p>
<ul>
  <li>June 13, 2016, by Michael Wetter:<br/>
    Revised implementation.
  </li>
  <li>May 20, 2016, by Alessandro Maccarini:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 8 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/FixedResistances/BaseClasses/PlugFlow.mo ----
-------- HTML Code --------

 <ul>
 <li>
 October 20, 2017, by Michael Wetter:<br/>
 Deleted various parameters and variables that were not used.
 <br/>
 Revised documentation to follow the guidelines.
 </li>
 <li>
 May 19, 2016 by Marcus Fuchs:<br/>
 Remove condition on <code>show_V_flow</code> for calculation of
 <code>V_flow</code> to conform with pedantic checking.
 </li>
 <li>
 October 10, 2015 by Marcus Fuchs:<br/>
 Copy Icon from KUL implementation and rename model.
 </li>
 <li>
 June 23, 2015 by Marcus Fuchs:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 Model that computes the temperature propagation of
 a fluid flow through a pipe, idealized as a plug flow.
 </p>
 <h4>Main equation</h4>
 <p>
 The transport delay is computed using the one-dimensional wave equation
 without source or sink terms,
 <p align=\"center\" style=\"font-style:italic;\">
 &part;z(x,t)/&part;t + v(t) &part;z(x,t)/&part;x = 0,
 </p>
 <p>where <i>z(x,t)</i> is the spatial distribution as a function of time of any
 property <i>z</i> of the fluid.
 For the temperature propagation, <i>z </i>will be replaced by <i>T</i>.
 </p>
 <h4>Assumptions</h4>
 <p>
 This model is based on the following assumptions:
 </p>
 <ul>
 <li>
 Axial diffusion in water is assumed to be negligibe.
 </li>
 <li>
 The water temperature is assumed uniform in a cross section.
 </li>
 </ul>
 
-------- Corrected Code --------
<ul>
  <li>October 20, 2017, by Michael Wetter:<br/>
    Deleted various parameters and variables that were not used.<br/>
    Revised documentation to follow the guidelines.
  </li>
  <li>May 19, 2016 by Marcus Fuchs:<br/>
    Remove condition on <code>show_V_flow</code> for calculation of
    <code>V_flow</code> to conform with pedantic checking.
  </li>
  <li>October 10, 2015 by Marcus Fuchs:<br/>
    Copy Icon from KUL implementation and rename model.
  </li>
  <li>June 23, 2015 by Marcus Fuchs:<br/>
    First implementation.
  </li>
</ul>
<p>
  Model that computes the temperature propagation of a fluid flow
  through a pipe, idealized as a plug flow.
</p>
<h4>
  Main equation
</h4>
<p>
  The transport delay is computed using the one-dimensional wave
  equation without source or sink terms,
</p>
<p align=\"center\" style=\"font-style:italic;\">
  ∂z(x,t)/∂t + v(t) ∂z(x,t)/∂x = 0,
</p>
<p>
  where <i>z(x,t)</i> is the spatial distribution as a function of time
  of any property <i>z</i> of the fluid. For the temperature
  propagation, <i>z</i> will be replaced by <i>T</i>.
</p>
<h4>
  Assumptions
</h4>
<p>
  This model is based on the following assumptions:
</p>
<ul>
  <li>Axial diffusion in water is assumed to be negligibe.
  </li>
  <li>The water temperature is assumed uniform in a cross section.
  </li>
</ul>

-------- Errors --------
line 10 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/FMI/ExportContainers/HVACZones.mo ----
-------- HTML Code --------

 <p>
 Model that is used as a container for an HVAC system that is
 to be exported as an FMU and that serves multiple zones.
 </p>
 <h4>Typical use and important parameters</h4>
 <p>
 To use this model as a container for an FMU, simply extend
 from this model, rather than instantiate it,
 and add your HVAC system. By extending from this model, the top-level
 signal connectors on the right stay at the top-level, and hence
 will be visible at the FMI interface.
 The example
 <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.HVACZones\">
 AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.HVACZones</a>
 shows how a simple HVAC system that serves two rooms can be implemented and exported as
 an FMU.
 <!-- @include_Buildings
 The example
 <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.Validation.RoomHVAC\">
 AixLib.Fluid.FMI.ExportContainers.Validation.RoomHVAC</a>
 shows how such an FMU can be connected
 to a room model that has signal flow.
 -->
 </p>
 <p>
 The following two parameters need to be assigned by the user:
 Set <code>nZon</code> to the number of thermal zones to which the
 FMU will be connected.
 Set <code>nPorts</code> to the largest number of fluid ports
 that the thermal zones has. For example,
 if <code>nZon=2</code> and zone <i>1</i> has one inlet and one outlet
 (hence it has 2 ports),
 and zone <i>2</i> has one inlets and two outlets
 (hence it has 3 ports), then
 set <code>nPorts=3</code>. This will add more fluid ports than are needed
 for zone <i>1</i>, but this causes no overhead if they are not connected.
 </p>
 <p>
 The conversion between the fluid ports and signal ports is done
 in the HVAC adapter <code>hvacAda</code>.
 This adapter has a vector of fluid ports called <code>ports</code>.
 The supply and return air ducts, including any resistance model for the inlet
 diffusor or exhaust grill, need to be connected to these ports.
 Also, if a thermal zone has interzonal air exchange or air infiltration,
 these flows need to be connected to <code>ports</code>.
 This model outputs at the port <code>fluPor</code> the mass flow rate for
 each flow that is connected to <code>ports</code>, together with its
 temperature, water vapor mass fraction per total mass of the air (not per kg dry
 air), and trace substances. These quantities are always as if the flow
 enters the room, even if the flow is zero or negative.
 If a medium has no moisture, e.g., if <code>Medium.nXi=0</code>, or
 if it has no trace substances, e.g., if <code>Medium.nC=0</code>, then
 the output signal for these properties are removed.
 These quantities are always as if the flow
 enters the room, even if the flow is zero or negative.
 Thus, a thermal zone model that uses these signals to compute the
 heat added by the HVAC system need to implement an equation such as
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 Q<sub>sen</sub> = max(0, &#7745;<sub>sup</sub>) &nbsp; c<sub>p</sub> &nbsp; (T<sub>sup</sub> - T<sub>air,zon</sub>),
 </p>
 <p>
 where
 <i>Q<sub>sen</sub></i> is the sensible heat flow rate added to the thermal zone,
 <i>&#7745;<sub>sup</sub></i> is the supply air mass flow rate from
 the port <code>fluPor</code> (which is negative if it is an exhaust),
 <i>c<sub>p</sub></i> is the specific heat capacity at constant pressure,
 <i>T<sub>sup</sub></i> is the supply air temperature and
 <i>T<sub>air,zon</sub></i> is the zone air temperature.
 Note that without the <i>max(&middot;, &middot;)</i>, the energy
 balance would be wrong.
 </p>
 
 <p>
 The input signals of this model are the radiative temperature of each zone.
 The the zone air temperatures,
 the water vapor mass fractions per total mass of the air (unless <code>Medium.nXi=0</code>)
 and trace substances (unless <code>Medium.nC=0</code>) are obtained from the connector
 <code>fluPor.backward</code>.
 The outflowing fluid stream(s) at the port <code>ports</code> will be at the
 states obtained from <code>fluPor.backward</code>.
 For any given <i>i<sub>zon</sub> &isin; {1, ..., n<sub>zon</sub>}</i>,
 for each <i>i<sub>ports</sub> &isin; {1, ..., n<sub>ports</sub>}</i>
 all fluid streams at port <code>ports[i<sub>zon</sub>, i<sub>ports</sub>]</code> are at the same
 pressure.
 For convenience, the instance <code>hvacAda</code> also outputs the
 properties obtained from <code>fluPor.backward</code>. These can be used
 to connect a controller. The properties are available for each flow path in
 <code>fluPor.backward</code>. For a thermal zone with mixed air, these are
 all equal, while for a stratified room model, they can be different.
 </p>
 <p>
 See
 <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.HVACZones\">
 AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.HVACZones</a>
 for a model that uses this model.
 </p>
 <p>
 For models that only have one thermal zone connected to the HVAC system,
 use the simpler model
 <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.HVACZone\">
 AixLib.Fluid.FMI.ExportContainers.HVACZone</a>.
 </p>
 <h4>Assumption and limitations</h4>
 <p>
 The mass flow rates at <code>ports</code> sum to zero, hence this
 model conserves mass for each thermal zone.
 </p>
 <p>
 This model does not impose any pressure, other than,
 for any given <i>i<sub>zon</sub> &isin; {1, ..., n<sub>zon</sub>}</i> and
 for each <i>j,k &isin; {1, ..., n<sub>ports</sub>}</i>,
 setting the pressure of <code>ports[i<sub>zon</sub>, j].p = ports[i<sub>zon</sub>, k].p</code>
 to be the same.
 The reason is that setting a pressure can lead to non-physical system models,
 for example if a mass flow rate is imposed and the HVAC system is connected
 to a model that sets a pressure boundary condition such as
 <a href=\"modelica://AixLib.Fluid.Sources.Outside\">
 AixLib.Fluid.Sources.Outside</a>.
 Also, setting a pressure would make it impossible to use multiple instances
 of this model (one for each thermal zone) and build in Modelica an airflow network
 model with pressure driven mass flow rates.
 </p>
 <p>
 The model has no pressure drop. Hence, the pressure drop
 of an air diffuser or of an exhaust grill needs to be modelled
 in models that are connected to <code>ports</code>.
 </p>
 
 <ul>
 <li>
 January 18, 2019, by Jianjun Hu:<br/>
 Limited the media choice to moist air only.
 See <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1050\">#1050</a>.
 </li>
 <li>
 May 25, 2016, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Model that is used as a container for an HVAC system that is to be
  exported as an FMU and that serves multiple zones.
</p>
<h4>
  Typical use and important parameters
</h4>
<p>
  To use this model as a container for an FMU, simply extend from this
  model, rather than instantiate it, and add your HVAC system. By
  extending from this model, the top-level signal connectors on the
  right stay at the top-level, and hence will be visible at the FMI
  interface. The example <a href=
  \"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.HVACZones\">
  AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.HVACZones</a> shows
  how a simple HVAC system that serves two rooms can be implemented and
  exported as an FMU. <!-- @include_Buildings
 The example
 <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.Validation.RoomHVAC\">
 AixLib.Fluid.FMI.ExportContainers.Validation.RoomHVAC</a>
 shows how such an FMU can be connected
 to a room model that has signal flow.
 -->
</p>
<p>
  The following two parameters need to be assigned by the user: Set
  <code>nZon</code> to the number of thermal zones to which the FMU
  will be connected. Set <code>nPorts</code> to the largest number of
  fluid ports that the thermal zones has. For example, if
  <code>nZon=2</code> and zone <i>1</i> has one inlet and one outlet
  (hence it has 2 ports), and zone <i>2</i> has one inlets and two
  outlets (hence it has 3 ports), then set <code>nPorts=3</code>. This
  will add more fluid ports than are needed for zone <i>1</i>, but this
  causes no overhead if they are not connected.
</p>
<p>
  The conversion between the fluid ports and signal ports is done in
  the HVAC adapter <code>hvacAda</code>. This adapter has a vector of
  fluid ports called <code>ports</code>. The supply and return air
  ducts, including any resistance model for the inlet diffusor or
  exhaust grill, need to be connected to these ports. Also, if a
  thermal zone has interzonal air exchange or air infiltration, these
  flows need to be connected to <code>ports</code>. This model outputs
  at the port <code>fluPor</code> the mass flow rate for each flow that
  is connected to <code>ports</code>, together with its temperature,
  water vapor mass fraction per total mass of the air (not per kg dry
  air), and trace substances. These quantities are always as if the
  flow enters the room, even if the flow is zero or negative. If a
  medium has no moisture, e.g., if <code>Medium.nXi=0</code>, or if it
  has no trace substances, e.g., if <code>Medium.nC=0</code>, then the
  output signal for these properties are removed. These quantities are
  always as if the flow enters the room, even if the flow is zero or
  negative. Thus, a thermal zone model that uses these signals to
  compute the heat added by the HVAC system need to implement an
  equation such as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  Q<sub>sen</sub> = max(0, ṁ<sub>sup</sub>) &#160; c<sub>p</sub> &#160;
  (T<sub>sup</sub> - T<sub>air,zon</sub>),
</p>
<p>
  where <i>Q<sub>sen</sub></i> is the sensible heat flow rate added to
  the thermal zone, <i>ṁ<sub>sup</sub></i> is the supply air mass flow
  rate from the port <code>fluPor</code> (which is negative if it is an
  exhaust), <i>c<sub>p</sub></i> is the specific heat capacity at
  constant pressure, <i>T<sub>sup</sub></i> is the supply air
  temperature and <i>T<sub>air,zon</sub></i> is the zone air
  temperature. Note that without the <i>max(·, ·)</i>, the energy
  balance would be wrong.
</p>
<p>
  The input signals of this model are the radiative temperature of each
  zone. The the zone air temperatures, the water vapor mass fractions
  per total mass of the air (unless <code>Medium.nXi=0</code>) and
  trace substances (unless <code>Medium.nC=0</code>) are obtained from
  the connector <code>fluPor.backward</code>. The outflowing fluid
  stream(s) at the port <code>ports</code> will be at the states
  obtained from <code>fluPor.backward</code>. For any given
  <i>i<sub>zon</sub> ∈ {1, ..., n<sub>zon</sub>}</i>, for each
  <i>i<sub>ports</sub> ∈ {1, ..., n<sub>ports</sub>}</i> all fluid
  streams at port <code>ports[i<sub>zon</sub>,
  i<sub>ports</sub>]</code> are at the same pressure. For convenience,
  the instance <code>hvacAda</code> also outputs the properties
  obtained from <code>fluPor.backward</code>. These can be used to
  connect a controller. The properties are available for each flow path
  in <code>fluPor.backward</code>. For a thermal zone with mixed air,
  these are all equal, while for a stratified room model, they can be
  different.
</p>
<p>
  See <a href=
  \"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.HVACZones\">
  AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.HVACZones</a> for a
  model that uses this model.
</p>
<p>
  For models that only have one thermal zone connected to the HVAC
  system, use the simpler model <a href=
  \"modelica://AixLib.Fluid.FMI.ExportContainers.HVACZone\">AixLib.Fluid.FMI.ExportContainers.HVACZone</a>.
</p>
<h4>
  Assumption and limitations
</h4>
<p>
  The mass flow rates at <code>ports</code> sum to zero, hence this
  model conserves mass for each thermal zone.
</p>
<p>
  This model does not impose any pressure, other than, for any given
  <i>i<sub>zon</sub> ∈ {1, ..., n<sub>zon</sub>}</i> and for each
  <i>j,k ∈ {1, ..., n<sub>ports</sub>}</i>, setting the pressure of
  <code>ports[i<sub>zon</sub>, j].p = ports[i<sub>zon</sub>,
  k].p</code> to be the same. The reason is that setting a pressure can
  lead to non-physical system models, for example if a mass flow rate
  is imposed and the HVAC system is connected to a model that sets a
  pressure boundary condition such as <a href=
  \"modelica://AixLib.Fluid.Sources.Outside\">AixLib.Fluid.Sources.Outside</a>.
  Also, setting a pressure would make it impossible to use multiple
  instances of this model (one for each thermal zone) and build in
  Modelica an airflow network model with pressure driven mass flow
  rates.
</p>
<p>
  The model has no pressure drop. Hence, the pressure drop of an air
  diffuser or of an exhaust grill needs to be modelled in models that
  are connected to <code>ports</code>.
</p>
<ul>
  <li>January 18, 2019, by Jianjun Hu:<br/>
    Limited the media choice to moist air only. See <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1050\">#1050</a>.
  </li>
  <li>May 25, 2016, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 60 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/HeatPumps/Carnot_TCon.mo ----
-------- HTML Code --------

 <p>
 This is a model of a heat pump whose coefficient of performance COP changes
 with temperatures in the same way as the Carnot efficiency changes.
 The control input is the setpoint of the condenser leaving temperature, which
 is met exactly at steady state if the heat pump has sufficient capacity.
 </p>
 <p>
 The model allows to either specify the Carnot effectivness
 <i>&eta;<sub>Carnot,0</sub></i>, or
 a <i>COP<sub>0</sub></i>
 at the nominal conditions, together with
 the evaporator temperature <i>T<sub>eva,0</sub></i> and
 the condenser temperature <i>T<sub>con,0</sub></i>, in which
 case the model computes the Carnot effectivness as
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 &eta;<sub>Carnot,0</sub> =
   COP<sub>0</sub>
 &frasl;  (T<sub>con,0</sub> &frasl; (T<sub>con,0</sub>-T<sub>eva,0</sub>)).
 </p>
 <p>
 The heat pump COP is computed as the product
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   COP = &eta;<sub>Carnot,0</sub> COP<sub>Carnot</sub> &eta;<sub>PL</sub>,
 </p>
 <p>
 where <i>COP<sub>Carnot</sub></i> is the Carnot efficiency and
 <i>&eta;<sub>PL</sub></i> is a polynomial in heating part load ratio <i>y<sub>PL</sub></i>
 that can be used to take into account a change in <i>COP</i> at part load
 conditions.
 This polynomial has the form
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   &eta;<sub>PL</sub> = a<sub>1</sub> + a<sub>2</sub> y<sub>PL</sub> + a<sub>3</sub> y<sub>PL</sub><sup>2</sup> + ...
 </p>
 <p>
 where the coefficients <i>a<sub>i</sub></i>
 are declared by the parameter <code>a</code>.
 </p>
 <p>
 On the <code>Dynamics</code> tag, the model can be parametrized to compute a transient
 or steady-state response.
 The transient response of the model is computed using a first
 order differential equation for the evaporator and condenser fluid volumes.
 The heat pump outlet temperatures are equal to the temperatures of these lumped volumes.
 </p>
 <h4>Typical use and important parameters</h4>
 <p>
 When using this component, make sure that the condenser has sufficient mass flow rate.
 Based on the evaporator mass flow rate, temperature difference and the efficiencies,
 the model computes how much heat will be removed by to the evaporator.
 If the mass flow rate is too small, very low outlet temperatures can result, possibly below freezing.
 </p>
 <p>
 The condenser heat flow rate <code>QCon_flow_nominal</code> is used to assign
 the default value for the mass flow rates, which are used for the pressure drop
 calculations.
 It is also used to compute the part load efficiency.
 Hence, make sure that <code>QCon_flow_nominal</code> is set to a reasonable value.
 </p>
 <p>
 The maximum heating capacity is set by the parameter <code>QCon_flow_max</code>,
 which is by default set to infinity.
 </p>
 <p>
 The coefficient of performance depends on the
 evaporator and condenser leaving temperature
 since otherwise the second law of thermodynamics may be violated.
 </p>
 <h4>Notes</h4>
 <p>
 For a similar model that can be used as a chiller, see
 <a href=\"modelica://AixLib.Fluid.Chillers.Examples.Carnot_TEva\">
 AixLib.Fluid.Chillers.Examples.Carnot_TEva</a>.
 </p>
 
 <ul>
 <li>
 January 3, 2017, by Michael Wetter:<br/>
 Removed parameters
 <code>effInpEva</code> and <code>effInpCon</code>
 and updated documentation.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/497\">
 issue 497</a>.
 </li>
 <li>
 August 8, 2016, by Michael Wetter:<br/>
 Changed default temperature to compute COP to be the leaving temperature as
 use of the entering temperature can violate the 2nd law if the temperature
 lift is small.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/497\">
 Annex 60, issue 497</a>.
 </li>
 <li>
 November 25, 2015 by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This is a model of a heat pump whose coefficient of performance COP
  changes with temperatures in the same way as the Carnot efficiency
  changes. The control input is the setpoint of the condenser leaving
  temperature, which is met exactly at steady state if the heat pump
  has sufficient capacity.
</p>
<p>
  The model allows to either specify the Carnot effectivness
  <i>η<sub>Carnot,0</sub></i>, or a <i>COP<sub>0</sub></i> at the
  nominal conditions, together with the evaporator temperature
  <i>T<sub>eva,0</sub></i> and the condenser temperature
  <i>T<sub>con,0</sub></i>, in which case the model computes the Carnot
  effectivness as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  η<sub>Carnot,0</sub> = COP<sub>0</sub> ⁄ (T<sub>con,0</sub> ⁄
  (T<sub>con,0</sub>-T<sub>eva,0</sub>)).
</p>
<p>
  The heat pump COP is computed as the product
</p>
<p align=\"center\" style=\"font-style:italic;\">
  COP = η<sub>Carnot,0</sub> COP<sub>Carnot</sub> η<sub>PL</sub>,
</p>
<p>
  where <i>COP<sub>Carnot</sub></i> is the Carnot efficiency and
  <i>η<sub>PL</sub></i> is a polynomial in heating part load ratio
  <i>y<sub>PL</sub></i> that can be used to take into account a change
  in <i>COP</i> at part load conditions. This polynomial has the form
</p>
<p align=\"center\" style=\"font-style:italic;\">
  η<sub>PL</sub> = a<sub>1</sub> + a<sub>2</sub> y<sub>PL</sub> +
  a<sub>3</sub> y<sub>PL</sub><sup>2</sup> + ...
</p>
<p>
  where the coefficients <i>a<sub>i</sub></i> are declared by the
  parameter <code>a</code>.
</p>
<p>
  On the <code>Dynamics</code> tag, the model can be parametrized to
  compute a transient or steady-state response. The transient response
  of the model is computed using a first order differential equation
  for the evaporator and condenser fluid volumes. The heat pump outlet
  temperatures are equal to the temperatures of these lumped volumes.
</p>
<h4>
  Typical use and important parameters
</h4>
<p>
  When using this component, make sure that the condenser has
  sufficient mass flow rate. Based on the evaporator mass flow rate,
  temperature difference and the efficiencies, the model computes how
  much heat will be removed by to the evaporator. If the mass flow rate
  is too small, very low outlet temperatures can result, possibly below
  freezing.
</p>
<p>
  The condenser heat flow rate <code>QCon_flow_nominal</code> is used
  to assign the default value for the mass flow rates, which are used
  for the pressure drop calculations. It is also used to compute the
  part load efficiency. Hence, make sure that
  <code>QCon_flow_nominal</code> is set to a reasonable value.
</p>
<p>
  The maximum heating capacity is set by the parameter
  <code>QCon_flow_max</code>, which is by default set to infinity.
</p>
<p>
  The coefficient of performance depends on the evaporator and
  condenser leaving temperature since otherwise the second law of
  thermodynamics may be violated.
</p>
<h4>
  Notes
</h4>
<p>
  For a similar model that can be used as a chiller, see <a href=
  \"modelica://AixLib.Fluid.Chillers.Examples.Carnot_TEva\">AixLib.Fluid.Chillers.Examples.Carnot_TEva</a>.
</p>
<ul>
  <li>January 3, 2017, by Michael Wetter:<br/>
    Removed parameters <code>effInpEva</code> and
    <code>effInpCon</code> and updated documentation. This is for
    <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/497\">issue
    497</a>.
  </li>
  <li>August 8, 2016, by Michael Wetter:<br/>
    Changed default temperature to compute COP to be the leaving
    temperature as use of the entering temperature can violate the 2nd
    law if the temperature lift is small.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/497\">Annex 60,
    issue 497</a>.
  </li>
  <li>November 25, 2015 by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 17 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 25 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 35 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Sources/Outside_CpData.mo ----
-------- HTML Code --------

 <p>
 This model describes boundary conditions for
 pressure, enthalpy, and species concentration that can be obtained
 from weather data. The model is identical to
 <a href=\"modelica://AixLib.Fluid.Sources.Outside\">
 AixLib.Fluid.Sources.Outside</a>,
 except that it adds the wind pressure to the
 pressure at the fluid ports <code>ports</code>.
 </p>
 <p>
 The pressure <i>p</i> at the fluid ports is computed as:
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 p = p<sub>w</sub> + C<sub>p,act</sub> C<sub>s</sub> v<sup>2</sup> &rho; &frasl; 2,
 </p>
 <p>
 where <i>p<sub>w</sub></i> is the atmospheric pressure from the weather bus,
 <i>v</i> is the wind speed from the weather bus, and
 <i>&rho;</i> is the fluid density.
 </p>
 <p>
 The wind pressure coefficient <i>C<sub>p,act</sub></i> is a function of the surface wind incidence
 angle and is defined relative to the surface azimuth (normal to the surface is <i>0</i>).
 The wind incidence angle <code>incAng</code> is computed from the wind direction obtained from the weather file 
 with the surface azimuth <code>azi</code> as the base of the angle.
 The relation between the wind pressure coefficient <i>C<sub>p,act</sub></i> and the incidence angle <code>incAng</code>
 is defined by a cubic hermite interpolation of the users table input.
 Typical table values can be obtained from the &quot;AIVC guide to energy efficient ventilation&quot;,
 appendix 2 (1996). The default table is appendix 2, table 2.2, face 1.
 </p>
 <p>
 The wind speed modifier <i>C<sub>s</sub></i> can be used to incorporate the effect of the surroundings on the local wind speed.
 </p>
 <h4>Definition of angles</h4>
 <p>
 The angles <code>incAngSurNor</code> for the wind incidence angle relative to the surface normal
 are measured counter-clock wise.
 The figure below shows an example entry, which is also used in the model
 <a href=\"modelica://AixLib.Fluid.Sources.Examples.Outside_CpData_Specification\">
 AixLib.Fluid.Sources.Examples.Outside_CpData_Specification</a>.
 </p>
 <p align=\"center\"><img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/Sources/Outside_CpData.png\"/> </p>
 
 <p>
 The wind incidence angle and surface azimuths are defined as follows:
 The wind indicience angle is obtained directly from the weather data bus <code>weaBus.winDir</code>.
 This variable contains the data from the weather data file that was read, such as a TMY3 file.
 In accordance to TMY3, the data is as shown in the table below.
 </p>
 <table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\" style=\"border-collapse:collapse;\">
 <caption>Value of <code>winDir</code> if the wind blows from different directions.</caption>
 <tr><td></td>  <td style=\"text-align: center\">Wind from North:<br/>0 <br/> 0&deg;</td>  <td></td> </tr>
 <tr><td style=\"text-align: center\">Wind from West:<br/>3&pi;/2 <br/> 270&deg;</td>  <td></td>  <td style=\"text-align: center\">Wind from East:<br/>&pi;/2 <br/> 90&deg;</td></tr>
 <tr><td></td>  <td style=\"text-align: center\">Wind from South:<br/>&pi; <br/> 180&deg;</td>  <td></td></tr>
 </table>
 <p>
 For the surface azimuth <code>azi</code>, the specification from
 <a href=\"modelica://AixLib.Types.Azimuth\">AixLib.Types.Azimuth</a> is
 used, which is as shown in the table below.
 </p>
 
 <table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\" style=\"border-collapse:collapse;\">
 <caption>Value of <code>azi</code> if the exterior wall faces in the different directions.</caption>
 <tr><td></td>  <td style=\"text-align: center\">Wall facing north:<br> &pi; <br/> 180&deg;</td>  <td></td> </tr>
 <tr><td style=\"text-align: center\">Wall facing West:<br/> &pi;/2 <br/> 90&deg;</td>  <td></td>  <td style=\"text-align: center\">Wall facing east:<br/> 3&pi;/2 <br/> 270&deg;</td></tr>
 <tr><td></td>  <td style=\"text-align: center\">Wall facing South:<br/>0; <br/> 0&deg;</td>  <td></td></tr>
 </table>
 
 <h4>Related model</h4>
 <p>
 This model differs from <a href=\"modelica://AixLib.Fluid.Sources.Outside_CpLowRise\">
 AixLib.Fluid.Sources.Outside_CpLowRise</a> by the calculation of the wind pressure coefficient
 <i>C<sub>p,act</sub></i>.
 The wind pressure coefficient is defined by a user-defined table instead of a generalized equation
 such that it can be used for all building sizes and situations, for shielded buildings,
 and for buildings with non-rectangular shapes.
 </p>
 <p>
 <b>References</b>
 </p>
 <ul>
 <li>M. W. Liddament, 1996, <i>A guide to energy efficient ventilation</i>. AIVC Annex V. </li>
 </ul>
 
 <ul>
 <li>
 February 2, 2022, by Michael Wetter:<br/>
 Revised implementation.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1436\">IBPSA, #1436</a>.
 </li>
 <li>
 Apr 6, 2021, by Klaas De Jonge:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This model describes boundary conditions for pressure, enthalpy, and
  species concentration that can be obtained from weather data. The
  model is identical to <a href=
  \"modelica://AixLib.Fluid.Sources.Outside\">AixLib.Fluid.Sources.Outside</a>,
  except that it adds the wind pressure to the pressure at the fluid
  ports <code>ports</code>.
</p>
<p>
  The pressure <i>p</i> at the fluid ports is computed as:
</p>
<p align=\"center\" style=\"font-style:italic;\">
  p = p<sub>w</sub> + C<sub>p,act</sub> C<sub>s</sub> v<sup>2</sup> ρ ⁄
  2,
</p>
<p>
  where <i>p<sub>w</sub></i> is the atmospheric pressure from the
  weather bus, <i>v</i> is the wind speed from the weather bus, and
  <i>ρ</i> is the fluid density.
</p>
<p>
  The wind pressure coefficient <i>C<sub>p,act</sub></i> is a function
  of the surface wind incidence angle and is defined relative to the
  surface azimuth (normal to the surface is <i>0</i>). The wind
  incidence angle <code>incAng</code> is computed from the wind
  direction obtained from the weather file with the surface azimuth
  <code>azi</code> as the base of the angle. The relation between the
  wind pressure coefficient <i>C<sub>p,act</sub></i> and the incidence
  angle <code>incAng</code> is defined by a cubic hermite interpolation
  of the users table input. Typical table values can be obtained from
  the \"AIVC guide to energy efficient ventilation\", appendix 2 (1996).
  The default table is appendix 2, table 2.2, face 1.
</p>
<p>
  The wind speed modifier <i>C<sub>s</sub></i> can be used to
  incorporate the effect of the surroundings on the local wind speed.
</p>
<h4>
  Definition of angles
</h4>
<p>
  The angles <code>incAngSurNor</code> for the wind incidence angle
  relative to the surface normal are measured counter-clock wise. The
  figure below shows an example entry, which is also used in the model
  <a href=
  \"modelica://AixLib.Fluid.Sources.Examples.Outside_CpData_Specification\">
  AixLib.Fluid.Sources.Examples.Outside_CpData_Specification</a>.
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/Sources/Outside_CpData.png\">
</p>
<p>
  The wind incidence angle and surface azimuths are defined as follows:
  The wind indicience angle is obtained directly from the weather data
  bus <code>weaBus.winDir</code>. This variable contains the data from
  the weather data file that was read, such as a TMY3 file. In
  accordance to TMY3, the data is as shown in the table below.
</p>
<table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\"
style=\"border-collapse:collapse;\">
  <caption>
    Value of <code>winDir</code> if the wind blows from different
    directions.
  </caption>
  <tr>
    <td></td>
    <td style=\"text-align: center\">
      Wind from North:<br/>
      0<br/>
      0°
    </td>
    <td></td>
  </tr>
  <tr>
    <td style=\"text-align: center\">
      Wind from West:<br/>
      3π/2<br/>
      270°
    </td>
    <td></td>
    <td style=\"text-align: center\">
      Wind from East:<br/>
      π/2<br/>
      90°
    </td>
  </tr>
  <tr>
    <td></td>
    <td style=\"text-align: center\">
      Wind from South:<br/>
      π<br/>
      180°
    </td>
    <td></td>
  </tr>
</table>
<p>
  For the surface azimuth <code>azi</code>, the specification from
  <a href=\"modelica://AixLib.Types.Azimuth\">AixLib.Types.Azimuth</a> is
  used, which is as shown in the table below.
</p>
<table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\"
style=\"border-collapse:collapse;\">
  <caption>
    Value of <code>azi</code> if the exterior wall faces in the
    different directions.
  </caption>
  <tr>
    <td></td>
    <td style=\"text-align: center\">
      Wall facing north:<br/>
      π<br/>
      180°
    </td>
    <td></td>
  </tr>
  <tr>
    <td style=\"text-align: center\">
      Wall facing West:<br/>
      π/2<br/>
      90°
    </td>
    <td></td>
    <td style=\"text-align: center\">
      Wall facing east:<br/>
      3π/2<br/>
      270°
    </td>
  </tr>
  <tr>
    <td></td>
    <td style=\"text-align: center\">
      Wall facing South:<br/>
      0;<br/>
      0°
    </td>
    <td></td>
  </tr>
</table>
<h4>
  Related model
</h4>
<p>
  This model differs from <a href=
  \"modelica://AixLib.Fluid.Sources.Outside_CpLowRise\">AixLib.Fluid.Sources.Outside_CpLowRise</a>
  by the calculation of the wind pressure coefficient
  <i>C<sub>p,act</sub></i>. The wind pressure coefficient is defined by
  a user-defined table instead of a generalized equation such that it
  can be used for all building sizes and situations, for shielded
  buildings, and for buildings with non-rectangular shapes.
</p>
<p>
  <b>References</b>
</p>
<ul>
  <li>M. W. Liddament, 1996, <i>A guide to energy efficient
  ventilation</i>. AIVC Annex V.
  </li>
</ul>
<ul>
  <li>February 2, 2022, by Michael Wetter:<br/>
    Revised implementation.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1436\">IBPSA,
    #1436</a>.
  </li>
  <li>Apr 6, 2021, by Klaas De Jonge:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 51 column 2 - Warning: The summary attribute on the <table> element is obsolete in HTML5
line 63 column 2 - Warning: The summary attribute on the <table> element is obsolete in HTML5
line 14 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 43 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/BoundaryConditions/Validation/BESTEST/WD100.mo ----
-------- HTML Code --------

 <h4>WD100: Base Case</h4>
 <p>Weather data file : WD100.epw</p>
 <p><i>Table 1: Site Data for Weather file WD100.epw</i></p>
 <table summary=\"Site Data for Weather file WD100.epw\" cellspacing=\"2\" cellpadding=\"0\" border=\"1\"><tr>
 <td><p>Latitude</p></td>
 <td><p>39.833&deg; north</p></td>
 </tr>
 <tr>
 <td><p>Longitude</p></td>
 <td><p>104.65&deg; west</p></td>
 </tr>
 <tr>
 <td><p>Altitude</p></td>
 <td><p>1650 m</p></td>
 </tr>
 <tr>
 <td><p>Time Zone</p></td>
 <td><p>-7</p></td>
 </tr>
 </table>
 <p>This model is a template for all the other test cases.
 It allows to extrapolate all the weather data from the Reader TMY3 for a specific location, incliation and azimuth.
 The model
 <a href=\"modelica://AixLib.BoundaryConditions.Validation.IsotropicAndPerezDiffuseRadiation\">AixLib.BoundaryConditions.Validation.IsotropicAndPerezDiffuseRadiation</a>
 outputs radiation data using the available Isotropic and Perez methodlogies.
 The sky temperature is calculated using both the Horizontal radiation model,
 from data reader weaBusHorRad and the dew point temperature plus sky cover model from the datareader weaBusSkyCovDewTem.</p>
 
 <ul>
 <li>
 September 6, 2021, by Ettore Zanetti:<br/>
 Removed parameter <code>lat</code> as it is now obtained from the weather data bus.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1477\">IBPSA, #1477</a>.
 </li>
 <li>
 March 11, 2020, by Ettore Zanetti:<br/>
 First implementation.
 </li>
 <li>
 April 14, 2020, by Ettore Zanetti:<br/>
 Rework after comments from pull request
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/pull/1339\">#1339</a>.
 </li>
 <li>
 May 2, 2021, by Ettore Zanetti:<br/>
 Updated weather file as explained in <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1478\">#1478</a>.
 </li>
 <li>
 May 2, 2021, by Ettore Zanetti:<br/>
 Added altitude to parameters.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1477\">IBPSA, #1477</a>.
 </li>
 </ul>
 
-------- Corrected Code --------
<h4>
  WD100: Base Case
</h4>
<p>
  Weather data file : WD100.epw
</p>
<p>
  <i>Table 1: Site Data for Weather file WD100.epw</i>
</p>
<table summary=\"Site Data for Weather file WD100.epw\" cellspacing=\"2\"
cellpadding=\"0\" border=\"1\">
  <tr>
    <td>
      <p>
        Latitude
      </p>
    </td>
    <td>
      <p>
        39.833° north
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        Longitude
      </p>
    </td>
    <td>
      <p>
        104.65° west
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        Altitude
      </p>
    </td>
    <td>
      <p>
        1650 m
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        Time Zone
      </p>
    </td>
    <td>
      <p>
        -7
      </p>
    </td>
  </tr>
</table>
<p>
  This model is a template for all the other test cases. It allows to
  extrapolate all the weather data from the Reader TMY3 for a specific
  location, incliation and azimuth. The model <a href=
  \"modelica://AixLib.BoundaryConditions.Validation.IsotropicAndPerezDiffuseRadiation\">
  AixLib.BoundaryConditions.Validation.IsotropicAndPerezDiffuseRadiation</a>
  outputs radiation data using the available Isotropic and Perez
  methodlogies. The sky temperature is calculated using both the
  Horizontal radiation model, from data reader weaBusHorRad and the dew
  point temperature plus sky cover model from the datareader
  weaBusSkyCovDewTem.
</p>
<ul>
  <li>September 6, 2021, by Ettore Zanetti:<br/>
    Removed parameter <code>lat</code> as it is now obtained from the
    weather data bus.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1477\">IBPSA,
    #1477</a>.
  </li>
  <li>March 11, 2020, by Ettore Zanetti:<br/>
    First implementation.
  </li>
  <li>April 14, 2020, by Ettore Zanetti:<br/>
    Rework after comments from pull request <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/pull/1339\">#1339</a>.
  </li>
  <li>May 2, 2021, by Ettore Zanetti:<br/>
    Updated weather file as explained in <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1478\">#1478</a>.
  </li>
  <li>May 2, 2021, by Ettore Zanetti:<br/>
    Added altitude to parameters.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1477\">IBPSA,
    #1477</a>.
  </li>
</ul>

-------- Errors --------
line 5 column 2 - Warning: The summary attribute on the <table> element is obsolete in HTML5


---- AixLib/Fluid/Types.mo ----
-------- HTML Code --------

 
 <p>
 Enumeration to define the choice of valve flow coefficient
 (to be selected via choices menu):
 </p>
 
 <table summary=\"summary\"  border=\"1\">
 <tr><th>Enumeration</th>
     <th>Description</th></tr>
 
 <tr><td>OpPoint</td>
     <td>flow coefficient defined by ratio m_flow_nominal/sqrt(dp_nominal)</td></tr>
 
 <tr><td>Kv</td>
     <td>Kv (metric) flow coefficient</td></tr>
 
 <tr><td>Cv</td>
     <td>Cv (US) flow coefficient</td></tr>
 
 <tr><td>Av</td>
     <td>Av (metric) flow coefficient</td></tr>
 
 </table>
 
 <p>
 The details of the coefficients are explained in the
 <a href=\"modelica://Modelica.Fluid.UsersGuide.ComponentDefinition.ValveCharacteristics\">
 Users Guide</a>.
 </p>
 
 
 <p>
  Enumeration that defines the heat exchanger construction.
 </p>
 <p>
 The following heat exchanger configurations are available in this enumeration:
 </p>
 <table summary=\"summary\" border=\"1\">
 <tr><th>Enumeration</th><th>Description</th></tr>
 <tr><td>ParallelFlow</td><td>Parallel flow</td></tr>
 <tr><td>CounterFlow</td><td>Counter flow</td></tr>
 <tr><td>CrossFlowUnmixed</td><td>Cross flow, both streams unmixed</td></tr>
 <tr><td>CrossFlowStream1MixedStream2Unmixed</td><td>Cross flow, stream 1 mixed, stream 2 unmixed</td></tr>
 <tr><td>CrossFlowStream1UnmixedStream2Mixed</td><td>Cross flow, stream 1 unmixed, stream 2 mixed</td></tr>
 <tr><td>ConstantTemperaturePhaseChange</td><td>Constant temperature phase change in one stream</td></tr>
 </table>
 <p>
 Note that for a given heat exchanger, the
  <code>HeatExchangerConfiguration</code> is fixed. However, if the capacity
  flow rates change, then the
  <a href=\"modelica://AixLib.Fluid.Types.HeatExchangerFlowRegime\">
  AixLib.Fluid.Types.HeatExchangerFlowRegime</a> may change. For example,
  a counter flow heat exchanger has <code>HeatExchangerConfiguration=CounterFlow</code>,
  but the <a href=\"modelica://AixLib.Fluid.Types.HeatExchangerFlowRegime\">
  AixLib.Fluid.Types.HeatExchangerFlowRegime</a> can change to parallel flow if one of the two capacity flow rates reverts
  its direction.
  </p>
 
 <ul>
 <li>
 March 27, 2017, by Michael Wetter:<br/>
 Added <code>ConstantTemperaturePhaseChange</code>.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/694\">
 AixLib #694</a>.
 </li>
 <li>
 February 18, 2009, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
  Enumeration to define the heat exchanger flow regime.
 </p>
 <p>
 This enumeration defines for the current capacity flow rate the kind of
 heat transfer relation that will be used to compute the relation between
 effectiveness and Number of Transfer Units.
 </p>
 <p>
 The following heat exchanger flow regimes are available in this enumeration:
 </p>
 <table summary=\"summary\" border=\"1\">
 <tr><th>Enumeration</th><th>Description</th></tr>
 <tr><td>ParallelFlow</td><td>Parallel flow</td></tr>
 <tr><td>CounterFlow</td><td>Counter flow</td></tr>
 <tr><td>CrossFlowUnmixed</td><td>Cross flow, both streams unmixed</td></tr>
 <tr><td>CrossFlowCMinMixedCMaxUnmixed</td><td>Cross flow, CMin mixed,   CMax unmixed</td></tr>
 <tr><td>CrossFlowCMinUnmixedCMaxMixed</td><td>Cross flow, CMin unmixed, CMax mixed</td></tr>
 <tr><td>ConstantTemperaturePhaseChange</td><td>Constant temperature phase change in one stream</td></tr>
 </table>
 
 <ul>
 <li>
 March 27, 2017, by Michael Wetter:<br/>
 Added <code>ConstantTemperaturePhaseChange</code>.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/694\">
 AixLib #694</a>.
 </li>
 <li>
 February 18, 2009, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This type allows defining which type of input should be used for movers.
 This can either be
 </p>
 <ol>
 <li>
 a constant set point declared by a parameter,
 </li>
 <li>
 a series of possible set points that can be switched using an integer input, or
 </li>
 <li>
 a continuously variable set point.
 </li>
 </ol>
 
 <ul>
 <li>
 April 2, 2015, by Filip Jorissen:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This package contains type definitions.
 </p>
 
-------- Corrected Code --------
<p>
  Enumeration to define the choice of valve flow coefficient (to be
  selected via choices menu):
</p>
<table summary=\"summary\" border=\"1\">
  <tr>
    <th>
      Enumeration
    </th>
    <th>
      Description
    </th>
  </tr>
  <tr>
    <td>
      OpPoint
    </td>
    <td>
      flow coefficient defined by ratio m_flow_nominal/sqrt(dp_nominal)
    </td>
  </tr>
  <tr>
    <td>
      Kv
    </td>
    <td>
      Kv (metric) flow coefficient
    </td>
  </tr>
  <tr>
    <td>
      Cv
    </td>
    <td>
      Cv (US) flow coefficient
    </td>
  </tr>
  <tr>
    <td>
      Av
    </td>
    <td>
      Av (metric) flow coefficient
    </td>
  </tr>
</table>
<p>
  The details of the coefficients are explained in the <a href=
  \"modelica://Modelica.Fluid.UsersGuide.ComponentDefinition.ValveCharacteristics\">
  Users Guide</a>.
</p>
<p>
  Enumeration that defines the heat exchanger construction.
</p>
<p>
  The following heat exchanger configurations are available in this
  enumeration:
</p>
<table summary=\"summary\" border=\"1\">
  <tr>
    <th>
      Enumeration
    </th>
    <th>
      Description
    </th>
  </tr>
  <tr>
    <td>
      ParallelFlow
    </td>
    <td>
      Parallel flow
    </td>
  </tr>
  <tr>
    <td>
      CounterFlow
    </td>
    <td>
      Counter flow
    </td>
  </tr>
  <tr>
    <td>
      CrossFlowUnmixed
    </td>
    <td>
      Cross flow, both streams unmixed
    </td>
  </tr>
  <tr>
    <td>
      CrossFlowStream1MixedStream2Unmixed
    </td>
    <td>
      Cross flow, stream 1 mixed, stream 2 unmixed
    </td>
  </tr>
  <tr>
    <td>
      CrossFlowStream1UnmixedStream2Mixed
    </td>
    <td>
      Cross flow, stream 1 unmixed, stream 2 mixed
    </td>
  </tr>
  <tr>
    <td>
      ConstantTemperaturePhaseChange
    </td>
    <td>
      Constant temperature phase change in one stream
    </td>
  </tr>
</table>
<p>
  Note that for a given heat exchanger, the
  <code>HeatExchangerConfiguration</code> is fixed. However, if the
  capacity flow rates change, then the <a href=
  \"modelica://AixLib.Fluid.Types.HeatExchangerFlowRegime\">AixLib.Fluid.Types.HeatExchangerFlowRegime</a>
  may change. For example, a counter flow heat exchanger has
  <code>HeatExchangerConfiguration=CounterFlow</code>, but the <a href=
  \"modelica://AixLib.Fluid.Types.HeatExchangerFlowRegime\">AixLib.Fluid.Types.HeatExchangerFlowRegime</a>
  can change to parallel flow if one of the two capacity flow rates
  reverts its direction.
</p>
<ul>
  <li>March 27, 2017, by Michael Wetter:<br/>
    Added <code>ConstantTemperaturePhaseChange</code>.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/694\">AixLib
    #694</a>.
  </li>
  <li>February 18, 2009, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  Enumeration to define the heat exchanger flow regime.
</p>
<p>
  This enumeration defines for the current capacity flow rate the kind
  of heat transfer relation that will be used to compute the relation
  between effectiveness and Number of Transfer Units.
</p>
<p>
  The following heat exchanger flow regimes are available in this
  enumeration:
</p>
<table summary=\"summary\" border=\"1\">
  <tr>
    <th>
      Enumeration
    </th>
    <th>
      Description
    </th>
  </tr>
  <tr>
    <td>
      ParallelFlow
    </td>
    <td>
      Parallel flow
    </td>
  </tr>
  <tr>
    <td>
      CounterFlow
    </td>
    <td>
      Counter flow
    </td>
  </tr>
  <tr>
    <td>
      CrossFlowUnmixed
    </td>
    <td>
      Cross flow, both streams unmixed
    </td>
  </tr>
  <tr>
    <td>
      CrossFlowCMinMixedCMaxUnmixed
    </td>
    <td>
      Cross flow, CMin mixed, CMax unmixed
    </td>
  </tr>
  <tr>
    <td>
      CrossFlowCMinUnmixedCMaxMixed
    </td>
    <td>
      Cross flow, CMin unmixed, CMax mixed
    </td>
  </tr>
  <tr>
    <td>
      ConstantTemperaturePhaseChange
    </td>
    <td>
      Constant temperature phase change in one stream
    </td>
  </tr>
</table>
<ul>
  <li>March 27, 2017, by Michael Wetter:<br/>
    Added <code>ConstantTemperaturePhaseChange</code>.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/694\">AixLib
    #694</a>.
  </li>
  <li>February 18, 2009, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This type allows defining which type of input should be used for
  movers. This can either be
</p>
<ol>
  <li>a constant set point declared by a parameter,
  </li>
  <li>a series of possible set points that can be switched using an
  integer input, or
  </li>
  <li>a continuously variable set point.
  </li>
</ol>
<ul>
  <li>April 2, 2015, by Filip Jorissen:<br/>
    First implementation.
  </li>
</ul>
<p>
  This package contains type definitions.
</p>

-------- Errors --------
line 8 column 2 - Warning: The summary attribute on the <table> element is obsolete in HTML5


line 8 column 2 - Warning: The summary attribute on the <table> element is obsolete in HTML5


line 13 column 2 - Warning: The summary attribute on the <table> element is obsolete in HTML5


---- AixLib/Fluid/FixedResistances/Validation/PlugFlowPipes/PlugFlowULg.mo ----
-------- HTML Code --------

 <p>
 The example contains
 experimental data from a real district heating network.
 </p>
 <p>
 This model compares the results with the original Modelica Standard Library pipes.
 </p>
 <p>The pipes' temperatures are not initialized. Therefore, results of
 outflow temperature before approximately the first 10000 seconds should not be
 considered.
 </p>
 <h4>Test bench schematic</h4>
 <p><img alt=\"Schematic of test rig at ULg\"
 src=\"modelica://AixLib/Resources/Images/Fluid/FixedResistances/Validation/PlugFlowPipes/ULgTestBench.png\"/> </p>
 <h4>Calibration</h4>
 <p>
 There are some uncertainties about the heat loss coefficient between pipe and
 surrounding air as well as regarding the heat conductivity of the insulation
 material.
 With the <a href=\"modelica://AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.Data.PipeDataULg150801\">
 given data</a>, the length specific thermal resistance is <code>R = 2.164
 </code>((m K)/W), calculated as follows:
 </p>
 <p align=\"center\"style=\"font-style:italic;\">
 R=((1/(2*pipe.kIns)*log((0.0603+2*pipe.dIns)/(0.0603)))+1/(5*(0.0603+2*pipe.dIns)))/Modelica.Constants.pi</p>
 <p align=\"center\"style=\"font-style:italic;\">
 U = 1/R = 0.462 W/(m K)</p>
 
 <ul>
 <li>
 March 7, 2020, by Michael Wetter:<br/>
 Replaced measured data from specification in Modelica file to external table,
 as this reduces the computing time.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1289\"> #1289</a>.
 </li>
 <li>
 November 24, 2016 by Bram van der Heijde:<br/>Add pipe thickness for wall
 capacity calculation and expand documentation section.</li>
 <li>April 2, 2016 by Bram van der Heijde:<br/>Change thermal conductivity and
 put boundary condition in K.
 </li>
 <li>Januar 26, 2016 by Carles Ribas:<br/>First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  The example contains experimental data from a real district heating
  network.
</p>
<p>
  This model compares the results with the original Modelica Standard
  Library pipes.
</p>
<p>
  The pipes' temperatures are not initialized. Therefore, results of
  outflow temperature before approximately the first 10000 seconds
  should not be considered.
</p>
<h4>
  Test bench schematic
</h4>
<p>
  <img alt=\"Schematic of test rig at ULg\" src=
  \"modelica://AixLib/Resources/Images/Fluid/FixedResistances/Validation/PlugFlowPipes/ULgTestBench.png\">
</p>
<h4>
  Calibration
</h4>
<p>
  There are some uncertainties about the heat loss coefficient between
  pipe and surrounding air as well as regarding the heat conductivity
  of the insulation material. With the <a href=
  \"modelica://AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.Data.PipeDataULg150801\">
  given data</a>, the length specific thermal resistance is <code>R =
  2.164</code> ((m K)/W), calculated as follows:
</p>
<p align=\"center\" style=\"font-style:italic;\">
  R=((1/(2*pipe.kIns)*log((0.0603+2*pipe.dIns)/(0.0603)))+1/(5*(0.0603+2*pipe.dIns)))/Modelica.Constants.pi
</p>
<p align=\"center\" style=\"font-style:italic;\">
  U = 1/R = 0.462 W/(m K)
</p>
<ul>
  <li>March 7, 2020, by Michael Wetter:<br/>
    Replaced measured data from specification in Modelica file to
    external table, as this reduces the computing time.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1289\">#1289</a>.
  </li>
  <li>November 24, 2016 by Bram van der Heijde:<br/>
    Add pipe thickness for wall capacity calculation and expand
    documentation section.
  </li>
  <li>April 2, 2016 by Bram van der Heijde:<br/>
    Change thermal conductivity and put boundary condition in K.
  </li>
  <li>Januar 26, 2016 by Carles Ribas:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 25 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 27 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/HeatExchangers/ActiveBeams/UsersGuide.mo ----
-------- HTML Code --------

<p>
This package contains models of active beams.
Active beams are devices used for heating, cooling and ventilation of spaces.
A schematic diagram of an active beam unit is given below.
</p>
<p align=\"center\" >
<img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/HeatExchangers/ActiveBeams/schematicAB.png\" border=\"1\"/>
</p>
<p>
The active beam unit consists of a primary air plenum, a mixing chamber, a heat exchanger (coil) and several nozzles.
Typically, an air-handling unit supplies primary air to the active beams.
The primary air is discharged to the mixing chamber through the nozzles.
This generates a low-pressure region which induces air from the room up through the heat exchanger,
where hot or cold water is circulating.
The conditioned induced air is then mixed with primary air, and the mixture descents back to the space.
</p>
<p>
This package contains two models. The model
<a href=\"modelica://AixLib.Fluid.HeatExchangers.ActiveBeams.Cooling\">
AixLib.Fluid.HeatExchangers.ActiveBeams.Cooling</a>
is for cooling only, while the model
<a href=\"modelica://AixLib.Fluid.HeatExchangers.ActiveBeams.CoolingAndHeating\">
AixLib.Fluid.HeatExchangers.ActiveBeams.CoolingAndHeating</a>
has two water streams, one for heating and one for cooling.
</p>

<h4>Model equations for cooling</h4>
<p>
The performance of the model
<a href=\"modelica://AixLib.Fluid.HeatExchangers.ActiveBeams.Cooling\">
AixLib.Fluid.HeatExchangers.ActiveBeams.Cooling</a>
is computed based on manufacturer data
specified in the package
<a href=\"modelica://AixLib.Fluid.HeatExchangers.ActiveBeams.Data\">
AixLib.Fluid.HeatExchangers.ActiveBeams.Data</a>.
</p>
<p>
For off-design conditions, the performance is adjusted using modification factors
that account for changes in water flow rate,
primary air flow rate and temperature difference.
The total heat flow rate of the active beam unit is the sum of the heat flow rate provided by the primary air supply
<i>Q<sub>sa</sub></i> and the cooling heat flow rate provided by the beam convector <i>Q<sub>c,Beam</sub></i>
which injects room air and mixes it with the primary air.
</p>
<p>
The heat flow rate
<i>Q<sub>sa</sub> </i> is delivered to a thermal zone
through the fluid ports, while the heat flow rate from the convector <i>Q<sub>c,Beam</sub></i>
is coupled directly to the heat port.
See for example
<a href=\"modelica://AixLib.Fluid.HeatExchangers.ActiveBeams.Examples.CoolingOnly\">
AixLib.Fluid.HeatExchangers.ActiveBeams.Examples.CoolingOnly</a>
for how to connect these heat flow rates to a control volume.
</p>
<p>
The primary air contribution is
</p>
<p align=\"center\" style=\"font-style:italic;\">
  Q<sub>sa</sub> = &#7745;<sub>sa</sub> c<sub>p,sa</sub> (T<sub>sa</sub>-T<sub>z</sub>)
</p>
<p>
where <i>&#7745;<sub>sa</sub></i> is the primary air mass flow rate,
<i>c<sub>p,sa</sub></i> is the air specific heat capacity,
<i>T<sub>sa</sub></i> is the primary air temperature
and <i>T<sub>z</sub></i> is the zone air temperature.
</p>
<p>
The heat flow rate of the beam convector <i>Q<sub>c,Beam</sub></i> is determined using
the rated capacity which is modified by three separate functions as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  Q<sub>c,Beam</sub> = Q<sub>c,nominal</sub>
f<sub>&#916;T</sub> ( &#916;T<sub>c</sub> &frasl; &#916;T<sub>c,nominal</sub> )
f<sub>sa</sub>( &#7745;<sub>sa</sub> &frasl; &#7745;<sub>sa,nominal</sub> )
f<sub>w</sub>( &#7745;<sub>c,w</sub> ),
</p>
<p>
the modification factors are as follows:
The modification factor <i>f<sub>&#916;T</sub>(&middot;)</i>
describes how the capacity is adjusted to account for the temperature difference
between the zone air and the water entering the convector.
The independent variable is the ratio between the current temperature difference
<i>&#916;T<sub>c</sub></i> and the temperature difference used to rate beam performance <i>&#916;T<sub>c,nominal</sub></i>.
The temperature difference is
</p>
<p align=\"center\" style=\"font-style:italic;\">
    &#916;T<sub>c</sub> = T<sub>cw</sub>-T<sub>z</sub>,
</p>
<p>
where <i>T<sub>cw</sub></i> is the chilled water temperature entering the convector.

The modification factor <i>f<sub>sa</sub>(&middot;)</i> adjusts the cooling capacity to account for varying primary air flow rate.
The independent variable is the ratio between the current primary air flow rate <i>&#7745;<sub>sa</sub></i>
and the nominal air flow rate used to rate the beam performance.

The modification factor <i>f<sub>w</sub>(&middot;)</i> adjusts the cooling capacity for changes in water flow rate through the convector.
The independent variable is the ratio between the current water flow rate <i>&#7745;<sub>w</sub></i>
and the nominal water flow rate used to rate the beam performance.
</p>

<h4>Model equations for heating</h4>
<p>
The performance of the model
<a href=\"modelica://AixLib.Fluid.HeatExchangers.ActiveBeams.CoolingAndHeating\">
AixLib.Fluid.HeatExchangers.ActiveBeams.CoolingAndHeating</a>
is computed identical to the above described model that only provides cooling,
with the exception that this model contains an additional water stream that
can be used to provide heating.
</p>
<p>
For the heating water stream, the temperature difference <i><code>&#916;</code>T<sub>h</sub></i>
used for the calculation of the modification factor <i>f<sub><code>&#916;</code>T</sub>(&middot;)</i> is
</p>
<p align=\"center\" style=\"font-style:italic;\">
&#916;T<sub>h</sub> = T<sub>hw</sub>-T<sub>z</sub>,
</p>
<p>
where <i>T<sub>hw</sub></i> is the hot water temperature entering the convector in heating mode
and <i>T<sub>z</sub></i> is the zone air temperature.
</p>

<h4>Dynamics</h4>
<p>
The model can be configured to be steady-state or dynamic.
If configured as dynamic, then a dynamic conservation equation is applied to the water streams
for heating and for cooling.
However, because the capacity of the beam depends on its inlet temperature, and is independent of the
outlet temperature, the heat transferred
to the room at the port <code>heaPor.Q_flow</code>, as well as the heat added to or removed from the
water streams, will instantaneously change.
The only dynamic responses are the water outlet temperatures, which change with a first
order response, parameterized with the time constant <code>tau</code>.
</p>

<h4>Energy balance</h4>
<p>
All heat flow rate that is added to or extracted from the room is transmitted through the heat port
<code>heaPor</code>. Hence, this model does not cool the supply air between the ports
<code>air_a</code> and <code>air_b</code>. Rather, it adds this heat flow rate
to the heat port <code>heaPor</code>.
The rationale for this implementation is that the beam transfers heat by convection directly to the room, and
by induction of room air into the supply air. As this split of heat flow rate is generally not known,
and because the amount of inducted air is also unknown,
it was decided to transfer all heat through the heat port <code>heaPor</code>.
This also avoids having to add an extra air flow path for the air induced from the room.
</p>

-------- Corrected Code --------
<p>
  This package contains models of active beams. Active beams are
  devices used for heating, cooling and ventilation of spaces. A
  schematic diagram of an active beam unit is given below.
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/HeatExchangers/ActiveBeams/schematicAB.png\"
  border=\"1\">
</p>
<p>
  The active beam unit consists of a primary air plenum, a mixing
  chamber, a heat exchanger (coil) and several nozzles. Typically, an
  air-handling unit supplies primary air to the active beams. The
  primary air is discharged to the mixing chamber through the nozzles.
  This generates a low-pressure region which induces air from the room
  up through the heat exchanger, where hot or cold water is
  circulating. The conditioned induced air is then mixed with primary
  air, and the mixture descents back to the space.
</p>
<p>
  This package contains two models. The model <a href=
  \"modelica://AixLib.Fluid.HeatExchangers.ActiveBeams.Cooling\">AixLib.Fluid.HeatExchangers.ActiveBeams.Cooling</a>
  is for cooling only, while the model <a href=
  \"modelica://AixLib.Fluid.HeatExchangers.ActiveBeams.CoolingAndHeating\">
  AixLib.Fluid.HeatExchangers.ActiveBeams.CoolingAndHeating</a> has two
  water streams, one for heating and one for cooling.
</p>
<h4>
  Model equations for cooling
</h4>
<p>
  The performance of the model <a href=
  \"modelica://AixLib.Fluid.HeatExchangers.ActiveBeams.Cooling\">AixLib.Fluid.HeatExchangers.ActiveBeams.Cooling</a>
  is computed based on manufacturer data specified in the package
  <a href=
  \"modelica://AixLib.Fluid.HeatExchangers.ActiveBeams.Data\">AixLib.Fluid.HeatExchangers.ActiveBeams.Data</a>.
</p>
<p>
  For off-design conditions, the performance is adjusted using
  modification factors that account for changes in water flow rate,
  primary air flow rate and temperature difference. The total heat flow
  rate of the active beam unit is the sum of the heat flow rate
  provided by the primary air supply <i>Q<sub>sa</sub></i> and the
  cooling heat flow rate provided by the beam convector
  <i>Q<sub>c,Beam</sub></i> which injects room air and mixes it with
  the primary air.
</p>
<p>
  The heat flow rate <i>Q<sub>sa</sub></i> is delivered to a thermal
  zone through the fluid ports, while the heat flow rate from the
  convector <i>Q<sub>c,Beam</sub></i> is coupled directly to the heat
  port. See for example <a href=
  \"modelica://AixLib.Fluid.HeatExchangers.ActiveBeams.Examples.CoolingOnly\">
  AixLib.Fluid.HeatExchangers.ActiveBeams.Examples.CoolingOnly</a> for
  how to connect these heat flow rates to a control volume.
</p>
<p>
  The primary air contribution is
</p>
<p align=\"center\" style=\"font-style:italic;\">
  Q<sub>sa</sub> = ṁ<sub>sa</sub> c<sub>p,sa</sub>
  (T<sub>sa</sub>-T<sub>z</sub>)
</p>
<p>
  where <i>ṁ<sub>sa</sub></i> is the primary air mass flow rate,
  <i>c<sub>p,sa</sub></i> is the air specific heat capacity,
  <i>T<sub>sa</sub></i> is the primary air temperature and
  <i>T<sub>z</sub></i> is the zone air temperature.
</p>
<p>
  The heat flow rate of the beam convector <i>Q<sub>c,Beam</sub></i> is
  determined using the rated capacity which is modified by three
  separate functions as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  Q<sub>c,Beam</sub> = Q<sub>c,nominal</sub> f<sub>ΔT</sub> (
  ΔT<sub>c</sub> ⁄ ΔT<sub>c,nominal</sub> ) f<sub>sa</sub>(
  ṁ<sub>sa</sub> ⁄ ṁ<sub>sa,nominal</sub> ) f<sub>w</sub>(
  ṁ<sub>c,w</sub> ),
</p>
<p>
  the modification factors are as follows: The modification factor
  <i>f<sub>ΔT</sub>(·)</i> describes how the capacity is adjusted to
  account for the temperature difference between the zone air and the
  water entering the convector. The independent variable is the ratio
  between the current temperature difference <i>ΔT<sub>c</sub></i> and
  the temperature difference used to rate beam performance
  <i>ΔT<sub>c,nominal</sub></i>. The temperature difference is
</p>
<p align=\"center\" style=\"font-style:italic;\">
  ΔT<sub>c</sub> = T<sub>cw</sub>-T<sub>z</sub>,
</p>
<p>
  where <i>T<sub>cw</sub></i> is the chilled water temperature entering
  the convector. The modification factor <i>f<sub>sa</sub>(·)</i>
  adjusts the cooling capacity to account for varying primary air flow
  rate. The independent variable is the ratio between the current
  primary air flow rate <i>ṁ<sub>sa</sub></i> and the nominal air flow
  rate used to rate the beam performance. The modification factor
  <i>f<sub>w</sub>(·)</i> adjusts the cooling capacity for changes in
  water flow rate through the convector. The independent variable is
  the ratio between the current water flow rate <i>ṁ<sub>w</sub></i>
  and the nominal water flow rate used to rate the beam performance.
</p>
<h4>
  Model equations for heating
</h4>
<p>
  The performance of the model <a href=
  \"modelica://AixLib.Fluid.HeatExchangers.ActiveBeams.CoolingAndHeating\">
  AixLib.Fluid.HeatExchangers.ActiveBeams.CoolingAndHeating</a> is
  computed identical to the above described model that only provides
  cooling, with the exception that this model contains an additional
  water stream that can be used to provide heating.
</p>
<p>
  For the heating water stream, the temperature difference
  <i><code>Δ</code>T<sub>h</sub></i> used for the calculation of the
  modification factor <i>f<sub><code>Δ</code>T</sub>(·)</i> is
</p>
<p align=\"center\" style=\"font-style:italic;\">
  ΔT<sub>h</sub> = T<sub>hw</sub>-T<sub>z</sub>,
</p>
<p>
  where <i>T<sub>hw</sub></i> is the hot water temperature entering the
  convector in heating mode and <i>T<sub>z</sub></i> is the zone air
  temperature.
</p>
<h4>
  Dynamics
</h4>
<p>
  The model can be configured to be steady-state or dynamic. If
  configured as dynamic, then a dynamic conservation equation is
  applied to the water streams for heating and for cooling. However,
  because the capacity of the beam depends on its inlet temperature,
  and is independent of the outlet temperature, the heat transferred to
  the room at the port <code>heaPor.Q_flow</code>, as well as the heat
  added to or removed from the water streams, will instantaneously
  change. The only dynamic responses are the water outlet temperatures,
  which change with a first order response, parameterized with the time
  constant <code>tau</code>.
</p>
<h4>
  Energy balance
</h4>
<p>
  All heat flow rate that is added to or extracted from the room is
  transmitted through the heat port <code>heaPor</code>. Hence, this
  model does not cool the supply air between the ports
  <code>air_a</code> and <code>air_b</code>. Rather, it adds this heat
  flow rate to the heat port <code>heaPor</code>. The rationale for
  this implementation is that the beam transfers heat by convection
  directly to the room, and by induction of room air into the supply
  air. As this split of heat flow rate is generally not known, and
  because the amount of inducted air is also unknown, it was decided to
  transfer all heat through the heat port <code>heaPor</code>. This
  also avoids having to add an extra air flow path for the air induced
  from the room.
</p>

-------- Errors --------
line 7 column 1 - Warning: <p> attribute "align" not allowed for HTML5
line 59 column 1 - Warning: <p> attribute "align" not allowed for HTML5
line 72 column 1 - Warning: <p> attribute "align" not allowed for HTML5
line 87 column 1 - Warning: <p> attribute "align" not allowed for HTML5
line 115 column 1 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Chillers/BaseClasses/Carnot.mo ----
-------- HTML Code --------

 <p>
 This is the base class for the Carnot chiller and the Carnot heat pump
 whose coefficient of performance COP changes
 with temperatures in the same way as the Carnot efficiency changes.
 </p>
 <p>
 The model allows to either specify the Carnot effectivness
 <i>&eta;<sub>Carnot,0</sub></i>, or
 a <i>COP<sub>0</sub></i>
 at the nominal conditions, together with
 the evaporator temperature <i>T<sub>eva,0</sub></i> and
 the condenser temperature <i>T<sub>con,0</sub></i>, in which
 case the model computes the Carnot effectivness as
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 &eta;<sub>Carnot,0</sub> =
   COP<sub>0</sub>
 &frasl;  (T<sub>use,0</sub> &frasl; (T<sub>con,0</sub>-T<sub>eva,0</sub>)),
 </p>
 <p>
 where
 <i>T<sub>use</sub></i> is the temperature of the the useful heat,
 e.g., the evaporator temperature for a chiller or the condenser temperature
 for a heat pump.
 </p>
 <p>
 The COP is computed as the product
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   COP = &eta;<sub>Carnot,0</sub> COP<sub>Carnot</sub> &eta;<sub>PL</sub>,
 </p>
 <p>
 where <i>COP<sub>Carnot</sub></i> is the Carnot efficiency and
 <i>&eta;<sub>PL</sub></i> is the part load efficiency, expressed using
 a polynomial.
 This polynomial has the form
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   &eta;<sub>PL</sub> = a<sub>1</sub> + a<sub>2</sub> y + a<sub>3</sub> y<sup>2</sup> + ...
 </p>
 <p>
 where <i>y &isin; [0, 1]</i> is
 either the part load for cooling in case of a chiller, or the part load of heating in
 case of a heat pump, and the coefficients <i>a<sub>i</sub></i>
 are declared by the parameter <code>a</code>.
 </p>
 <h4>Implementation</h4>
 <p>
 To make this base class applicable to chiller or heat pumps, it uses
 the boolean constant <code>COP_is_for_cooling</code>.
 Depending on its value, the equations for the coefficient of performance
 and the part load ratio are set up.
 </p>
 
 <ul>
 <li>
 April 14, 2020, by Michael Wetter:<br/>
 Changed <code>homotopyInitialization</code> to a constant.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1341\">IBPSA, #1341</a>.
 </li>
 <li>
 September 12, 2019, by Michael Wetter:<br/>
 Corrected value of <code>evaluate_etaPL</code> and how it is used.
 This correction only affects protected variables and does not affect the results.<br/>
 This is for <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1200\">
 #1200</a>.
 </li>
 <li>
 June 16, 2017, by Michael Wetter:<br/>
 Added temperature difference between fluids in condenser and evaporator
 for computation of nominal COP and effectiveness.<br/>
 This is for <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/698\">
 #698</a>.
 </li>
 <li>
 March 28, 2017, by Felix Buenning:<br/>
 Added temperature difference between fluids in condenser and evaporator.
 The difference is based on discussions with Emerson Climate Technologies.<br/>
 This is for <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/698\">
 #698</a>.
 </li>
 <li>
 January 2, 2017, by Filip Jorissen:<br/>
 Removed option for choosing what temperature
 should be used to compute the Carnot efficiency.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/497\">
 issue 497</a>.
 </li>
 <li>
 January 26, 2016, by Michael Wetter:<br/>
 First implementation of this base class.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This is the base class for the Carnot chiller and the Carnot heat
  pump whose coefficient of performance COP changes with temperatures
  in the same way as the Carnot efficiency changes.
</p>
<p>
  The model allows to either specify the Carnot effectivness
  <i>η<sub>Carnot,0</sub></i>, or a <i>COP<sub>0</sub></i> at the
  nominal conditions, together with the evaporator temperature
  <i>T<sub>eva,0</sub></i> and the condenser temperature
  <i>T<sub>con,0</sub></i>, in which case the model computes the Carnot
  effectivness as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  η<sub>Carnot,0</sub> = COP<sub>0</sub> ⁄ (T<sub>use,0</sub> ⁄
  (T<sub>con,0</sub>-T<sub>eva,0</sub>)),
</p>
<p>
  where <i>T<sub>use</sub></i> is the temperature of the the useful
  heat, e.g., the evaporator temperature for a chiller or the condenser
  temperature for a heat pump.
</p>
<p>
  The COP is computed as the product
</p>
<p align=\"center\" style=\"font-style:italic;\">
  COP = η<sub>Carnot,0</sub> COP<sub>Carnot</sub> η<sub>PL</sub>,
</p>
<p>
  where <i>COP<sub>Carnot</sub></i> is the Carnot efficiency and
  <i>η<sub>PL</sub></i> is the part load efficiency, expressed using a
  polynomial. This polynomial has the form
</p>
<p align=\"center\" style=\"font-style:italic;\">
  η<sub>PL</sub> = a<sub>1</sub> + a<sub>2</sub> y + a<sub>3</sub>
  y<sup>2</sup> + ...
</p>
<p>
  where <i>y ∈ [0, 1]</i> is either the part load for cooling in case
  of a chiller, or the part load of heating in case of a heat pump, and
  the coefficients <i>a<sub>i</sub></i> are declared by the parameter
  <code>a</code>.
</p>
<h4>
  Implementation
</h4>
<p>
  To make this base class applicable to chiller or heat pumps, it uses
  the boolean constant <code>COP_is_for_cooling</code>. Depending on
  its value, the equations for the coefficient of performance and the
  part load ratio are set up.
</p>
<ul>
  <li>April 14, 2020, by Michael Wetter:<br/>
    Changed <code>homotopyInitialization</code> to a constant.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1341\">IBPSA,
    #1341</a>.
  </li>
  <li>September 12, 2019, by Michael Wetter:<br/>
    Corrected value of <code>evaluate_etaPL</code> and how it is used.
    This correction only affects protected variables and does not
    affect the results.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1200\">#1200</a>.
  </li>
  <li>June 16, 2017, by Michael Wetter:<br/>
    Added temperature difference between fluids in condenser and
    evaporator for computation of nominal COP and effectiveness.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/698\">#698</a>.
  </li>
  <li>March 28, 2017, by Felix Buenning:<br/>
    Added temperature difference between fluids in condenser and
    evaporator. The difference is based on discussions with Emerson
    Climate Technologies.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/698\">#698</a>.
  </li>
  <li>January 2, 2017, by Filip Jorissen:<br/>
    Removed option for choosing what temperature should be used to
    compute the Carnot efficiency. This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/497\">issue 497</a>.
  </li>
  <li>January 26, 2016, by Michael Wetter:<br/>
    First implementation of this base class.
  </li>
</ul>

-------- Errors --------
line 16 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 30 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 39 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Movers/Validation/PowerSimplified.mo ----
-------- HTML Code --------

 <p>
 This example compares the power consumed by pumps that
 take three different control signals.
 Each pump has identical mass flow rate and pressure rise.
 </p>
 <p>
 Note that for the instances
 <a href=\"modelica://AixLib.Fluid.Movers.FlowControlled_dp\">
 AixLib.Fluid.Movers.FlowControlled_dp</a>
 and
 <a href=\"modelica://AixLib.Fluid.Movers.FlowControlled_m_flow\">
 AixLib.Fluid.Movers.FlowControlled_m_flow</a>,
 we had to assign the efficiencies (otherwise the default constant
 efficiency of <i>0.7</i> would have been used).
 In these models, the power consumption is computed
 using similarity laws, but using the mass flow rate as opposed
 to the speed, because speed is not known in these two models.
 This is an approximation at operating points in which
 the speed is different from the nominal speed <code>N_nominal</code>
 because similarity laws are valid for speed and not for
 mass flow rate.
 </p>
 <p>
 The figure below shows the approximation error for the
 power calculation where the speed <i>N<sub>rpm</sub></i> differs from
 the nominal speed <i>N<sub>nominal</sub></i>.
 </p>
 <p align=\"center\">
 <img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/Movers/Validation/PowerSimplified.png\"/>
 </p>
 
 <ul>
 <li>
 October 15, 2021, by Hongxiang Fu:<br/>
 Fixed the image in the documentation which was cut off
 at the <i>y</i>-axis. This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1533\">IBPSA, #1533</a>.
 </li>
 <li>
 March 11, 2016, by Michael Wetter:<br/>
 Revised implementation by assigning the data record directly in the
 instances <code>pump_dp</code> and <code>pump_m_flow</code>, because
 using a <code>parameter</code> and assigning this <code>parameter</code> leads
 in OpenModelica to the error message
 <code>expected subtype of record AixLib.Fluid.Movers.Data.Generic</code>.
 </li>
 <li>
 March 2, 2016, by Filip Jorissen:<br/>
 Revised implementation for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/417\">#417</a>.
 </li>
 <li>
 November 5, 2015, by Michael Wetter:<br/>
 Changed parameters since the power is no longer a parameter for the movers
 that take mass flow rate or head as an input.
 This is for
 <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/457\">issue 457</a>.
 </li>
 <li>
 November 22, 2014, by Michael Wetter:<br/>
 Revised implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This example compares the power consumed by pumps that take three
  different control signals. Each pump has identical mass flow rate and
  pressure rise.
</p>
<p>
  Note that for the instances <a href=
  \"modelica://AixLib.Fluid.Movers.FlowControlled_dp\">AixLib.Fluid.Movers.FlowControlled_dp</a>
  and <a href=
  \"modelica://AixLib.Fluid.Movers.FlowControlled_m_flow\">AixLib.Fluid.Movers.FlowControlled_m_flow</a>,
  we had to assign the efficiencies (otherwise the default constant
  efficiency of <i>0.7</i> would have been used). In these models, the
  power consumption is computed using similarity laws, but using the
  mass flow rate as opposed to the speed, because speed is not known in
  these two models. This is an approximation at operating points in
  which the speed is different from the nominal speed
  <code>N_nominal</code> because similarity laws are valid for speed
  and not for mass flow rate.
</p>
<p>
  The figure below shows the approximation error for the power
  calculation where the speed <i>N<sub>rpm</sub></i> differs from the
  nominal speed <i>N<sub>nominal</sub></i>.
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/Movers/Validation/PowerSimplified.png\">
</p>
<ul>
  <li>October 15, 2021, by Hongxiang Fu:<br/>
    Fixed the image in the documentation which was cut off at the
    <i>y</i>-axis. This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1533\">IBPSA,
    #1533</a>.
  </li>
  <li>March 11, 2016, by Michael Wetter:<br/>
    Revised implementation by assigning the data record directly in the
    instances <code>pump_dp</code> and <code>pump_m_flow</code>,
    because using a <code>parameter</code> and assigning this
    <code>parameter</code> leads in OpenModelica to the error message
    <code>expected subtype of record
    AixLib.Fluid.Movers.Data.Generic</code>.
  </li>
  <li>March 2, 2016, by Filip Jorissen:<br/>
    Revised implementation for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/417\">#417</a>.
  </li>
  <li>November 5, 2015, by Michael Wetter:<br/>
    Changed parameters since the power is no longer a parameter for the
    movers that take mass flow rate or head as an input. This is for
    <a href=
    \"https://github.com/lbl-srg/modelica-buildings/issues/457\">issue
    457</a>.
  </li>
  <li>November 22, 2014, by Michael Wetter:<br/>
    Revised implementation.
  </li>
</ul>

-------- Errors --------
line 29 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Humidifiers/Humidifier_u.mo ----
-------- HTML Code --------

 <p>
 Model for an air humidifier or dehumidifier.
 </p>
 <p>
 This model adds (or removes) moisture from the air stream.
 The amount of exchanged moisture is equal to
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 m&#775;<sub>wat</sub> = u  m&#775;<sub>wat,nom</sub>,
 </p>
 <p>
 where <i>u</i> is the control input signal and
 <i>m&#775;<sub>wat,nom</sub></i> is equal to the parameter <code>mWat_flow_nominal</code>.
 The parameter <code>mWat_flow_nominal</code> can be positive or negative.
 If <i>m&#775;<sub>wat</sub></i> is positive, then moisture is added
 to the air stream, otherwise it is removed.
 </p>
 <p>
 If the heat port <code>heatPort</code> is unconnected, then the enthalpy of the
 air that flows through the device remains unchanged, e.g., the humidification
 is adiabatic. To change the enthalpy of the air, add heat flow to the connector
 <code>heatPort</code>.
 </p>
 
 <ul>
 <li>
 March 7, 2022, by Michael Wetter:<br/>
 Removed <code>massDynamics</code>.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1542\">#1542</a>.
 </li>
 <li>
 April 12, 2017, by Michael Wetter:<br/>
 Removed parameters <code>use_T_in</code> and <code>T</code>.
 This removes the optional specification of temperature through the parameter <code>T</code>
 or the input connector <code>T_in</code>.
 Exposed the heat port of the control volume to allow adding heat,
 for example, to use the model as a steam humidifier.<br/>
 This is for issue
 <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/704\">
 Buildings #704</a>.
 </li>
 <li>
 May 6, 2015, by Michael Wetter:<br/>
 Set <code>prescribedHeatFlowRate=true</code>.
 This is for issue
 <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/412\">
 #412</a>.
 </li>
 <li>
 May 29, 2014, by Michael Wetter:<br/>
 Removed undesirable annotation <code>Evaluate=true</code>.
 </li>
 <li>
 February 11, 2014 by Michael Wetter:<br/>
 Corrected issue <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/197\">#197</a>
 which led to twice the amount of latent heat being added to the fluid stream.
 </li>
 <li>
 October 14, 2013 by Michael Wetter:<br/>
 Constrained medium to be a subclass of
 <code>Modelica.Media.Interfaces.PartialCondensingGases</code>,
 as this base class declares the function
 <code>enthalpyOfCondensingGas</code>.
 </li>
 <li>
 July 30, 2013 by Michael Wetter:<br/>
 Updated model to use new variable <code>mWat_flow</code>
 in the base class.
 </li>
 <li>
 May 24, 2011, by Michael Wetter:<br/>
 Changed base class to allow using the model as a dynamic or a steady-state model.
 </li>
 <li>
 April 14, 2010, by Michael Wetter:<br/>
 Converted temperature input to a conditional connector.
 </li>
 <li>
 April 17, 2008, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Model for an air humidifier or dehumidifier.
</p>
<p>
  This model adds (or removes) moisture from the air stream. The amount
  of exchanged moisture is equal to
</p>
<p align=\"center\" style=\"font-style:italic;\">
  ṁ<sub>wat</sub> = u ṁ<sub>wat,nom</sub>,
</p>
<p>
  where <i>u</i> is the control input signal and
  <i>ṁ<sub>wat,nom</sub></i> is equal to the parameter
  <code>mWat_flow_nominal</code>. The parameter
  <code>mWat_flow_nominal</code> can be positive or negative. If
  <i>ṁ<sub>wat</sub></i> is positive, then moisture is added to the
  air stream, otherwise it is removed.
</p>
<p>
  If the heat port <code>heatPort</code> is unconnected, then the
  enthalpy of the air that flows through the device remains unchanged,
  e.g., the humidification is adiabatic. To change the enthalpy of the
  air, add heat flow to the connector <code>heatPort</code>.
</p>
<ul>
  <li>March 7, 2022, by Michael Wetter:<br/>
    Removed <code>massDynamics</code>.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1542\">#1542</a>.
  </li>
  <li>April 12, 2017, by Michael Wetter:<br/>
    Removed parameters <code>use_T_in</code> and <code>T</code>. This
    removes the optional specification of temperature through the
    parameter <code>T</code> or the input connector <code>T_in</code>.
    Exposed the heat port of the control volume to allow adding heat,
    for example, to use the model as a steam humidifier.<br/>
    This is for issue <a href=
    \"https://github.com/lbl-srg/modelica-buildings/issues/704\">Buildings
    #704</a>.
  </li>
  <li>May 6, 2015, by Michael Wetter:<br/>
    Set <code>prescribedHeatFlowRate=true</code>. This is for issue
    <a href=
    \"https://github.com/lbl-srg/modelica-buildings/issues/412\">#412</a>.
  </li>
  <li>May 29, 2014, by Michael Wetter:<br/>
    Removed undesirable annotation <code>Evaluate=true</code>.
  </li>
  <li>February 11, 2014 by Michael Wetter:<br/>
    Corrected issue <a href=
    \"https://github.com/lbl-srg/modelica-buildings/issues/197\">#197</a>
    which led to twice the amount of latent heat being added to the
    fluid stream.
  </li>
  <li>October 14, 2013 by Michael Wetter:<br/>
    Constrained medium to be a subclass of
    <code>Modelica.Media.Interfaces.PartialCondensingGases</code>, as
    this base class declares the function
    <code>enthalpyOfCondensingGas</code>.
  </li>
  <li>July 30, 2013 by Michael Wetter:<br/>
    Updated model to use new variable <code>mWat_flow</code> in the
    base class.
  </li>
  <li>May 24, 2011, by Michael Wetter:<br/>
    Changed base class to allow using the model as a dynamic or a
    steady-state model.
  </li>
  <li>April 14, 2010, by Michael Wetter:<br/>
    Converted temperature input to a conditional connector.
  </li>
  <li>April 17, 2008, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 9 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/HeatExchangers/Heater_T.mo ----
-------- HTML Code --------

 <p>
 Model for an ideal heater that controls its outlet temperature to
 a prescribed outlet temperature.
 </p>
 <p>
 This model forces the outlet temperature at <code>port_b</code> to be
 no lower than the temperature of the input signal
 <code>TSet</code>, subject to optional limits on the
 capacity.
 By default, the model has unlimited heating capacity.
 </p>
 <p>
 The output signal <code>Q_flow</code> is the heat added
 to the medium if the mass flow rate is from <code>port_a</code> to <code>port_b</code>.
 If the flow is reversed, then <code>Q_flow=0</code>.
 </p>
 <p>
 The outlet conditions at <code>port_a</code> are not affected by this model,
 other than for a possible pressure difference due to flow friction.
 </p>
 <p>
 If the parameter <code>energyDynamics</code> is different from
 <code>Modelica.Fluid.Types.Dynamics.SteadyState</code>,
 the component models the dynamic response using a first order differential equation.
 The time constant of the component is equal to the parameter <code>tau</code>.
 This time constant is adjusted based on the mass flow rate using
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 &tau;<sub>eff</sub> = &tau; |m&#775;| &frasl; m&#775;<sub>nom</sub>
 </p>
 <p>
 where
 <i>&tau;<sub>eff</sub></i> is the effective time constant for the given mass flow rate
 <i>m&#775;</i> and
 <i>&tau;</i> is the time constant at the nominal mass flow rate
 <i>m&#775;<sub>nom</sub></i>.
 This type of dynamics is equal to the dynamics that a completely mixed
 control volume would have.
 </p>
 <p>
 Optionally, this model can have a flow resistance.
 Set <code>dp_nominal = 0</code> to disable the flow friction calculation.
 </p>
 <p>
 For a similar model that is a sensible cooling device, use
 <a href=\"modelica://AixLib.Fluid.HeatExchangers.SensibleCooler_T\">
 AixLib.Fluid.HeatExchangers.SensibleCooler_T</a>.
 For a model that uses a control signal <i>u &isin; [0, 1]</i> and multiplies
 this with the nominal heating or cooling power, use
 <a href=\"modelica://AixLib.Fluid.HeatExchangers.HeaterCooler_u\">
 AixLib.Fluid.HeatExchangers.HeaterCooler_u</a>
 
 </p>
 <h4>Limitations</h4>
 <p>
 If the flow is from <code>port_b</code> to <code>port_a</code>,
 then the enthalpy of the medium is not affected by this model.
 </p>
 <h4>Validation</h4>
 <p>
 The model has been validated against the analytical solution in
 the examples
 <a href=\"modelica://AixLib.Fluid.HeatExchangers.Validation.PrescribedOutlet\">
 AixLib.Fluid.HeatExchangers.Validation.PrescribedOutlet</a>
 and
 <a href=\"modelica://AixLib.Fluid.HeatExchangers.Validation.PrescribedOutlet_dynamic\">
 AixLib.Fluid.HeatExchangers.Validation.PrescribedOutlet_dynamic</a>.
 </p>
 
 <ul>
 <li>
 September 10, 2018, by Michael Wetter:<br/>
 Corrected missing propagation of initial conditions.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1016\">
 AixLib, #1016</a>.
 </li>
 <li>
 May 3, 2017, by Michael Wetter:<br/>
 First implementation.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/763\">
 AixLib, #763</a>.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Model for an ideal heater that controls its outlet temperature to a
  prescribed outlet temperature.
</p>
<p>
  This model forces the outlet temperature at <code>port_b</code> to be
  no lower than the temperature of the input signal <code>TSet</code>,
  subject to optional limits on the capacity. By default, the model has
  unlimited heating capacity.
</p>
<p>
  The output signal <code>Q_flow</code> is the heat added to the medium
  if the mass flow rate is from <code>port_a</code> to
  <code>port_b</code>. If the flow is reversed, then
  <code>Q_flow=0</code>.
</p>
<p>
  The outlet conditions at <code>port_a</code> are not affected by this
  model, other than for a possible pressure difference due to flow
  friction.
</p>
<p>
  If the parameter <code>energyDynamics</code> is different from
  <code>Modelica.Fluid.Types.Dynamics.SteadyState</code>, the component
  models the dynamic response using a first order differential
  equation. The time constant of the component is equal to the
  parameter <code>tau</code>. This time constant is adjusted based on
  the mass flow rate using
</p>
<p align=\"center\" style=\"font-style:italic;\">
  τ<sub>eff</sub> = τ |ṁ| ⁄ ṁ<sub>nom</sub>
</p>
<p>
  where <i>τ<sub>eff</sub></i> is the effective time constant for the
  given mass flow rate <i>ṁ</i> and <i>τ</i> is the time constant at
  the nominal mass flow rate <i>ṁ<sub>nom</sub></i>. This type of
  dynamics is equal to the dynamics that a completely mixed control
  volume would have.
</p>
<p>
  Optionally, this model can have a flow resistance. Set
  <code>dp_nominal = 0</code> to disable the flow friction calculation.
</p>
<p>
  For a similar model that is a sensible cooling device, use <a href=
  \"modelica://AixLib.Fluid.HeatExchangers.SensibleCooler_T\">AixLib.Fluid.HeatExchangers.SensibleCooler_T</a>.
  For a model that uses a control signal <i>u ∈ [0, 1]</i> and
  multiplies this with the nominal heating or cooling power, use
  <a href=
  \"modelica://AixLib.Fluid.HeatExchangers.HeaterCooler_u\">AixLib.Fluid.HeatExchangers.HeaterCooler_u</a>
</p>
<h4>
  Limitations
</h4>
<p>
  If the flow is from <code>port_b</code> to <code>port_a</code>, then
  the enthalpy of the medium is not affected by this model.
</p>
<h4>
  Validation
</h4>
<p>
  The model has been validated against the analytical solution in the
  examples <a href=
  \"modelica://AixLib.Fluid.HeatExchangers.Validation.PrescribedOutlet\">AixLib.Fluid.HeatExchangers.Validation.PrescribedOutlet</a>
  and <a href=
  \"modelica://AixLib.Fluid.HeatExchangers.Validation.PrescribedOutlet_dynamic\">
  AixLib.Fluid.HeatExchangers.Validation.PrescribedOutlet_dynamic</a>.
</p>
<ul>
  <li>September 10, 2018, by Michael Wetter:<br/>
    Corrected missing propagation of initial conditions.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1016\">AixLib,
    #1016</a>.
  </li>
  <li>May 3, 2017, by Michael Wetter:<br/>
    First implementation.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/763\">AixLib,
    #763</a>.
  </li>
</ul>

-------- Errors --------
line 29 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/BoundaryConditions/Validation/BESTEST/WD600.mo ----
-------- HTML Code --------

 <ul>
 <li>
 September 6, 2021, by Ettore Zanetti:<br/>
 Removed parameter <code>lat</code> as it is now obtained from the weather data bus.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1477\">IBPSA, #1477</a>.
 </li>
 <li>
 March 11, 2020, by Ettore Zanetti:<br/>
 First implementation.
 </li>
 <li>
 April 14, 2020, by Ettore Zanetti:<br/>
 Rework after comments from pull request
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/pull/1339\">#1339</a>.
 </li>
 </ul>
 
 <h4>WD600: Ground Reflactance</h4>
 <p>Weather data file : WD600.epw</p>
 <p><i>Table 1: Site Data for Weather file WD600.epw</i></p>
 <table summary=\"Site Data for Weather file WD600.epw\" cellspacing=\"2\" cellpadding=\"0\" border=\"1\"><tr>
 <td><p>Latitude</p></td>
 <td><p>39.833&deg; north</p></td>
 </tr>
 <tr>
 <td><p>Longitude</p></td>
 <td><p>104.65&deg; west</p></td>
 </tr>
 <tr>
 <td><p>Altitude</p></td>
 <td><p>1650 m</p></td>
 </tr>
 <tr>
 <td><p>Time Zone</p></td>
 <td><p>-7</p></td>
 </tr>
 </table>
 
-------- Corrected Code --------
<ul>
  <li>September 6, 2021, by Ettore Zanetti:<br/>
    Removed parameter <code>lat</code> as it is now obtained from the
    weather data bus.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1477\">IBPSA,
    #1477</a>.
  </li>
  <li>March 11, 2020, by Ettore Zanetti:<br/>
    First implementation.
  </li>
  <li>April 14, 2020, by Ettore Zanetti:<br/>
    Rework after comments from pull request <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/pull/1339\">#1339</a>.
  </li>
</ul>
<h4>
  WD600: Ground Reflactance
</h4>
<p>
  Weather data file : WD600.epw
</p>
<p>
  <i>Table 1: Site Data for Weather file WD600.epw</i>
</p>
<table summary=\"Site Data for Weather file WD600.epw\" cellspacing=\"2\"
cellpadding=\"0\" border=\"1\">
  <tr>
    <td>
      <p>
        Latitude
      </p>
    </td>
    <td>
      <p>
        39.833° north
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        Longitude
      </p>
    </td>
    <td>
      <p>
        104.65° west
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        Altitude
      </p>
    </td>
    <td>
      <p>
        1650 m
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        Time Zone
      </p>
    </td>
    <td>
      <p>
        -7
      </p>
    </td>
  </tr>
</table>

-------- Errors --------
line 5 column 2 - Warning: The summary attribute on the <table> element is obsolete in HTML5


---- AixLib/Controls/Continuous/Examples/SignalRanker.mo ----
-------- HTML Code --------

 <p>
 Example that demonstrates the use of the signal ranker model.
 The figure below shows the input and output signals of the block.
 Note that
 <code>sigRan.y[1] &ge; sigRan.y[2] &ge; sigRan.y[3]</code>.
 </p>
 <p align=\"center\">
 <img src=\"modelica://AixLib/Resources/Images/Controls/Continuous/Examples/SignalRankerU.png\" border=\"1\" alt=\"Input to signal ranker.\"/><br/>
 <img src=\"modelica://AixLib/Resources/Images/Controls/Continuous/Examples/SignalRankerY.png\" border=\"1\" alt=\"Output of signal ranker.\"/>
 </p>
 
 <ul>
 <li>
 October 15, 2021, by Michael Wetter:<br/>
 Moved start time of sine input signal to avoid simultaneous state event and time event.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1534\">IBPSA, #1534</a>.
 </li>
 <li>
 November 21, 2011, by Michael Wetter:<br/>
 Added documentation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Example that demonstrates the use of the signal ranker model. The
  figure below shows the input and output signals of the block. Note
  that <code>sigRan.y[1] ≥ sigRan.y[2] ≥ sigRan.y[3]</code>.
</p>
<p align=\"center\">
  <img src=
  \"modelica://AixLib/Resources/Images/Controls/Continuous/Examples/SignalRankerU.png\"
  border=\"1\" alt=\"Input to signal ranker.\"><br/>
  <img src=
  \"modelica://AixLib/Resources/Images/Controls/Continuous/Examples/SignalRankerY.png\"
  border=\"1\" alt=\"Output of signal ranker.\">
</p>
<ul>
  <li>October 15, 2021, by Michael Wetter:<br/>
    Moved start time of sine input signal to avoid simultaneous state
    event and time event.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1534\">IBPSA,
    #1534</a>.
  </li>
  <li>November 21, 2011, by Michael Wetter:<br/>
    Added documentation.
  </li>
</ul>

-------- Errors --------
line 8 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/HeatExchangers/DryCoilEffectivenessNTU.mo ----
-------- HTML Code --------

 <p>
 Model of a coil without humidity condensation.
 This model transfers heat in the amount of
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   Q&#775; = Q&#775;<sub>max</sub>  &epsilon;<br/>
   &epsilon; = f(NTU, Z, flowRegime),
 </p>
 <p>
 where
 <i>Q&#775;<sub>max</sub></i> is the maximum heat that can be transferred,
 <i>&epsilon;</i> is the heat transfer effectiveness,
 <i>NTU</i> is the Number of Transfer Units,
 <i>Z</i> is the ratio of minimum to maximum capacity flow rate and
 <i>flowRegime</i> is the heat exchanger flow regime.
 such as
 parallel flow, cross flow or counter flow.
 </p>
 <p>
 The flow regimes depend on the heat exchanger configuration. All configurations
 defined in
 <a href=\"modelica://AixLib.Fluid.Types.HeatExchangerConfiguration\">
 AixLib.Fluid.Types.HeatExchangerConfiguration</a>
 are supported.
 </p>
 <p>
 The convective heat transfer coefficients scale proportional to
 <i>(m&#775;/m&#775;<sub>0</sub>)<sup>n</sup></i>, where
 <i>m&#775;</i> is the mass flow rate,
 <i>m&#775;<sub>0</sub></i> is the nominal mass flow rate, and
 <i>n=0.8</i> on the air-side and <i>n=0.85</i> on the water side.
 </p>
 <p>
 For a heat and moisture exchanger, use
 <a href=\"modelica://AixLib.Fluid.MassExchangers.ConstantEffectiveness\">
 AixLib.Fluid.MassExchangers.ConstantEffectiveness</a>.
 </p>
 
 <ul>
 <li>
 September 25, 2018, by Michael Wetter:<br/>
 Refactored model to use a common base class.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Model of a coil without humidity condensation. This model transfers
  heat in the amount of
</p>
<p align=\"center\" style=\"font-style:italic;\">
  Q̇ = Q̇<sub>max</sub> ε<br/>
  ε = f(NTU, Z, flowRegime),
</p>
<p>
  where <i>Q̇<sub>max</sub></i> is the maximum heat that can be
  transferred, <i>ε</i> is the heat transfer effectiveness, <i>NTU</i>
  is the Number of Transfer Units, <i>Z</i> is the ratio of minimum to
  maximum capacity flow rate and <i>flowRegime</i> is the heat
  exchanger flow regime. such as parallel flow, cross flow or counter
  flow.
</p>
<p>
  The flow regimes depend on the heat exchanger configuration. All
  configurations defined in <a href=
  \"modelica://AixLib.Fluid.Types.HeatExchangerConfiguration\">AixLib.Fluid.Types.HeatExchangerConfiguration</a>
  are supported.
</p>
<p>
  The convective heat transfer coefficients scale proportional to
  <i>(ṁ/ṁ<sub>0</sub>)<sup>n</sup></i>, where <i>ṁ</i> is the mass
  flow rate, <i>ṁ<sub>0</sub></i> is the nominal mass flow rate, and
  <i>n=0.8</i> on the air-side and <i>n=0.85</i> on the water side.
</p>
<p>
  For a heat and moisture exchanger, use <a href=
  \"modelica://AixLib.Fluid.MassExchangers.ConstantEffectiveness\">AixLib.Fluid.MassExchangers.ConstantEffectiveness</a>.
</p>
<ul>
  <li>September 25, 2018, by Michael Wetter:<br/>
    Refactored model to use a common base class.
  </li>
</ul>

-------- Errors --------
line 6 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Actuators/Valves/ThreeWayTable.mo ----
-------- HTML Code --------

 <p>
 Three way valve with table-specified opening characteristics.
 A separate characteristic for each flow path is used.
 </p>
 <p>
 Each flow path uses an instance of the model
 <a href=\"modelica://AixLib.Fluid.Actuators.Valves.TwoWayTable\">
 AixLib.Fluid.Actuators.Valves.TwoWayTable</a>.
 Therefore, this model needs to be parameterized the same way as
 <a href=\"modelica://AixLib.Fluid.Actuators.Valves.TwoWayTable\">
 AixLib.Fluid.Actuators.Valves.TwoWayTable</a>.
 Specifically,
 the mass flow rate for the fully open valve is determined based
 on the value of the parameter <code>CvData</code>.
 For the different valve positions <i>y &isin; [0, 1]</i>, this nominal flow rate is
 scaled by the values of the parameter
 <code>flowCharacteristics1</code> and <code>flowCharacteristics3</code>, respectively.
 These parameters declare a table of the form
 </p>
 <table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\" style=\"border-collapse:collapse;\">
 <tr>
 <td><i>y</i></td>  <td>0</td>  <td>...</td>  <td>1</td>
 </tr>
 <tr>
 <td><i>&phi;</i></td>  <td><i>l</i></td>  <td>...</td>  <td>1</td>
 </tr>
 </table>
 <p>
 where <i>l = K<sub>v</sub>(y=0)/K<sub>v</sub>(y=1) &gt; 0</i> is the valve leakage.
 The first row is the valve opening, and the second row is the
 mass flow rate, relative to the mass flow rate of the fully open
 valve, under the assumption of a constant pressure difference across the
 valve.
 A suggested value for the valve leakage is <i>l=0.0001</i>.
 If <i>l = 0</i>, then this model will replace it with
 <i>l = 10<sup>-8</sup></i> for numerical reasons.
 For example, if a valve has <i>K<sub>v</sub>=0.5</i> [m<sup>3</sup>/h/bar<sup>1/2</sup>] and
 a linear opening characteristics and
 a valve leakage of <i>l=0.0001</i>, then one would set
 </p>
 <pre>
  CvData=AixLib.Fluid.Types.CvTypes.Kv
  Kv = 0.5
  flowCharacteristics1(y={0,1}, phi={0.0001,1})
  flowCharacteristics3(y={0,1}, phi={0.0001,1})
 </pre>
 <p>
 Note, however, that
 <a href=\"modelica://AixLib.Fluid.Actuators.Valves.ThreeWayLinear\">
 AixLib.Fluid.Actuators.Valves.ThreeWayLinear</a> provides a more
 efficient implementation for this simple case.
 </p>
 <p>
 The parameters <code>flowCharacteristics1</code> and <code>flowCharacteristics3</code> must meet the following
 requirements, otherwise the model stops with an error:
 </p>
 <ul>
 <li>
 Their arrays
 <code>y</code> and <code>phi</code>
 must be strictly monotonic increasing.
 </li>
 <li>
 The first value must satisfy
 <code>y[1]=0</code>, and
 <code>phi[1]</code> must be equal to the
 leakage flow rate, which must be bigger than zero.
 Otherwise, a default value of <code>1E-8</code> is used.
 </li>
 <li>
 The last values must satisfy
 <code>y[end]=1</code> and
 <code>phi[end]=1</code>.
 </li>
 </ul>
 <p>
 This model is based on the partial valve model
 <a href=\"modelica://AixLib.Fluid.Actuators.BaseClasses.PartialTwoWayValve\">
 AixLib.Fluid.Actuators.BaseClasses.PartialTwoWayValve</a>.
 Check this model for more information, such
 as the regularization near the origin.
 </p>
 <p>
 For an example that specifies an opening characteristics, see
 <a href=\"modelica://AixLib.Fluid.Actuators.Valves.Examples.TwoWayValveTable\">
 AixLib.Fluid.Actuators.Valves.Examples.TwoWayValveTable</a>.
 </p>
 
 
 <ul>
 <li>
 March 7, 2022, by Michael Wetter:<br/>
 Set <code>final massDynamics=energyDynamics</code>.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1542\">#1542</a>.
 </li>
 <li>
 June 10, 2021, by Michael Wetter:<br/>
 Changed implementation of the filter and changed the parameter <code>order</code> to a constant
 as most users need not change this value.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1498\">#1498</a>.
 </li>
 <li>
 November 28, 2019, by Michael Wetter:<br/>
 Revised implementation.
 </li>
 <li>
 November 15, 2019, by Alexander K&uuml;mpel:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Three way valve with table-specified opening characteristics. A
  separate characteristic for each flow path is used.
</p>
<p>
  Each flow path uses an instance of the model <a href=
  \"modelica://AixLib.Fluid.Actuators.Valves.TwoWayTable\">AixLib.Fluid.Actuators.Valves.TwoWayTable</a>.
  Therefore, this model needs to be parameterized the same way as
  <a href=
  \"modelica://AixLib.Fluid.Actuators.Valves.TwoWayTable\">AixLib.Fluid.Actuators.Valves.TwoWayTable</a>.
  Specifically, the mass flow rate for the fully open valve is
  determined based on the value of the parameter <code>CvData</code>.
  For the different valve positions <i>y ∈ [0, 1]</i>, this nominal
  flow rate is scaled by the values of the parameter
  <code>flowCharacteristics1</code> and
  <code>flowCharacteristics3</code>, respectively. These parameters
  declare a table of the form
</p>
<table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\"
style=\"border-collapse:collapse;\">
  <tr>
    <td>
      <i>y</i>
    </td>
    <td>
      0
    </td>
    <td>
      ...
    </td>
    <td>
      1
    </td>
  </tr>
  <tr>
    <td>
      <i>φ</i>
    </td>
    <td>
      <i>l</i>
    </td>
    <td>
      ...
    </td>
    <td>
      1
    </td>
  </tr>
</table>
<p>
  where <i>l = K<sub>v</sub>(y=0)/K<sub>v</sub>(y=1) &gt; 0</i> is the
  valve leakage. The first row is the valve opening, and the second row
  is the mass flow rate, relative to the mass flow rate of the fully
  open valve, under the assumption of a constant pressure difference
  across the valve. A suggested value for the valve leakage is
  <i>l=0.0001</i>. If <i>l = 0</i>, then this model will replace it
  with <i>l = 10<sup>-8</sup></i> for numerical reasons. For example,
  if a valve has <i>K<sub>v</sub>=0.5</i>
  [m<sup>3</sup>/h/bar<sup>1/2</sup>] and a linear opening
  characteristics and a valve leakage of <i>l=0.0001</i>, then one
  would set
</p>
<pre>
  CvData=AixLib.Fluid.Types.CvTypes.Kv
  Kv = 0.5
  flowCharacteristics1(y={0,1}, phi={0.0001,1})
  flowCharacteristics3(y={0,1}, phi={0.0001,1})
 </pre>
<p>
  Note, however, that <a href=
  \"modelica://AixLib.Fluid.Actuators.Valves.ThreeWayLinear\">AixLib.Fluid.Actuators.Valves.ThreeWayLinear</a>
  provides a more efficient implementation for this simple case.
</p>
<p>
  The parameters <code>flowCharacteristics1</code> and
  <code>flowCharacteristics3</code> must meet the following
  requirements, otherwise the model stops with an error:
</p>
<ul>
  <li>Their arrays <code>y</code> and <code>phi</code> must be strictly
  monotonic increasing.
  </li>
  <li>The first value must satisfy <code>y[1]=0</code>, and
  <code>phi[1]</code> must be equal to the leakage flow rate, which
  must be bigger than zero. Otherwise, a default value of
  <code>1E-8</code> is used.
  </li>
  <li>The last values must satisfy <code>y[end]=1</code> and
  <code>phi[end]=1</code>.
  </li>
</ul>
<p>
  This model is based on the partial valve model <a href=
  \"modelica://AixLib.Fluid.Actuators.BaseClasses.PartialTwoWayValve\">AixLib.Fluid.Actuators.BaseClasses.PartialTwoWayValve</a>.
  Check this model for more information, such as the regularization
  near the origin.
</p>
<p>
  For an example that specifies an opening characteristics, see
  <a href=\"modelica://AixLib.Fluid.Actuators.Valves.Examples.TwoWayValveTable\">
  AixLib.Fluid.Actuators.Valves.Examples.TwoWayValveTable</a>.
</p>
<ul>
  <li>March 7, 2022, by Michael Wetter:<br/>
    Set <code>final massDynamics=energyDynamics</code>.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1542\">#1542</a>.
  </li>
  <li>June 10, 2021, by Michael Wetter:<br/>
    Changed implementation of the filter and changed the parameter
    <code>order</code> to a constant as most users need not change this
    value.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1498\">#1498</a>.
  </li>
  <li>November 28, 2019, by Michael Wetter:<br/>
    Revised implementation.
  </li>
  <li>November 15, 2019, by Alexander Kümpel:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 21 column 2 - Warning: The summary attribute on the <table> element is obsolete in HTML5


---- AixLib/Controls/Continuous/LimPID.mo ----
-------- HTML Code --------

 <p>
 PID controller in the standard form
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 y = k &nbsp; ( e(t) + 1 &frasl; T<sub>i</sub> &nbsp; &int; e(s) ds + T<sub>d</sub> de(t)&frasl;dt ),
 </p>
 <p>
 where
 <i>y</i> is the control signal,
 <i>e(t) = u<sub>s</sub> - u<sub>m</sub></i> is the control error,
 with <i>u<sub>s</sub></i> being the set point and <i>u<sub>m</sub></i> being
 the measured quantity,
 <i>k</i> is the gain,
 <i>T<sub>i</sub></i> is the time constant of the integral term and
 <i>T<sub>d</sub></i> is the time constant of the derivative term.
 </p>
 <p>
 Note that the units of <i>k</i> are the inverse of the units of the control error,
 while the units of <i>T<sub>i</sub></i> and <i>T<sub>d</sub></i> are seconds.
 </p>
 <p>
 For detailed treatment of integrator anti-windup, set-point weights and output limitation, see
 <a href=\"modelica://Modelica.Blocks.Continuous.LimPID\">Modelica.Blocks.Continuous.LimPID</a>.
 </p>
 <h4>Options</h4>
 This controller can be configured as follows.
 <h5>P, PI, PD, or PID action</h5>
 <p>
 Through the parameter <code>controllerType</code>, the controller can be configured
 as P, PI, PD or PID controller. The default configuration is PI.
 </p>
 <h5>Direct or reverse acting</h5>
 <p>
 Through the parameter <code>reverseActing</code>, the controller can be configured to
 be reverse or direct acting.
 The above standard form is reverse acting, which is the default configuration.
 For a reverse acting controller, for a constant set point,
 an increase in measurement signal <code>u_m</code> decreases the control output signal <code>y</code>
 (Montgomery and McDowall, 2008).
 Thus,
 </p>
 <ul>
   <li>
   for a heating coil with a two-way valve, leave <code>reverseActing = true</code>, but
   </li>
   <li>
   for a cooling coil with a two-way valve, set <code>reverseActing = false</code>.
   </li>
 </ul>
 <h5>Reset of the controller output</h5>
 <p>
 The controller can be configured to enable an input port that allows resetting the controller
 output. The controller output can be reset as follows:
 </p>
 <ul>
   <li>
   If <code>reset = AixLib.Types.Reset.Disabled</code>, which is the default,
   then the controller output is never reset.
   </li>
   <li>
   If <code>reset = AixLib.Types.Reset.Parameter</code>, then a boolean
   input signal <code>trigger</code> is enabled. Whenever the value of
   this input changes from <code>false</code> to <code>true</code>,
   the controller output is reset by setting <code>y</code>
   to the value of the parameter <code>y_reset</code>.
   </li>
   <li>
   If <code>reset = AixLib.Types.Reset.Input</code>, then a boolean
   input signal <code>trigger</code> and a real input signal <code>y_reset_in</code>
   are enabled. Whenever the value of
   <code>trigger</code> changes from <code>false</code> to <code>true</code>,
   the controller output is reset by setting the value of <code>y</code>
   to <code>y_reset_in</code>.
   </li>
 </ul>
 <p>
 Note that this controller implements an integrator anti-windup. Therefore,
 for most applications, keeping the default setting of
 <code>reset = AixLib.Types.Reset.Disabled</code> is sufficient.
 However, if the controller is used in conjuction with equipment that is being
 switched on, better control performance may be achieved by resetting the controller
 output when the equipment is switched on.
 This is in particular the case in situations
 where the equipment control input should continuously increase as the equipment is
 switched on, such as a light dimmer that may slowly increase the luminance, or
 a variable speed drive of a motor that should continuously increase the speed.
 </p>
 <h4>References</h4>
 <p>
 R. Montgomery and R. McDowall (2008).
 \"Fundamentals of HVAC Control Systems.\"
 American Society of Heating Refrigerating and Air-Conditioning Engineers Inc. Atlanta, GA.
 </p>
 
 
 <ul>
 <li>
 June 1, 2020, by Michael Wetter:<br/>
 Corrected wrong convention of reverse and direct action.<br/>
 Changed default configuration from PID to PI.<br/>
 This is for <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1365\">issue 1365</a>.
 </li>
 <li>
 March 9, 2020, by Michael Wetter:<br/>
 Corrected wrong unit declaration for parameter <code>k</code>.<br/>
 This is for <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1316\">issue 1316</a>.
 </li>
 <li>
 October 19, 2019, by Filip Jorissen:<br/>
 Disabled homotopy to ensure bounded outputs
 by copying the implementation from MSL 3.2.3 and by
 hardcoding the implementation for <code>homotopyType=NoHomotopy</code>.
 See <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1221\">issue 1221</a>.
 </li>
 <li>
 September 29, 2016, by Michael Wetter:<br/>
 Refactored model.
 </li>
 <li>
 August 25, 2016, by Michael Wetter:<br/>
 Removed parameter <code>limitsAtInit</code> because it was only propagated to
 the instance <code>limiter</code>, but this block no longer makes use of this parameter.
 This is a non-backward compatible change.<br/>
 Revised implemenentation, added comments, made some parameter in the instances final.
 </li>
 <li>July 18, 2016, by Philipp Mehrfeld:<br/>
 Added integrator reset.
 This is for <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/494\">issue 494</a>.
 </li>
 <li>
 March 15, 2016, by Michael Wetter:<br/>
 Changed the default value to <code>strict=true</code> in order to avoid events
 when the controller saturates.
 This is for <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/433\">issue 433</a>.
 </li>
 <li>
 February 24, 2010, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  PID controller in the standard form
</p>
<p align=\"center\" style=\"font-style:italic;\">
  y = k &#160; ( e(t) + 1 ⁄ T<sub>i</sub> &#160; ∫ e(s) ds +
  T<sub>d</sub> de(t)⁄dt ),
</p>
<p>
  where <i>y</i> is the control signal, <i>e(t) = u<sub>s</sub> -
  u<sub>m</sub></i> is the control error, with <i>u<sub>s</sub></i>
  being the set point and <i>u<sub>m</sub></i> being the measured
  quantity, <i>k</i> is the gain, <i>T<sub>i</sub></i> is the time
  constant of the integral term and <i>T<sub>d</sub></i> is the time
  constant of the derivative term.
</p>
<p>
  Note that the units of <i>k</i> are the inverse of the units of the
  control error, while the units of <i>T<sub>i</sub></i> and
  <i>T<sub>d</sub></i> are seconds.
</p>
<p>
  For detailed treatment of integrator anti-windup, set-point weights
  and output limitation, see <a href=
  \"modelica://Modelica.Blocks.Continuous.LimPID\">Modelica.Blocks.Continuous.LimPID</a>.
</p>
<h4>
  Options
</h4>This controller can be configured as follows.
<h5>
  P, PI, PD, or PID action
</h5>
<p>
  Through the parameter <code>controllerType</code>, the controller can
  be configured as P, PI, PD or PID controller. The default
  configuration is PI.
</p>
<h5>
  Direct or reverse acting
</h5>
<p>
  Through the parameter <code>reverseActing</code>, the controller can
  be configured to be reverse or direct acting. The above standard form
  is reverse acting, which is the default configuration. For a reverse
  acting controller, for a constant set point, an increase in
  measurement signal <code>u_m</code> decreases the control output
  signal <code>y</code> (Montgomery and McDowall, 2008). Thus,
</p>
<ul>
  <li>for a heating coil with a two-way valve, leave
  <code>reverseActing = true</code>, but
  </li>
  <li>for a cooling coil with a two-way valve, set <code>reverseActing
  = false</code>.
  </li>
</ul>
<h5>
  Reset of the controller output
</h5>
<p>
  The controller can be configured to enable an input port that allows
  resetting the controller output. The controller output can be reset
  as follows:
</p>
<ul>
  <li>If <code>reset = AixLib.Types.Reset.Disabled</code>, which is the
  default, then the controller output is never reset.
  </li>
  <li>If <code>reset = AixLib.Types.Reset.Parameter</code>, then a
  boolean input signal <code>trigger</code> is enabled. Whenever the
  value of this input changes from <code>false</code> to
  <code>true</code>, the controller output is reset by setting
  <code>y</code> to the value of the parameter <code>y_reset</code>.
  </li>
  <li>If <code>reset = AixLib.Types.Reset.Input</code>, then a boolean
  input signal <code>trigger</code> and a real input signal
  <code>y_reset_in</code> are enabled. Whenever the value of
  <code>trigger</code> changes from <code>false</code> to
  <code>true</code>, the controller output is reset by setting the
  value of <code>y</code> to <code>y_reset_in</code>.
  </li>
</ul>
<p>
  Note that this controller implements an integrator anti-windup.
  Therefore, for most applications, keeping the default setting of
  <code>reset = AixLib.Types.Reset.Disabled</code> is sufficient.
  However, if the controller is used in conjuction with equipment that
  is being switched on, better control performance may be achieved by
  resetting the controller output when the equipment is switched on.
  This is in particular the case in situations where the equipment
  control input should continuously increase as the equipment is
  switched on, such as a light dimmer that may slowly increase the
  luminance, or a variable speed drive of a motor that should
  continuously increase the speed.
</p>
<h4>
  References
</h4>
<p>
  R. Montgomery and R. McDowall (2008). \"Fundamentals of HVAC Control
  Systems.\" American Society of Heating Refrigerating and
  Air-Conditioning Engineers Inc. Atlanta, GA.
</p>
<ul>
  <li>June 1, 2020, by Michael Wetter:<br/>
    Corrected wrong convention of reverse and direct action.<br/>
    Changed default configuration from PID to PI.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1365\">issue
    1365</a>.
  </li>
  <li>March 9, 2020, by Michael Wetter:<br/>
    Corrected wrong unit declaration for parameter <code>k</code>.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1316\">issue
    1316</a>.
  </li>
  <li>October 19, 2019, by Filip Jorissen:<br/>
    Disabled homotopy to ensure bounded outputs by copying the
    implementation from MSL 3.2.3 and by hardcoding the implementation
    for <code>homotopyType=NoHomotopy</code>. See <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1221\">issue
    1221</a>.
  </li>
  <li>September 29, 2016, by Michael Wetter:<br/>
    Refactored model.
  </li>
  <li>August 25, 2016, by Michael Wetter:<br/>
    Removed parameter <code>limitsAtInit</code> because it was only
    propagated to the instance <code>limiter</code>, but this block no
    longer makes use of this parameter. This is a non-backward
    compatible change.<br/>
    Revised implemenentation, added comments, made some parameter in
    the instances final.
  </li>
  <li>July 18, 2016, by Philipp Mehrfeld:<br/>
    Added integrator reset. This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/494\">issue 494</a>.
  </li>
  <li>March 15, 2016, by Michael Wetter:<br/>
    Changed the default value to <code>strict=true</code> in order to
    avoid events when the controller saturates. This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/433\">issue 433</a>.
  </li>
  <li>February 24, 2010, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 5 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/ThermalZones/ReducedOrder/RC/BaseClasses/splitFacVal.mo ----
-------- HTML Code --------

   <p>Calculates the ratio of the surface areas of a wall to the total wall area,
   unless the area is zero. It subtracts the wall area <code>AExt</code>
   for first entry in <code>AArray</code> and <code>AWin</code> for
   second entry in AArray unless <code>AArray[1]</code> and/or
   <code>AArray[2]</code> are not zero. This is done separately for each
   orientation. Consequently, the function gives an <code>nRow x nCol</code>
   array back as output. Each row stands for one area in
   <code>AArray</code> and each column for one orientation in
   <code>AExt</code> and <code>AWin</code>. The function is used to
   calculate the split factors for
   <a href=\"AixLib.ThermalZones.ReducedOrder.RC.BaseClasses.ThermSplitter\">
   AixLib.ThermalZones.ReducedOrder.RC.BaseClasses.ThermSplitter</a>.</p>
   For internal gains, the calculation is:
   <p align=\"center\" style=\"font-style:italic;\">
  SplitFac<sub>i</sub> = AArray[i]
   /ATot
   </p>
   whereby <code>ATot</code> is the sum of <code>AArray</code>. To
   perform this,
   <code>AExt</code> and <code>AWin</code> can just be set to vectors  of
   zeros with length 1.
   For solar radiation through windows, the window and wall area with the same
   orientation as the incoming radiation should be subtracted as these areas
   cannot be hit by the radiation. This needs to be done separately for each
   orientation and for exterior walls and windows only, according to:
   <p align=\"center\" style=\"font-style:italic;\">
  SplitFac<sub>i,k</sub> = (AArray[i]
   - AExt[k])
   /(ATot
   - AExt[k]
   -AWin[k])
   </p>
   and
   <p align=\"center\" style=\"font-style:italic;\">
  SplitFac<sub>i,k</sub> = (AArray[i]
   - AWin[k])
   /(ATot
   - AExt[k]
   - AWin[k])
   </p>
   respectively. For all other walls, the equation is:
   <p align=\"center\" style=\"font-style:italic;\">
  SplitFac<sub>i,k</sub> = AArray[i]
   /(ATot
   - AExt[k]
   - AWin[k])
   </p>
   
   <ul>
   <li>December 15, 2015 by Moritz Lauster:<br/>
   First Implementation.
   </li>
   </ul>
   
-------- Corrected Code --------
<p>
  Calculates the ratio of the surface areas of a wall to the total wall
  area, unless the area is zero. It subtracts the wall area
  <code>AExt</code> for first entry in <code>AArray</code> and
  <code>AWin</code> for second entry in AArray unless
  <code>AArray[1]</code> and/or <code>AArray[2]</code> are not zero.
  This is done separately for each orientation. Consequently, the
  function gives an <code>nRow x nCol</code> array back as output. Each
  row stands for one area in <code>AArray</code> and each column for
  one orientation in <code>AExt</code> and <code>AWin</code>. The
  function is used to calculate the split factors for <a href=
  \"AixLib.ThermalZones.ReducedOrder.RC.BaseClasses.ThermSplitter\">AixLib.ThermalZones.ReducedOrder.RC.BaseClasses.ThermSplitter</a>.
</p>For internal gains, the calculation is:
<p align=\"center\" style=\"font-style:italic;\">
  SplitFac<sub>i</sub> = AArray[i] /ATot
</p>whereby <code>ATot</code> is the sum of <code>AArray</code>. To
perform this, <code>AExt</code> and <code>AWin</code> can just be set
to vectors of zeros with length 1. For solar radiation through windows,
the window and wall area with the same orientation as the incoming
radiation should be subtracted as these areas cannot be hit by the
radiation. This needs to be done separately for each orientation and
for exterior walls and windows only, according to:
<p align=\"center\" style=\"font-style:italic;\">
  SplitFac<sub>i,k</sub> = (AArray[i] - AExt[k]) /(ATot - AExt[k]
  -AWin[k])
</p>and
<p align=\"center\" style=\"font-style:italic;\">
  SplitFac<sub>i,k</sub> = (AArray[i] - AWin[k]) /(ATot - AExt[k] -
  AWin[k])
</p>respectively. For all other walls, the equation is:
<p align=\"center\" style=\"font-style:italic;\">
  SplitFac<sub>i,k</sub> = AArray[i] /(ATot - AExt[k] - AWin[k])
</p>
<ul>
  <li>December 15, 2015 by Moritz Lauster:<br/>
    First Implementation.
  </li>
</ul>

-------- Errors --------
line 15 column 4 - Warning: <p> attribute "align" not allowed for HTML5
line 27 column 4 - Warning: <p> attribute "align" not allowed for HTML5
line 35 column 4 - Warning: <p> attribute "align" not allowed for HTML5
line 43 column 4 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/HeatPumps/Compressors/ScrollCompressor.mo ----
-------- HTML Code --------

 <p>
 Model for a scroll processor, as detailed in Jin (2002). The rate of heat transferred to the evaporator is given by:
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 Q&#775;<sub>Eva</sub> = m&#775;<sub>ref</sub> ( h<sub>Vap</sub>(T<sub>Eva</sub>) - h<sub>Liq</sub>(T<sub>Con</sub>) ).
 </p>
 <p>
 The power consumed by the compressor is given by a linear efficiency relation:
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 P = P<sub>Theoretical</sub> / &eta; + P<sub>Loss,constant</sub>.
 </p>
 <p>
 Variable speed is achieved by multiplying the full load suction volume flow rate
 by the normalized compressor speed. The power and heat transfer rates are forced
 to zero if the resulting heat pump state has higher evaporating pressure than
 condensing pressure.
 </p>
 <h4>Assumptions and limitations</h4>
 <p>
 The compression process is assumed isentropic. The thermal energy
 of superheating is ignored in the evaluation of the heat transferred to the refrigerant
 in the evaporator. There is no supercooling.
 </p>
 <h4>References</h4>
 <p>
 H. Jin.
 <i>
 Parameter estimation based models of water source heat pumps.
 </i>
 PhD Thesis. Oklahoma State University. Stillwater, Oklahoma, USA. 2002.
 </p>
 
 <ul>
 <li>
 January 25, 2019, by Michael Wetter:<br/>
 Added start value to avoid warning in JModelica.
 </li>
 <li>
 May 30, 2017, by Filip Jorissen:<br/>
 Removed <code>pressure_error</code> as
 this is replaced by
 <a href=\"modelica://AixLib.Fluid.HeatPumps.Compressors.BaseClasses.TemperatureProtection\">
 AixLib.Fluid.HeatPumps.Compressors.BaseClasses.TemperatureProtection</a>.
 See <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/769\">#769</a>.
 </li>
 <li>
 November 11, 2016, by Massimo Cimmino:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Model for a scroll processor, as detailed in Jin (2002). The rate of
  heat transferred to the evaporator is given by:
</p>
<p align=\"center\" style=\"font-style:italic;\">
  Q̇<sub>Eva</sub> = ṁ<sub>ref</sub> (
  h<sub>Vap</sub>(T<sub>Eva</sub>) - h<sub>Liq</sub>(T<sub>Con</sub>)
  ).
</p>
<p>
  The power consumed by the compressor is given by a linear efficiency
  relation:
</p>
<p align=\"center\" style=\"font-style:italic;\">
  P = P<sub>Theoretical</sub> / η + P<sub>Loss,constant</sub>.
</p>
<p>
  Variable speed is achieved by multiplying the full load suction
  volume flow rate by the normalized compressor speed. The power and
  heat transfer rates are forced to zero if the resulting heat pump
  state has higher evaporating pressure than condensing pressure.
</p>
<h4>
  Assumptions and limitations
</h4>
<p>
  The compression process is assumed isentropic. The thermal energy of
  superheating is ignored in the evaluation of the heat transferred to
  the refrigerant in the evaporator. There is no supercooling.
</p>
<h4>
  References
</h4>
<p>
  H. Jin. <i>Parameter estimation based models of water source heat
  pumps.</i> PhD Thesis. Oklahoma State University. Stillwater,
  Oklahoma, USA. 2002.
</p>
<ul>
  <li>January 25, 2019, by Michael Wetter:<br/>
    Added start value to avoid warning in JModelica.
  </li>
  <li>May 30, 2017, by Filip Jorissen:<br/>
    Removed <code>pressure_error</code> as this is replaced by <a href=
    \"modelica://AixLib.Fluid.HeatPumps.Compressors.BaseClasses.TemperatureProtection\">
    AixLib.Fluid.HeatPumps.Compressors.BaseClasses.TemperatureProtection</a>.
    See <a href=
    \"https://github.com/lbl-srg/modelica-buildings/issues/769\">#769</a>.
  </li>
  <li>November 11, 2016, by Massimo Cimmino:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 5 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 11 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/FMI/ExportContainers/ThermalZone.mo ----
-------- HTML Code --------

 <p>
 Model that is used as a container for a single thermal zone
 that is to be exported as an FMU.
 </p>
 <h4>Typical use and important parameters</h4>
 <p>
 To use this model as a container for an FMU, extend
 from this model, rather than instantiate it,
 add your thermal zone and a vector of mass flow rate sensors.
 By extending from this model, the top-level
 signal connectors on the left stay at the top-level, and hence
 will be visible at the FMI interface.
 </p>
 
 Note that
 <ul>
 <li>
 The vector of mass flow rate sensors is used to connect
 the thermal zone adapter and your thermal zone.
 </li>
 <li>
 The vector of mass flow rate sensors must have the size <code>nPorts</code>.
 </li>
 <li>
 All fluid ports of the mass flow rate sensor must be connected.
 </li>
 <li>
 If the vector of mass flow rate sensors is not used, and your themal zone
 has fluid ports which are autosized, then a direct connection between
 the thermal zone adpater <code>theZonAda</code> and your thermal
 zone will be rejected. The reason is because autosized fluid ports
 can only be connected to vector of ports whose sizes are literal.
 </li>
 </ul>
 
 <p>
 The example
 <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZone\">
 AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZone</a>
 shows how a simple thermal zone can be implemented and exported as
 an FMU.
 <!-- @include_Buildings
 The example
 <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.Validation.RoomHVAC\">
 AixLib.Fluid.FMI.ExportContainers.Validation.RoomHVAC</a>
 shows how such an FMU can be connected
 to an HVAC system that has signal flow.
 -->
 </p>
 
 <p>
 The conversion between the fluid ports and signal ports is done
 in the thermal zone adapter <code>theZonAda</code>.
 This adapter has a vector of fluid ports called <code>ports[nPorts]</code>
 which needs to be connected to the air volume of the thermal zone.
 At this port, air exchanged between the thermal zone, the HVAC system
 and any infiltration flow paths.
 </p>
 <p>
 This model has input signals <code>fluPor[nPorts]</code>, which carry
 the mass flow rate for each flow that is connected to <code>ports</code>, together with its
 temperature, water vapor mass fraction per total mass of the air (not per kg dry
 air), and trace substances. These quantities are always as if the flow
 enters the room, even if the flow is zero or negative.
 If a medium has no moisture, e.g., if <code>Medium.nXi=0</code>, or
 if it has no trace substances, e.g., if <code>Medium.nC=0</code>, then
 the output signal for these properties are removed.
 Thus, a thermal zone model that uses these signals to compute the
 heat added by the HVAC system need to implement an equation such as
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 Q<sub>sen</sub> = max(0, &#7745;<sub>sup</sub>) &nbsp; c<sub>p</sub> &nbsp; (T<sub>sup</sub> - T<sub>air,zon</sub>),
 </p>
 <p>
 where
 <i>Q<sub>sen</sub></i> is the sensible heat flow rate added to the thermal zone,
 <i>&#7745;<sub>sup</sub></i> is the supply air mass flow rate from
 the port <code>fluPor</code> (which is negative if it is an exhaust),
 <i>c<sub>p</sub></i> is the specific heat capacity at constant pressure,
 <i>T<sub>sup</sub></i> is the supply air temperature and
 <i>T<sub>air,zon</sub></i> is the zone air temperature.
 Note that without the <i>max(&middot;, &middot;)</i>, the energy
 balance would be wrong.
 For example,
 <!-- @include_Buildings
 models in the package
 <a href=\"modelica://AixLib.ThermalZones.Detailed\">
 AixLib.ThermalZones.Detailed</a> as well as
 -->
 the control volumes in
 <a href=\"modelica://AixLib.Fluid.MixingVolumes\">
 AixLib.Fluid.MixingVolumes</a>
 implement such a <i>max(&middot;, &middot;)</i> function.
 </p>
 <p>
 The zone air temperature,
 the water vapor mass fraction per total mass of the air (unless <code>Medium.nXi=0</code>)
 and trace substances (unless <code>Medium.nC=0</code>)
 can be obtained from the outupt connector
 <code>fluPor.backward</code>.
 These signals are the same as the inflowing fluid stream(s)
 at the port <code>theAdaZon.ports[1:nPorts]</code>.
 The fluid connector <code>ports[nPorts]</code> has a prescribed mass flow rate, but
 it does not set any pressure.
 </p>
 <p>
 This model has a user-defined parameter <code>nPorts</code>
 which sets the number of fluid ports, which in turn is used
 for the ports <code>fluPor</code> and <code>ports</code>.
 All <code>nPorts</code>
 <code>ports[1:nPorts]</code> need to be connected as demonstrated in the example
 <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZone\">
 AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZone</a>.
 </p>
 <p>
 <!-- @include_Buildings
 The example
 <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.Validation.RoomHVAC\">
 AixLib.Fluid.FMI.ExportContainers.Validation.RoomHVAC</a>
 shows conceptually how such an FMU can then be connected to a HVAC system
 that has signal flow.
 -->
 </p>
 
 <ul>
 <li>
 January 18, 2019, by Jianjun Hu:<br/>
 Limited the media choice to moist air.
 See <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1050\">#1050</a>.
 </li>
 <li>
 September 20, 2016, by Thierry S. Nouidui:<br/>
 Revised documentation to explain the rationale
 of needing mass flow rate sensors.
 </li>
 <li>
 June 29, 2016, by Michael Wetter:<br/>
 Revised implementation and documentation.
 </li>
 <li>
 April 27, 2016, by Thierry S. Nouidui:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Model that is used as a container for a single thermal zone that is
  to be exported as an FMU.
</p>
<h4>
  Typical use and important parameters
</h4>
<p>
  To use this model as a container for an FMU, extend from this model,
  rather than instantiate it, add your thermal zone and a vector of
  mass flow rate sensors. By extending from this model, the top-level
  signal connectors on the left stay at the top-level, and hence will
  be visible at the FMI interface.
</p>Note that
<ul>
  <li>The vector of mass flow rate sensors is used to connect the
  thermal zone adapter and your thermal zone.
  </li>
  <li>The vector of mass flow rate sensors must have the size
  <code>nPorts</code>.
  </li>
  <li>All fluid ports of the mass flow rate sensor must be connected.
  </li>
  <li>If the vector of mass flow rate sensors is not used, and your
  themal zone has fluid ports which are autosized, then a direct
  connection between the thermal zone adpater <code>theZonAda</code>
  and your thermal zone will be rejected. The reason is because
  autosized fluid ports can only be connected to vector of ports whose
  sizes are literal.
  </li>
</ul>
<p>
  The example <a href=
  \"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZone\">
  AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZone</a> shows
  how a simple thermal zone can be implemented and exported as an FMU. 
  <!-- @include_Buildings
 The example
 <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.Validation.RoomHVAC\">
 AixLib.Fluid.FMI.ExportContainers.Validation.RoomHVAC</a>
 shows how such an FMU can be connected
 to an HVAC system that has signal flow.
 -->
</p>
<p>
  The conversion between the fluid ports and signal ports is done in
  the thermal zone adapter <code>theZonAda</code>. This adapter has a
  vector of fluid ports called <code>ports[nPorts]</code> which needs
  to be connected to the air volume of the thermal zone. At this port,
  air exchanged between the thermal zone, the HVAC system and any
  infiltration flow paths.
</p>
<p>
  This model has input signals <code>fluPor[nPorts]</code>, which carry
  the mass flow rate for each flow that is connected to
  <code>ports</code>, together with its temperature, water vapor mass
  fraction per total mass of the air (not per kg dry air), and trace
  substances. These quantities are always as if the flow enters the
  room, even if the flow is zero or negative. If a medium has no
  moisture, e.g., if <code>Medium.nXi=0</code>, or if it has no trace
  substances, e.g., if <code>Medium.nC=0</code>, then the output signal
  for these properties are removed. Thus, a thermal zone model that
  uses these signals to compute the heat added by the HVAC system need
  to implement an equation such as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  Q<sub>sen</sub> = max(0, ṁ<sub>sup</sub>) &#160; c<sub>p</sub> &#160;
  (T<sub>sup</sub> - T<sub>air,zon</sub>),
</p>
<p>
  where <i>Q<sub>sen</sub></i> is the sensible heat flow rate added to
  the thermal zone, <i>ṁ<sub>sup</sub></i> is the supply air mass flow
  rate from the port <code>fluPor</code> (which is negative if it is an
  exhaust), <i>c<sub>p</sub></i> is the specific heat capacity at
  constant pressure, <i>T<sub>sup</sub></i> is the supply air
  temperature and <i>T<sub>air,zon</sub></i> is the zone air
  temperature. Note that without the <i>max(·, ·)</i>, the energy
  balance would be wrong. For example, <!-- @include_Buildings
 models in the package
 <a href=\"modelica://AixLib.ThermalZones.Detailed\">
 AixLib.ThermalZones.Detailed</a> as well as
 -->
   the control volumes in <a href=
  \"modelica://AixLib.Fluid.MixingVolumes\">AixLib.Fluid.MixingVolumes</a>
  implement such a <i>max(·, ·)</i> function.
</p>
<p>
  The zone air temperature, the water vapor mass fraction per total
  mass of the air (unless <code>Medium.nXi=0</code>) and trace
  substances (unless <code>Medium.nC=0</code>) can be obtained from the
  outupt connector <code>fluPor.backward</code>. These signals are the
  same as the inflowing fluid stream(s) at the port
  <code>theAdaZon.ports[1:nPorts]</code>. The fluid connector
  <code>ports[nPorts]</code> has a prescribed mass flow rate, but it
  does not set any pressure.
</p>
<p>
  This model has a user-defined parameter <code>nPorts</code> which
  sets the number of fluid ports, which in turn is used for the ports
  <code>fluPor</code> and <code>ports</code>. All <code>nPorts</code>
  <code>ports[1:nPorts]</code> need to be connected as demonstrated in
  the example <a href=
  \"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZone\">
  AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZone</a>.
</p>
<p>
  <!-- @include_Buildings
 The example
 <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.Validation.RoomHVAC\">
 AixLib.Fluid.FMI.ExportContainers.Validation.RoomHVAC</a>
 shows conceptually how such an FMU can then be connected to a HVAC system
 that has signal flow.
 -->
</p>
<ul>
  <li>January 18, 2019, by Jianjun Hu:<br/>
    Limited the media choice to moist air. See <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1050\">#1050</a>.
  </li>
  <li>September 20, 2016, by Thierry S. Nouidui:<br/>
    Revised documentation to explain the rationale of needing mass flow
    rate sensors.
  </li>
  <li>June 29, 2016, by Michael Wetter:<br/>
    Revised implementation and documentation.
  </li>
  <li>April 27, 2016, by Thierry S. Nouidui:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 72 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/HeatExchangers/Radiators/RadiatorEN442_2.mo ----
-------- HTML Code --------

 <p>
 This is a model of a radiator that can be used as a dynamic or steady-state model.
 The required parameters are data that are typically available from
 manufacturers that follow the European Norm EN 442-2.
 </p>
 <p>
 However, to allow for varying mass flow rates, the transferred heat is computed
 using a discretization along the water flow path, and heat is exchanged between
 each compartment and a uniform room air and radiation temperature.
 This discretization is different from the computation in EN 442-2, which
 may yield water outlet temperatures that are below
 the room temperature at low mass flow rates.
 Furthermore, rather than using only one room temperature, this model uses
 a room air and room radiation temperature.
 </p>
 <p>
 The transferred heat is modeled as follows:
 Let <i>N</i> denote the number of elements used to discretize the radiator model.
 For each element <i>i &isin; {1, &hellip; , N}</i>,
 the convective and radiative heat transfer
 <i>Q<sup>i</sup><sub>c</sub></i> and
 <i>Q<sup>i</sup><sub>r</sub></i>
 from the radiator to the room is
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   Q<sup>i</sup><sub>c</sub> = sign(T<sup>i</sup>-T<sub>a</sub>)
      (1-f<sub>r</sub>) UA &frasl; N |T<sup>i</sup>-T<sub>a</sub>|<sup>n</sup>
   <br/> <br/>
   Q<sup>i</sup><sub>r</sub> = sign(T<sup>i</sup>-T<sub>r</sub>)
      f<sub>r</sub> UA &frasl; N |T<sup>i</sup>-T<sub>r</sub>|<sup>n</sup>
 </p>
 <p>
 where
 <i>T<sup>i</sup></i> is the water temperature of the element,
 <i>T<sub>a</sub></i> is the temperature of the room air,
 <i>T<sub>r</sub></i> is the radiative temperature,
 <i>0 &lt; f<sub>r</sub> &lt; 1</i> is the fraction of radiant to total heat transfer,
 <i>UA</i> is the UA-value of the radiator,
 and
 <i>n</i> is an exponent for the heat transfer.
 The model computes the UA-value by numerically solving the above equations
 for given
 nominal heating power, nominal temperatures, fraction radiant to total heat transfer
 and exponent for heat transfer.
 </p>
 <p>
 The parameter <code>energyDynamics</code> (in the Assumptions tab),
 determines whether the model computes the dynamic or the steady-state response.
 For the transient response, heat storage is computed using a
 finite volume approach for the
 water and the metal mass, which are both assumed to be at the same
 temperature.
 </p>
 <p>
 The default parameters for the heat capacities are valid for a flat plate radiator without fins,
 with one plate of water carying fluid, and a height of 0.42 meters.
 </p>
 
 <ul>
 <li>
 March 7, 2022, by Michael Wetter:<br/>
 Set <code>final massDynamics=energyDynamics</code>.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1542\">#1542</a>.
 </li>
 <li>
 April 14, 2020, by Michael Wetter:<br/>
 Changed <code>homotopyInitialization</code> to a constant.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1341\">IBPSA, #1341</a>.
 </li>
 <li>
 February 21, 2020, by Michael Wetter:<br/>
 Changed icon to display its operating state.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1294\">#1294</a>.
 </li>
 <li>
 November 17, 2016, by Filip Jorissen:<br/>
 Added pressure drop equations and parameters.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/586\">#586</a>.
 </li>
 <li>
 November 3, 2016, by Michael Wetter:<br/>
 Set <code>preHea(final alpha=0)</code> as this allows to simplify the
 system of equations.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/570\">#570</a>.
 </li>
 <li>
 March 17, 2016, by Michael Wetter:<br/>
 Reformulated model to reduce the dimension of the nonlinear system of equations.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/435\">#435</a>.
 </li>
 <li>
 November 19, 2015, by Michael Wetter:<br/>
 Removed assignment of parameter
 <code>showDesignFlowDirection</code> in <code>extends</code> statement.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/349\">#349</a>.
 </li>
 <li>
 April 11, 2015, by Filip Jorissen:<br/>
 Propagated <code>vol.massDynamics</code> to
 top level parameter <code>massDynamics</code> instead of <code>energyDynamics</code>.
 </li>
 <li>
 November 25, 2014, by Carles Ribas Tugores:<br/>
 Interchange position of <code>fraRad</code> parameter and the complementary <code>(1-fraRad)</code>
 in the equation used to calculate the nominal heating power of each element, <code>QEle_flow_nominal[i]</code>.
 </li>
 <li>
 October 29, 2014, by Michael Wetter:<br/>
 Made assignment of <code>mFactor</code> final, and changed computation of
 density to use default medium states as are also used to compute the
 specific heat capacity.
 </li>
 <li>
 October 21, 2014, by Filip Jorissen:<br/>
 Added parameter <code>mFactor</code> and removed thermal capacity
 which can lead to an index reduction.
 </li>
 <li>
 May 29, 2014, by Michael Wetter:<br/>
 Removed undesirable annotation <code>Evaluate=true</code>.
 </li>
 <li>
 October 8, 2013 by Michael Wetter:<br/>
 Removed conditional statement in the declaration of the parameter
 <code>mDry</code>, as this is incorrect syntax.
 </li>
 <li>
 September 26, 2013 by Michael Wetter:<br/>
 Reformulated implementation to avoid mixing textual and graphical
 declarations in the <code>equation</code> section.
 </li>
 <li>
 April 4, 2011 by Michael Wetter:<br/>
 Changed the implementation to use
 <a href=\"modelica://AixLib.Utilities.Math.Functions.regNonZeroPower\">
 AixLib.Utilities.Math.Functions.regNonZeroPower</a>.
 This allows formulating the model without any non-differentiable function
 inside the equation section.
 </li>
 <li>
 April 2, 2011 by Michael Wetter:<br/>
 Added <code>homotopy</code> operator.
 </li>
 <li>
 February 11, 2011 by Michael Wetter:<br/>
 Revised the initialization to ensure that at the nominal conditions, the
 amount of transferred heat is excatly the same as the specified nominal power.
 In the previous implementation, the UA-value was computed using a simplified
 expression for the temperature difference, leading to a slightly different amount
 of heat transfer.
 </li>
 <li>
 February 4, 2011 by Michael Wetter:<br/>
 Simplified implementation.
 </li>
 <li>
 January 30, 2009 by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This is a model of a radiator that can be used as a dynamic or
  steady-state model. The required parameters are data that are
  typically available from manufacturers that follow the European Norm
  EN 442-2.
</p>
<p>
  However, to allow for varying mass flow rates, the transferred heat
  is computed using a discretization along the water flow path, and
  heat is exchanged between each compartment and a uniform room air and
  radiation temperature. This discretization is different from the
  computation in EN 442-2, which may yield water outlet temperatures
  that are below the room temperature at low mass flow rates.
  Furthermore, rather than using only one room temperature, this model
  uses a room air and room radiation temperature.
</p>
<p>
  The transferred heat is modeled as follows: Let <i>N</i> denote the
  number of elements used to discretize the radiator model. For each
  element <i>i ∈ {1, … , N}</i>, the convective and radiative heat
  transfer <i>Q<sup>i</sup><sub>c</sub></i> and
  <i>Q<sup>i</sup><sub>r</sub></i> from the radiator to the room is
</p>
<p align=\"center\" style=\"font-style:italic;\">
  Q<sup>i</sup><sub>c</sub> = sign(T<sup>i</sup>-T<sub>a</sub>)
  (1-f<sub>r</sub>) UA ⁄ N
  |T<sup>i</sup>-T<sub>a</sub>|<sup>n</sup><br/>
  <br/>
  Q<sup>i</sup><sub>r</sub> = sign(T<sup>i</sup>-T<sub>r</sub>)
  f<sub>r</sub> UA ⁄ N |T<sup>i</sup>-T<sub>r</sub>|<sup>n</sup>
</p>
<p>
  where <i>T<sup>i</sup></i> is the water temperature of the element,
  <i>T<sub>a</sub></i> is the temperature of the room air,
  <i>T<sub>r</sub></i> is the radiative temperature, <i>0 &lt;
  f<sub>r</sub> &lt; 1</i> is the fraction of radiant to total heat
  transfer, <i>UA</i> is the UA-value of the radiator, and <i>n</i> is
  an exponent for the heat transfer. The model computes the UA-value by
  numerically solving the above equations for given nominal heating
  power, nominal temperatures, fraction radiant to total heat transfer
  and exponent for heat transfer.
</p>
<p>
  The parameter <code>energyDynamics</code> (in the Assumptions tab),
  determines whether the model computes the dynamic or the steady-state
  response. For the transient response, heat storage is computed using
  a finite volume approach for the water and the metal mass, which are
  both assumed to be at the same temperature.
</p>
<p>
  The default parameters for the heat capacities are valid for a flat
  plate radiator without fins, with one plate of water carying fluid,
  and a height of 0.42 meters.
</p>
<ul>
  <li>March 7, 2022, by Michael Wetter:<br/>
    Set <code>final massDynamics=energyDynamics</code>.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1542\">#1542</a>.
  </li>
  <li>April 14, 2020, by Michael Wetter:<br/>
    Changed <code>homotopyInitialization</code> to a constant.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1341\">IBPSA,
    #1341</a>.
  </li>
  <li>February 21, 2020, by Michael Wetter:<br/>
    Changed icon to display its operating state.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1294\">#1294</a>.
  </li>
  <li>November 17, 2016, by Filip Jorissen:<br/>
    Added pressure drop equations and parameters.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/586\">#586</a>.
  </li>
  <li>November 3, 2016, by Michael Wetter:<br/>
    Set <code>preHea(final alpha=0)</code> as this allows to simplify
    the system of equations.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/570\">#570</a>.
  </li>
  <li>March 17, 2016, by Michael Wetter:<br/>
    Reformulated model to reduce the dimension of the nonlinear system
    of equations. This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/435\">#435</a>.
  </li>
  <li>November 19, 2015, by Michael Wetter:<br/>
    Removed assignment of parameter
    <code>showDesignFlowDirection</code> in <code>extends</code>
    statement. This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/349\">#349</a>.
  </li>
  <li>April 11, 2015, by Filip Jorissen:<br/>
    Propagated <code>vol.massDynamics</code> to top level parameter
    <code>massDynamics</code> instead of <code>energyDynamics</code>.
  </li>
  <li>November 25, 2014, by Carles Ribas Tugores:<br/>
    Interchange position of <code>fraRad</code> parameter and the
    complementary <code>(1-fraRad)</code> in the equation used to
    calculate the nominal heating power of each element,
    <code>QEle_flow_nominal[i]</code>.
  </li>
  <li>October 29, 2014, by Michael Wetter:<br/>
    Made assignment of <code>mFactor</code> final, and changed
    computation of density to use default medium states as are also
    used to compute the specific heat capacity.
  </li>
  <li>October 21, 2014, by Filip Jorissen:<br/>
    Added parameter <code>mFactor</code> and removed thermal capacity
    which can lead to an index reduction.
  </li>
  <li>May 29, 2014, by Michael Wetter:<br/>
    Removed undesirable annotation <code>Evaluate=true</code>.
  </li>
  <li>October 8, 2013 by Michael Wetter:<br/>
    Removed conditional statement in the declaration of the parameter
    <code>mDry</code>, as this is incorrect syntax.
  </li>
  <li>September 26, 2013 by Michael Wetter:<br/>
    Reformulated implementation to avoid mixing textual and graphical
    declarations in the <code>equation</code> section.
  </li>
  <li>April 4, 2011 by Michael Wetter:<br/>
    Changed the implementation to use <a href=
    \"modelica://AixLib.Utilities.Math.Functions.regNonZeroPower\">AixLib.Utilities.Math.Functions.regNonZeroPower</a>.
    This allows formulating the model without any non-differentiable
    function inside the equation section.
  </li>
  <li>April 2, 2011 by Michael Wetter:<br/>
    Added <code>homotopy</code> operator.
  </li>
  <li>February 11, 2011 by Michael Wetter:<br/>
    Revised the initialization to ensure that at the nominal
    conditions, the amount of transferred heat is excatly the same as
    the specified nominal power. In the previous implementation, the
    UA-value was computed using a simplified expression for the
    temperature difference, leading to a slightly different amount of
    heat transfer.
  </li>
  <li>February 4, 2011 by Michael Wetter:<br/>
    Simplified implementation.
  </li>
  <li>January 30, 2009 by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 26 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Geothermal/Borefields/Types.mo ----
-------- HTML Code --------

 <p>
 Enumeration that defines the pipe configuration in the borehole.
 </p>
 <p>
 The following pipe configurations are available in this enumeration:
 </p>
 <table summary=\"summary\" border=\"1\">
 <tr><th>Enumeration</th><th>Description</th></tr>
 <tr><td>SingleUTube</td><td>Single U-tube configuration</td></tr>
 
 <tr><td>DoubleUTubeParallel</td><td>Double U-tube configuration with pipes connected in parallel</td></tr>
 <tr><td>DoubleUTubeSeries</td><td>Double U-tube configuration with pipes connected in series</td></tr>
 </table>
 
 <ul>
 <li>
 July 15, 2018, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
  <p>
  This package contains type definitions.
  </p>
  
-------- Corrected Code --------
<p>
  Enumeration that defines the pipe configuration in the borehole.
</p>
<p>
  The following pipe configurations are available in this enumeration:
</p>
<table summary=\"summary\" border=\"1\">
  <tr>
    <th>
      Enumeration
    </th>
    <th>
      Description
    </th>
  </tr>
  <tr>
    <td>
      SingleUTube
    </td>
    <td>
      Single U-tube configuration
    </td>
  </tr>
  <tr>
    <td>
      DoubleUTubeParallel
    </td>
    <td>
      Double U-tube configuration with pipes connected in parallel
    </td>
  </tr>
  <tr>
    <td>
      DoubleUTubeSeries
    </td>
    <td>
      Double U-tube configuration with pipes connected in series
    </td>
  </tr>
</table>
<ul>
  <li>July 15, 2018, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This package contains type definitions.
</p>

-------- Errors --------
line 8 column 2 - Warning: The summary attribute on the <table> element is obsolete in HTML5


---- AixLib/ThermalZones/ReducedOrder/RC/ThreeElements.mo ----
-------- HTML Code --------

 <ul>
 <li>
 March 7, 2022, by Michael Wetter:<br/>
 Removed <code>massDynamics</code>.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1542\">#1542</a>.
 </li>
 <li>
 December 9, 2019, by Moritz Lauster:<br/>
 Changes <code>nExt</code> to <code>nFloor</code> for
 <code>RFloor</code> and <code>CFloor</code>
 </li>
 <li>
 July 11, 2019, by Katharina Brinkmann:<br/>
 Renamed <code>alphaFloor</code> to <code>hConFloor</code>,
 <code>alphaFloorConst</code> to <code>hConFloor_const</code>
 </li>
 <li>
 August 31, 2018 by Moritz Lauster:<br/>
 Updated schema in documentation to fix
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/997\">
 issue 997</a>.
 </li>
 <li>
 July 15, 2015 by Moritz Lauster:<br/>
 First Implementation.
 </li>
 </ul>
 
   <p>This model adds one further element for
   the floor plate. Long-term effects dominate the excitation of the floor plate
   and thus the excitation fundamentally differs from excitation of outer walls.
   Adding an extra element for the floor plate leads to a finer resolution of the
   dynamic behaviour but increases calculation times. The floor plate is
   parameterized via the length of the RC-chain <code>nFloor</code>,
   the vector of the capacities
   <code>CFloor[nFloor]</code>, the vector of the resistances
   <code>RFloor[nFloor]</code>
   and the remaining resistance <code>RFloorRem</code>.
   </p>
   <p>
   The image below shows the RC-network of this model.
   </p>
   <p align=\"center\">
   <img src=\"modelica://AixLib/Resources/Images/ThermalZones/ReducedOrder/RC/ThreeElements.png\" alt=\"image\"/>
   </p>
   
-------- Corrected Code --------
<ul>
  <li>March 7, 2022, by Michael Wetter:<br/>
    Removed <code>massDynamics</code>.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1542\">#1542</a>.
  </li>
  <li>December 9, 2019, by Moritz Lauster:<br/>
    Changes <code>nExt</code> to <code>nFloor</code> for
    <code>RFloor</code> and <code>CFloor</code>
  </li>
  <li>July 11, 2019, by Katharina Brinkmann:<br/>
    Renamed <code>alphaFloor</code> to <code>hConFloor</code>,
    <code>alphaFloorConst</code> to <code>hConFloor_const</code>
  </li>
  <li>August 31, 2018 by Moritz Lauster:<br/>
    Updated schema in documentation to fix <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/997\">issue 997</a>.
  </li>
  <li>July 15, 2015 by Moritz Lauster:<br/>
    First Implementation.
  </li>
</ul>
<p>
  This model adds one further element for the floor plate. Long-term
  effects dominate the excitation of the floor plate and thus the
  excitation fundamentally differs from excitation of outer walls.
  Adding an extra element for the floor plate leads to a finer
  resolution of the dynamic behaviour but increases calculation times.
  The floor plate is parameterized via the length of the RC-chain
  <code>nFloor</code>, the vector of the capacities
  <code>CFloor[nFloor]</code>, the vector of the resistances
  <code>RFloor[nFloor]</code> and the remaining resistance
  <code>RFloorRem</code>.
</p>
<p>
  The image below shows the RC-network of this model.
</p>
<p align=\"center\">
  <img src=
  \"modelica://AixLib/Resources/Images/ThermalZones/ReducedOrder/RC/ThreeElements.png\"
  alt=\"image\">
</p>

-------- Errors --------
line 16 column 4 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Sensors/UsersGuide.mo ----
-------- HTML Code --------

<p>
This package contains models of sensors.
There are models with one and with two fluid ports.
</p>

<h4>Selection and parameterization of sensor models</h4>
<p>
When selecting a sensor model, a distinction needs to be made
whether the measured quantity depends on the direction of the flow or
not, and whether the sensor output signal is the product of the mass flow rate
and a medium property.
</p>

<p>
Output signals that depend on the flow direction and are not multiplied by
the mass flow rate are temperature, relative humidity,
water vapor concentration <i>X</i>, trace substances <i>C</i> and density.
For such quantities, sensors with two fluid ports need to be used.
An exception is if the quantity is measured directly in a fluid volume, which is the case
for models from the package
<a href=\"modelica://AixLib.Fluid.MixingVolumes\">
AixLib.Fluid.MixingVolumes</a>.
Therefore, to measure for example the outlet temperature of a heat exchanger, the
configuration labelled <em>correct use</em> in the figure below should be used, and not the configuration
labelled <em>not recommended</em>.
For an explanation, see
<a href=\"modelica://Modelica.Fluid.Examples.Explanatory.MeasuringTemperature\">
Modelica.Fluid.Examples.Explanatory.MeasuringTemperature</a>.
</p>

<table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\">
<tr><th valign=\"top\" align=\"left\">Correct use</th>
    <td valign=\"top\">
    <img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/Sensors/twoPortHex.png\" />
    </td>
</tr>
<tr><th valign=\"top\" align=\"left\">Not recommended</th>
    <td valign=\"top\">
    <img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/Sensors/onePortHex.png\" />
    </td>
</tr>
</table>

<p>
Except for the mass flow rate sensor,
all sensors with two ports can be
configured as dynamic sensors or as steady-state sensor.
The list below advices on how to configure sensors.
</p>
<ul>
<li>
<p>
<em>
Sensors for quantities that depend on the direction of the mass flow rate but
not of its magnitude:
</em>
Such quantities include density, mass fraction, PPM, relative humidity, specific enthalpy, specific entropy and trace substances.
Not that these are all quantities that are carried by the fluid that flows through the sensor.
For these sensors, if the parameter <code>allowFlowReversal=true</code> is set (which is the default setting),
then it is strongly recommended to configure them
as a dynamic sensor. This is the default setting.<br/>
Configuring a sensor as a dynamic sensor is done by setting the time constant to a non-zero
value. Typically, setting <code>tau=10</code> seconds yields good results.
For <code>tau=0</code>, numerical problems may occur if the mass flow rate is close to zero
and <code>allowFlowReversal=true</code>.<br/>
If <code>allowFlowReversal=false</code>, then the measurement of these sensors only depends on properties
at <code>port_a</code>.
If the mass flow rate at <code>port_a</code> is <i>m&#775;<sub>a</sub> &le; 0</i>,
i.e., fluid flows from <code>port_b</code> to <code>port_a</code>,
the model still assumes <i>m&#775;<sub>a</sub> &gt; 0</i>. Hence there are no numerical problems;
but use of the sensor output may yield wrong results.
Therefore, only set <code>allowFlowReversal=false</code> if you can guarantee <i>m&#775;<sub>a</sub> &ge; 0</i>.
</p>
</li>
<li>
<p>
<em>
Sensors for quantities that are the product of mass flow rate times a measured fluid property:
</em>
Such quantities include volumentric flow rate or enthalpy flow rate.
For these quantities, sensors are by default configured as steady-state sensor.
These sensors may be configured by the user
as a dynamic sensor by setting <code>tau &gt; 0</code>, but there is typically no benefit as these sensors typically
do not cause numerical problems.
The reason is that these sensors multiply the quantity that is carried by the flow,
such as specific enthalpy <i>h</i> by the mass flow rate <i>m&#775;</i>
to compute the measured signal <i>H&#775;=m&#775; h</i>.
Hence, as the mass flow rate goes to zero, the sensor output
signal also goes to zero, which avoids numerical problems.
</p>
</li>
<li>
<p>
<em>Static pressure measurements:
</em>
For static pressure measurements, sensors always output the instantaneous measurement.
These sensors cannot be configured to be dynamic.
</p>
</li>
</ul>
<p>
The table below summarizes the recommendations for the use of sensors.
</p>
<table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\">
<tr><th rowspan=\"2\" valign=\"top\">Measured quantity</th>
    <th rowspan=\"2\" valign=\"top\">One port sensor</th>
    <th colspan=\"2\" valign=\"top\">Two port sensor</th>
</tr>
<tr><td valign=\"top\">steady-state (<code>tau=0</code>)</td>
    <td valign=\"top\">dynamic (<code>tau &gt; 0</code>)</td>
</tr>
<tr><td valign=\"top\">temperature<br/>
                       relative humidity<br/>
                       mass fraction<br/>
                       trace substances<br/>
                       specific enthalpy<br/>
                       specific entropy</td>
    <td valign=\"top\">use only if connected to a volume</td>
    <td valign=\"top\">avoid</td>
    <td valign=\"top\">recommended</td>
</tr>
<tr><td valign=\"top\">volume flow rate<br/>
                       enthalpy flow rate<br/>
                       entropy flow rate</td>
    <td valign=\"top\">-</td>
    <td valign=\"top\">recommended</td>
    <td valign=\"top\">recommended</td>
</tr>
<tr><td valign=\"top\">pressure</td>
    <td valign=\"top\">recommended</td>
    <td valign=\"top\">recommended</td>
    <td valign=\"top\">recommended</td>
</tr>
</table>

<h4>Sensor Dynamics</h4>
<h5>Dynamic response to fluid flowing through the sensor</h5>
<p>
If a sensor is configured as a dynamic sensor by setting <code>tau &gt; 0</code>,
then the measured quantity, say the temperature <i>T</i>, is
computed as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  &tau; &nbsp; dT &frasl; dt = |m&#775;| &frasl; m&#775;<sub>0</sub> &nbsp; (&theta;-T),
</p>
<p>
where <i>&tau;</i> is a user-defined time constant of the sensor (a suggested value is around 10 seconds,
which is the default setting for the components),
<i>dT &frasl; dt</i> is the time derivative of the sensor output signal,
<i>|m&#775;|</i> is the absolute value of the mass flow rate,
<i>m&#775;<sub>0</sub></i> is the user-specified nominal value of the mass flow rate and
<i>&theta;</i> is the temperature of the medium inside the sensor.
An equivalent physical model of such a sensor would be a perfectly mixed volume
with a sensor that outputs the temperature of this volume. In this situation, the size of the volume would
be <i>V=&tau; &nbsp; m&#775;<sub>0</sub> &frasl; &rho;</i>, where
<i>&rho;</i> is the density of the fluid.
</p>
<h5>Dynamic response to ambient temperature</h5>
<p>
For the sensor
<a href=\"modelica://AixLib.Fluid.Sensors.TemperatureTwoPort\">
AixLib.Fluid.Sensors.TemperatureTwoPort</a>,
by setting <code>transferHeat = true</code>, heat transfer to a
fixed ambient can be approximated. The heat transfer is computed as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  &tau;<sub>HeaTra</sub> &nbsp; dT &frasl; dt = (T<sub>Amb</sub>-T),
</p>
<p>
where <i>&tau;<sub>HeaTra</sub></i> is a fixed time constant and
<i>T<sub>Amb</sub></i> is a fixed ambient temperature.
Setting <code>transferHeat = true</code> is useful if the sensor output <i>T</i>
is used to switch the mass flow rate on again. If <code>transferHeat = false</code>,
then the sensor output <i>T</i> remains constant if the mass flow rate is zero
and hence a fan or pump controller that uses this signal may never switch the device
on again.
If the sensor output <i>T</i> is not used to switch on the mass flow rate, then
in general one can use <code>transferHeat=false</code>.
</p>
<p>
Note that since in practice the heat transfer is due to a combination of ambient
temperature and upstream or downstream fluid temperature, for example by two-way
buoyancy-driven flow inside the duct or pipe, the model uses as an approximation
a fixed ambient temperature.
Since the sensor is not affecting the temperature of the medium, this approximation
of the heat transfer does not add or remove heat from the fluid.
</p>
<h5>Combined dynamic response</h5>
<p>
For the sensor
<a href=\"modelica://AixLib.Fluid.Sensors.TemperatureTwoPort\">
AixLib.Fluid.Sensors.TemperatureTwoPort</a>,
if both dynamic effects are enabled, then
the output <i>T</i> is computed as
</p>
<p align=\"center\" style=\"font-style:italic;\">
dT &frasl; dt = |m&#775;| &frasl; m&#775;<sub>0</sub> &nbsp; (&theta;-T) &frasl; &tau; +
(T<sub>Amb</sub>-T) &frasl;  &tau;<sub>HeaTra</sub>.
</p>
<h4>Implementation</h4>
<p>
The above equation is implemented in such a way that it is differentiable in the mass flow rate.
</p>
<p>
Note that the implementation of the dynamic sensors does not use the model
<a href=\"modelica://AixLib.Fluid.MixingVolumes\">
AixLib.Fluid.MixingVolumes</a>.
The reason is that depending on the selected medium model, the
mixing volume may introduce states for the pressure, species concentration,
trace substance, specific enthalpy and specific entropy. Not all states are typically needed to
model the dynamics of a sensor. Moreover, in many building system applications,
the sensor dynamics is not of concern, but is rather used here to avoid numerical
problems that steady-state models of sensors cause when flow rates are
very close to zero.
</p>

-------- Corrected Code --------
<p>
  This package contains models of sensors. There are models with one
  and with two fluid ports.
</p>
<h4>
  Selection and parameterization of sensor models
</h4>
<p>
  When selecting a sensor model, a distinction needs to be made whether
  the measured quantity depends on the direction of the flow or not,
  and whether the sensor output signal is the product of the mass flow
  rate and a medium property.
</p>
<p>
  Output signals that depend on the flow direction and are not
  multiplied by the mass flow rate are temperature, relative humidity,
  water vapor concentration <i>X</i>, trace substances <i>C</i> and
  density. For such quantities, sensors with two fluid ports need to be
  used. An exception is if the quantity is measured directly in a fluid
  volume, which is the case for models from the package <a href=
  \"modelica://AixLib.Fluid.MixingVolumes\">AixLib.Fluid.MixingVolumes</a>.
  Therefore, to measure for example the outlet temperature of a heat
  exchanger, the configuration labelled <em>correct use</em> in the
  figure below should be used, and not the configuration labelled
  <em>not recommended</em>. For an explanation, see <a href=
  \"modelica://Modelica.Fluid.Examples.Explanatory.MeasuringTemperature\">
  Modelica.Fluid.Examples.Explanatory.MeasuringTemperature</a>.
</p>
<table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\">
  <tr>
    <th valign=\"top\" align=\"left\">
      Correct use
    </th>
    <td valign=\"top\">
      <img alt=\"image\" src=
      \"modelica://AixLib/Resources/Images/Fluid/Sensors/twoPortHex.png\">
    </td>
  </tr>
  <tr>
    <th valign=\"top\" align=\"left\">
      Not recommended
    </th>
    <td valign=\"top\">
      <img alt=\"image\" src=
      \"modelica://AixLib/Resources/Images/Fluid/Sensors/onePortHex.png\">
    </td>
  </tr>
</table>
<p>
  Except for the mass flow rate sensor, all sensors with two ports can
  be configured as dynamic sensors or as steady-state sensor. The list
  below advices on how to configure sensors.
</p>
<ul>
  <li>
    <p>
      <em>Sensors for quantities that depend on the direction of the
      mass flow rate but not of its magnitude:</em> Such quantities
      include density, mass fraction, PPM, relative humidity, specific
      enthalpy, specific entropy and trace substances. Not that these
      are all quantities that are carried by the fluid that flows
      through the sensor. For these sensors, if the parameter
      <code>allowFlowReversal=true</code> is set (which is the default
      setting), then it is strongly recommended to configure them as a
      dynamic sensor. This is the default setting.<br/>
      Configuring a sensor as a dynamic sensor is done by setting the
      time constant to a non-zero value. Typically, setting
      <code>tau=10</code> seconds yields good results. For
      <code>tau=0</code>, numerical problems may occur if the mass flow
      rate is close to zero and
      <code>allowFlowReversal=true</code>.<br/>
      If <code>allowFlowReversal=false</code>, then the measurement of
      these sensors only depends on properties at <code>port_a</code>.
      If the mass flow rate at <code>port_a</code> is <i>ṁ<sub>a</sub>
      ≤ 0</i>, i.e., fluid flows from <code>port_b</code> to
      <code>port_a</code>, the model still assumes <i>ṁ<sub>a</sub>
      &gt; 0</i>. Hence there are no numerical problems; but use of the
      sensor output may yield wrong results. Therefore, only set
      <code>allowFlowReversal=false</code> if you can guarantee
      <i>ṁ<sub>a</sub> ≥ 0</i>.
    </p>
  </li>
  <li>
    <p>
      <em>Sensors for quantities that are the product of mass flow rate
      times a measured fluid property:</em> Such quantities include
      volumentric flow rate or enthalpy flow rate. For these
      quantities, sensors are by default configured as steady-state
      sensor. These sensors may be configured by the user as a dynamic
      sensor by setting <code>tau &gt; 0</code>, but there is typically
      no benefit as these sensors typically do not cause numerical
      problems. The reason is that these sensors multiply the quantity
      that is carried by the flow, such as specific enthalpy <i>h</i>
      by the mass flow rate <i>ṁ</i> to compute the measured signal
      <i>Ḣ=ṁ h</i>. Hence, as the mass flow rate goes to zero, the
      sensor output signal also goes to zero, which avoids numerical
      problems.
    </p>
  </li>
  <li>
    <p>
      <em>Static pressure measurements:</em> For static pressure
      measurements, sensors always output the instantaneous
      measurement. These sensors cannot be configured to be dynamic.
    </p>
  </li>
</ul>
<p>
  The table below summarizes the recommendations for the use of
  sensors.
</p>
<table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\">
  <tr>
    <th rowspan=\"2\" valign=\"top\">
      Measured quantity
    </th>
    <th rowspan=\"2\" valign=\"top\">
      One port sensor
    </th>
    <th colspan=\"2\" valign=\"top\">
      Two port sensor
    </th>
  </tr>
  <tr>
    <td valign=\"top\">
      steady-state (<code>tau=0</code>)
    </td>
    <td valign=\"top\">
      dynamic (<code>tau &gt; 0</code>)
    </td>
  </tr>
  <tr>
    <td valign=\"top\">
      temperature<br/>
      relative humidity<br/>
      mass fraction<br/>
      trace substances<br/>
      specific enthalpy<br/>
      specific entropy
    </td>
    <td valign=\"top\">
      use only if connected to a volume
    </td>
    <td valign=\"top\">
      avoid
    </td>
    <td valign=\"top\">
      recommended
    </td>
  </tr>
  <tr>
    <td valign=\"top\">
      volume flow rate<br/>
      enthalpy flow rate<br/>
      entropy flow rate
    </td>
    <td valign=\"top\">
      -
    </td>
    <td valign=\"top\">
      recommended
    </td>
    <td valign=\"top\">
      recommended
    </td>
  </tr>
  <tr>
    <td valign=\"top\">
      pressure
    </td>
    <td valign=\"top\">
      recommended
    </td>
    <td valign=\"top\">
      recommended
    </td>
    <td valign=\"top\">
      recommended
    </td>
  </tr>
</table>
<h4>
  Sensor Dynamics
</h4>
<h5>
  Dynamic response to fluid flowing through the sensor
</h5>
<p>
  If a sensor is configured as a dynamic sensor by setting <code>tau
  &gt; 0</code>, then the measured quantity, say the temperature
  <i>T</i>, is computed as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  τ &#160; dT ⁄ dt = |ṁ| ⁄ ṁ<sub>0</sub> &#160; (θ-T),
</p>
<p>
  where <i>τ</i> is a user-defined time constant of the sensor (a
  suggested value is around 10 seconds, which is the default setting
  for the components), <i>dT ⁄ dt</i> is the time derivative of the
  sensor output signal, <i>|ṁ|</i> is the absolute value of the mass
  flow rate, <i>ṁ<sub>0</sub></i> is the user-specified nominal value
  of the mass flow rate and <i>θ</i> is the temperature of the medium
  inside the sensor. An equivalent physical model of such a sensor
  would be a perfectly mixed volume with a sensor that outputs the
  temperature of this volume. In this situation, the size of the volume
  would be <i>V=τ &#160; ṁ<sub>0</sub> ⁄ ρ</i>, where <i>ρ</i> is the
  density of the fluid.
</p>
<h5>
  Dynamic response to ambient temperature
</h5>
<p>
  For the sensor <a href=
  \"modelica://AixLib.Fluid.Sensors.TemperatureTwoPort\">AixLib.Fluid.Sensors.TemperatureTwoPort</a>,
  by setting <code>transferHeat = true</code>, heat transfer to a fixed
  ambient can be approximated. The heat transfer is computed as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  τ<sub>HeaTra</sub> &#160; dT ⁄ dt = (T<sub>Amb</sub>-T),
</p>
<p>
  where <i>τ<sub>HeaTra</sub></i> is a fixed time constant and
  <i>T<sub>Amb</sub></i> is a fixed ambient temperature. Setting
  <code>transferHeat = true</code> is useful if the sensor output
  <i>T</i> is used to switch the mass flow rate on again. If
  <code>transferHeat = false</code>, then the sensor output <i>T</i>
  remains constant if the mass flow rate is zero and hence a fan or
  pump controller that uses this signal may never switch the device on
  again. If the sensor output <i>T</i> is not used to switch on the
  mass flow rate, then in general one can use
  <code>transferHeat=false</code>.
</p>
<p>
  Note that since in practice the heat transfer is due to a combination
  of ambient temperature and upstream or downstream fluid temperature,
  for example by two-way buoyancy-driven flow inside the duct or pipe,
  the model uses as an approximation a fixed ambient temperature. Since
  the sensor is not affecting the temperature of the medium, this
  approximation of the heat transfer does not add or remove heat from
  the fluid.
</p>
<h5>
  Combined dynamic response
</h5>
<p>
  For the sensor <a href=
  \"modelica://AixLib.Fluid.Sensors.TemperatureTwoPort\">AixLib.Fluid.Sensors.TemperatureTwoPort</a>,
  if both dynamic effects are enabled, then the output <i>T</i> is
  computed as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  dT ⁄ dt = |ṁ| ⁄ ṁ<sub>0</sub> &#160; (θ-T) ⁄ τ +
  (T<sub>Amb</sub>-T) ⁄ τ<sub>HeaTra</sub>.
</p>
<h4>
  Implementation
</h4>
<p>
  The above equation is implemented in such a way that it is
  differentiable in the mass flow rate.
</p>
<p>
  Note that the implementation of the dynamic sensors does not use the
  model <a href=
  \"modelica://AixLib.Fluid.MixingVolumes\">AixLib.Fluid.MixingVolumes</a>.
  The reason is that depending on the selected medium model, the mixing
  volume may introduce states for the pressure, species concentration,
  trace substance, specific enthalpy and specific entropy. Not all
  states are typically needed to model the dynamics of a sensor.
  Moreover, in many building system applications, the sensor dynamics
  is not of concern, but is rather used here to avoid numerical
  problems that steady-state models of sensors cause when flow rates
  are very close to zero.
</p>

-------- Errors --------
line 32 column 1 - Warning: The summary attribute on the <table> element is obsolete in HTML5
line 105 column 1 - Warning: The summary attribute on the <table> element is obsolete in HTML5
line 33 column 5 - Warning: <th> attribute "align" not allowed for HTML5
line 38 column 5 - Warning: <th> attribute "align" not allowed for HTML5
line 144 column 1 - Warning: <p> attribute "align" not allowed for HTML5
line 167 column 1 - Warning: <p> attribute "align" not allowed for HTML5
line 197 column 1 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/HeatPumps/ScrollWaterToWater.mo ----
-------- HTML Code --------

 <p>
 Model for a water to water heat pump with a scroll compressor, as described
 in Jin (2002). The thermodynamic heat pump cycle is represented below.
 </p>
 <p align=\"center\">
 <img  alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/HeatPumps/WaterToWater_Cycle.png\" border=\"1\"/>
 </p>
 <p>
 The rate of heat transferred to the evaporator is given by:
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 Q&#775;<sub>Eva</sub> = m&#775;<sub>ref</sub> ( h<sub>Vap</sub>(T<sub>Eva</sub>) - h<sub>Liq</sub>(T<sub>Con</sub>) ).
 </p>
 <p>
 The power consumed by the compressor is given by a linear efficiency relation:
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 P = P<sub>Theoretical</sub> / &eta; + P<sub>Loss,constant</sub>.
 </p>
 <p>
 Heat transfer in the evaporator and condenser is calculated using an
 &epsilon;-NTU method, assuming constant refrigerant temperature and constant heat
 transfer coefficient between fluid and refrigerant.
 </p>
 <p>
 Variable speed is achieved by multiplying the full load suction volume flow rate
 by the normalized compressor speed. The power and heat transfer rates are forced
 to zero if the resulting heat pump state has higher evaporating pressure than
 condensing pressure.
 </p>
 <p>
 The model parameters are obtained by calibration of the heat pump model to
 manufacturer performance data. Calibrated model parameters for various heat
 pumps from different manufacturers are found in
 <a href=\"modelica://AixLib.Fluid.HeatPumps.Data.ScrollWaterToWater\">
 AixLib.Fluid.HeatPumps.Data.ScrollWaterToWater</a>. The calibrated model is
 located in
 <a href=\"modelica://AixLib.Fluid.HeatPumps.Calibration.ScrollWaterToWater\">
 AixLib.Fluid.HeatPumps.Calibration.ScrollWaterToWater</a>.
 </p>
 <h4>Options</h4>
 <p>
 Parameters <code>TConMax</code> and <code>TEvaMin</code>
 may be used to set an upper or lower bound for the
 condenser and evaporator.
 The compressor is disabled when these conditions
 are not satisfied, or when the
 evaporator temperature is larger
 than the condenser temperature.
 This mimics the temperature protection
 of heat pumps and moreover it avoids
 non-converging algebraic loops of equations,
 or freezing of evaporator medium.
 This option can be disabled by setting
 <code>enable_temperature_protection = false</code>.
 </p>
 <h4>Assumptions and limitations</h4>
 <p>
 The compression process is assumed isentropic. The thermal energy
 of superheating is ignored in the evaluation of the heat transferred to the refrigerant
 in the evaporator. There is no supercooling.
 </p>
 <h4>References</h4>
 <p>
 H. Jin.
 <i>
 Parameter estimation based models of water source heat pumps.
 </i>
 PhD Thesis. Oklahoma State University. Stillwater, Oklahoma, USA. 2002.
 </p>
 
 <ul>
 <li>
 May 30, 2017, by Filip Jorissen:<br/>
 Revised documentation for temperature protection.
 See <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/769\">#769</a>.
 </li>
 <li>
 November 11, 2016, by Massimo Cimmino:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Model for a water to water heat pump with a scroll compressor, as
  described in Jin (2002). The thermodynamic heat pump cycle is
  represented below.
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/HeatPumps/WaterToWater_Cycle.png\"
  border=\"1\">
</p>
<p>
  The rate of heat transferred to the evaporator is given by:
</p>
<p align=\"center\" style=\"font-style:italic;\">
  Q̇<sub>Eva</sub> = ṁ<sub>ref</sub> (
  h<sub>Vap</sub>(T<sub>Eva</sub>) - h<sub>Liq</sub>(T<sub>Con</sub>)
  ).
</p>
<p>
  The power consumed by the compressor is given by a linear efficiency
  relation:
</p>
<p align=\"center\" style=\"font-style:italic;\">
  P = P<sub>Theoretical</sub> / η + P<sub>Loss,constant</sub>.
</p>
<p>
  Heat transfer in the evaporator and condenser is calculated using an
  ε-NTU method, assuming constant refrigerant temperature and constant
  heat transfer coefficient between fluid and refrigerant.
</p>
<p>
  Variable speed is achieved by multiplying the full load suction
  volume flow rate by the normalized compressor speed. The power and
  heat transfer rates are forced to zero if the resulting heat pump
  state has higher evaporating pressure than condensing pressure.
</p>
<p>
  The model parameters are obtained by calibration of the heat pump
  model to manufacturer performance data. Calibrated model parameters
  for various heat pumps from different manufacturers are found in
  <a href=
  \"modelica://AixLib.Fluid.HeatPumps.Data.ScrollWaterToWater\">AixLib.Fluid.HeatPumps.Data.ScrollWaterToWater</a>.
  The calibrated model is located in <a href=
  \"modelica://AixLib.Fluid.HeatPumps.Calibration.ScrollWaterToWater\">AixLib.Fluid.HeatPumps.Calibration.ScrollWaterToWater</a>.
</p>
<h4>
  Options
</h4>
<p>
  Parameters <code>TConMax</code> and <code>TEvaMin</code> may be used
  to set an upper or lower bound for the condenser and evaporator. The
  compressor is disabled when these conditions are not satisfied, or
  when the evaporator temperature is larger than the condenser
  temperature. This mimics the temperature protection of heat pumps and
  moreover it avoids non-converging algebraic loops of equations, or
  freezing of evaporator medium. This option can be disabled by setting
  <code>enable_temperature_protection = false</code>.
</p>
<h4>
  Assumptions and limitations
</h4>
<p>
  The compression process is assumed isentropic. The thermal energy of
  superheating is ignored in the evaluation of the heat transferred to
  the refrigerant in the evaporator. There is no supercooling.
</p>
<h4>
  References
</h4>
<p>
  H. Jin. <i>Parameter estimation based models of water source heat
  pumps.</i> PhD Thesis. Oklahoma State University. Stillwater,
  Oklahoma, USA. 2002.
</p>
<ul>
  <li>May 30, 2017, by Filip Jorissen:<br/>
    Revised documentation for temperature protection. See <a href=
    \"https://github.com/lbl-srg/modelica-buildings/issues/769\">#769</a>.
  </li>
  <li>November 11, 2016, by Massimo Cimmino:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 6 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 12 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 18 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/HeatExchangers/BaseClasses/WetCoilDryWetRegime.mo ----
-------- HTML Code --------

 <ul>
 <li>
 Jan 21, 2021, by Donghun Kim:<br/>First implementation.
 </li>
 </ul>
 
 <p>
 This model implements the switching algorithm for the dry and wet regime.
 </p>
 <p>
 The switching criteria for (counter-flow) cooling coil modes are as follows.</p>
 <p>
 R1: If the coil surface temperature at the air inlet is lower than the dew-point
 temperature at the inlet to the coil, then the cooling coil surface is fully-wet.</p>
 <p>
 R2: If the surface temperature at the air outlet section is higher than
 the dew-point temperature of the air at the inlet, then the cooling coil surface is fully-dry.</p>
 <p>
 At each point of a simulation time step, the fuzzy-modeling approach determines
 the weights for R1 and R2 respectively (namely <i>&mu;<sub>FW</sub></i> and <i>&mu;<sub>FD</sub></i>)
 from the dew-point and coil surface temperatures.</p>
 <p>
 It calculates total and sensible heat transfer rates according to the weights as follows.
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 Q&#775;<sub>tot</sub>=&mu;<sub>FD</sub> Q&#775;<sub>tot,FD</sub>+&mu;<sub>FW</sub> Q<sub>tot,FW</sub>
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 Q&#775;<sub>sen</sub>=&mu;<sub>FD</sub> Q&#775;<sub>sen,FD</sub>+&mu;<sub>FW</sub> Q<sub>sen,FW</sub>
 </p>
 <p>
 The fuzzy-modeling ensures <i>&mu;<sub>FW</sub> + &mu;<sub>FD</sub> = 1</i>,
 <i>&mu;<sub>FW</sub> &gt;=0</i> and <i>&mu;<sub>FD</sub> &gt;=0</i>, which means the fuzzy
 model outcomes of <i>Q&#775;<sub>sen</sub></i> and <i>Q&#775;<sub>tot</sub></i> are always convex combinations of heat transfer
 rates for fully-dry and fully-wet modes and therefore are always bounded by them.
 </p>
 <p>
 The modeling approach also results in <i>n</i>-th order differentiable model
 depending on the selection of the underlying membership functions. This cooling
 coil model is once continuously differentiable at the mode switches.
 </p>
 
-------- Corrected Code --------
<ul>
  <li>Jan 21, 2021, by Donghun Kim:<br/>
    First implementation.
  </li>
</ul>
<p>
  This model implements the switching algorithm for the dry and wet
  regime.
</p>
<p>
  The switching criteria for (counter-flow) cooling coil modes are as
  follows.
</p>
<p>
  R1: If the coil surface temperature at the air inlet is lower than
  the dew-point temperature at the inlet to the coil, then the cooling
  coil surface is fully-wet.
</p>
<p>
  R2: If the surface temperature at the air outlet section is higher
  than the dew-point temperature of the air at the inlet, then the
  cooling coil surface is fully-dry.
</p>
<p>
  At each point of a simulation time step, the fuzzy-modeling approach
  determines the weights for R1 and R2 respectively (namely
  <i>μ<sub>FW</sub></i> and <i>μ<sub>FD</sub></i>) from the dew-point
  and coil surface temperatures.
</p>
<p>
  It calculates total and sensible heat transfer rates according to the
  weights as follows.
</p>
<p align=\"center\" style=\"font-style:italic;\">
  Q̇<sub>tot</sub>=μ<sub>FD</sub> Q̇<sub>tot,FD</sub>+μ<sub>FW</sub>
  Q<sub>tot,FW</sub>
</p>
<p align=\"center\" style=\"font-style:italic;\">
  Q̇<sub>sen</sub>=μ<sub>FD</sub> Q̇<sub>sen,FD</sub>+μ<sub>FW</sub>
  Q<sub>sen,FW</sub>
</p>
<p>
  The fuzzy-modeling ensures <i>μ<sub>FW</sub> + μ<sub>FD</sub> =
  1</i>, <i>μ<sub>FW</sub> &gt;=0</i> and <i>μ<sub>FD</sub> &gt;=0</i>,
  which means the fuzzy model outcomes of <i>Q̇<sub>sen</sub></i> and
  <i>Q̇<sub>tot</sub></i> are always convex combinations of heat
  transfer rates for fully-dry and fully-wet modes and therefore are
  always bounded by them.
</p>
<p>
  The modeling approach also results in <i>n</i>-th order
  differentiable model depending on the selection of the underlying
  membership functions. This cooling coil model is once continuously
  differentiable at the mode switches.
</p>

-------- Errors --------
line 20 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 23 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Movers/Validation/PowerExact.mo ----
-------- HTML Code --------

 <p>
 This example is identical to
 <a href=\"modelica://AixLib.Fluid.Movers.Validation.PowerSimplified\">
 AixLib.Fluid.Movers.Validation.PowerSimplified</a>, except that the
 performance data for the flow controlled pumps
 <code>pump_dp</code> and <code>pump_m_flow</code> contain
 the pressure curves and efficiency curves.
 The plot below shows that this leads to a computation of the power consumption
 that is identical to the one from the speed controlled pump <code>pump_Nrpm</code>.
 </p>
 <p align=\"center\">
 <img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/Movers/Validation/PowerExact.png\"/>
 </p>
 
 <ul>
 <li>
 October 15, 2021, by Hongxiang Fu:<br/>
 Fixed the image in the documentation which was cut off
 at the <i>y</i>-axis. This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1533\">IBPSA, #1533</a>.
 </li>
 <li>
 March 2, 2016, by Filip Jorissen:<br/>
 First implementation for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/417\">#417</a>.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This example is identical to <a href=
  \"modelica://AixLib.Fluid.Movers.Validation.PowerSimplified\">AixLib.Fluid.Movers.Validation.PowerSimplified</a>,
  except that the performance data for the flow controlled pumps
  <code>pump_dp</code> and <code>pump_m_flow</code> contain the
  pressure curves and efficiency curves. The plot below shows that this
  leads to a computation of the power consumption that is identical to
  the one from the speed controlled pump <code>pump_Nrpm</code>.
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/Movers/Validation/PowerExact.png\">
</p>
<ul>
  <li>October 15, 2021, by Hongxiang Fu:<br/>
    Fixed the image in the documentation which was cut off at the
    <i>y</i>-axis. This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1533\">IBPSA,
    #1533</a>.
  </li>
  <li>March 2, 2016, by Filip Jorissen:<br/>
    First implementation for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/417\">#417</a>.
  </li>
</ul>

-------- Errors --------
line 12 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Geothermal/Borefields/BaseClasses/Boreholes/BaseClasses/Functions/convectionResistanceCircularPipe.mo ----
-------- HTML Code --------

 <p>
 This model computes the convection resistance in the pipes of a borehole segment 
 with heigth <i>h<sub>Seg</sub></i> using correlations suggested by Bergman et al. (2011).
 </p>
 <p>
 If the flow is laminar (<i>Re &le; 2300</i>, with <i>Re</i> being the Reynolds number of the flow),
 the Nusselt number of the flow is assumed to be constant at 3.66. If the flow is turbulent (<i>Re &gt; 2300</i>),
 the correlation of Dittus-Boelter is used to find the convection heat transfer coefficient as
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   Nu = 0.023 &nbsp; Re<sup>0.8</sup> &nbsp; Pr<sup>n</sup>,
 </p>
 <p>
 where <i>Nu</i> is the Nusselt number and 
 <i>Pr</i> is the Prandlt number.
 A value of <i>n=0.35</i> is used, as the reference uses <i>n=0.4</i> for heating and 
 <i>n=0.3</i> for cooling. To ensure that the function is continuously differentiable,
 a smooth transition between the laminar and turbulent values is created for the
 range <i>2300 &lt; Re &lt; 2400</i>.
 </p>
 <h4>References</h4>
 <p>
 Bergman, T. L., Incropera, F. P., DeWitt, D. P., &amp; Lavine, A. S. (2011). <i>Fundamentals of heat and mass
 transfer</i> (7th ed.). New York: John Wiley &amp; Sons.
 </p>
 
 <ul>
 <li>
 July 10, 2018, by Alex Laferri&egrave;re:<br/>
 Added laminar flow and smooth laminar-turbulent transition.
 Revised documentation.
 </li>
 <li>
 February 14, 2014, by Michael Wetter:<br/>
 Removed unused input <code>rBor</code>.
 Revised documentation.
 </li>
 <li>
 January 24, 2014, by Michael Wetter:<br/>
 Revised implementation. 
 Changed <code>cpFluid</code> to <code>cpMed</code> to use consistent notation.
 Added regularization for computation of convective heat transfer coefficient to
 avoid an event and a non-differentiability.
 </li>
 <li>
 January 23, 2014, by Damien Picard:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This model computes the convection resistance in the pipes of a
  borehole segment with heigth <i>h<sub>Seg</sub></i> using
  correlations suggested by Bergman et al. (2011).
</p>
<p>
  If the flow is laminar (<i>Re ≤ 2300</i>, with <i>Re</i> being the
  Reynolds number of the flow), the Nusselt number of the flow is
  assumed to be constant at 3.66. If the flow is turbulent (<i>Re &gt;
  2300</i>), the correlation of Dittus-Boelter is used to find the
  convection heat transfer coefficient as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  Nu = 0.023 &#160; Re<sup>0.8</sup> &#160; Pr<sup>n</sup>,
</p>
<p>
  where <i>Nu</i> is the Nusselt number and <i>Pr</i> is the Prandlt
  number. A value of <i>n=0.35</i> is used, as the reference uses
  <i>n=0.4</i> for heating and <i>n=0.3</i> for cooling. To ensure that
  the function is continuously differentiable, a smooth transition
  between the laminar and turbulent values is created for the range
  <i>2300 &lt; Re &lt; 2400</i>.
</p>
<h4>
  References
</h4>
<p>
  Bergman, T. L., Incropera, F. P., DeWitt, D. P., & Lavine, A. S.
  (2011). <i>Fundamentals of heat and mass transfer</i> (7th ed.). New
  York: John Wiley & Sons.
</p>
<ul>
  <li>July 10, 2018, by Alex Laferrière:<br/>
    Added laminar flow and smooth laminar-turbulent transition. Revised
    documentation.
  </li>
  <li>February 14, 2014, by Michael Wetter:<br/>
    Removed unused input <code>rBor</code>. Revised documentation.
  </li>
  <li>January 24, 2014, by Michael Wetter:<br/>
    Revised implementation. Changed <code>cpFluid</code> to
    <code>cpMed</code> to use consistent notation. Added regularization
    for computation of convective heat transfer coefficient to avoid an
    event and a non-differentiability.
  </li>
  <li>January 23, 2014, by Damien Picard:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 11 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Controls/SetPoints/Examples/OccupancySchedule.mo ----
-------- HTML Code --------

 <p>
 Example that demonstrates the use of the occupancy schedule.
 The figure below shows how the time until the next occupancy starts or ends
 is decreased. The red line hits zero when the schedule indicates an occupied time,
 and the blue line hits zero when the schedule indicates a non-occupied time.
 </p>
 <p align=\"center\">
 <img src=\"modelica://AixLib/Resources/Images/Controls/SetPoints/Examples/OccupancySchedule.png\" border=\"1\" alt=\"Time until next occupancy.\"/>
 </p>
 
 <ul>
 <li>
 November 21, 2011, by Michael Wetter:<br/>
 Added documentation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Example that demonstrates the use of the occupancy schedule. The
  figure below shows how the time until the next occupancy starts or
  ends is decreased. The red line hits zero when the schedule indicates
  an occupied time, and the blue line hits zero when the schedule
  indicates a non-occupied time.
</p>
<p align=\"center\">
  <img src=
  \"modelica://AixLib/Resources/Images/Controls/SetPoints/Examples/OccupancySchedule.png\"
  border=\"1\" alt=\"Time until next occupancy.\">
</p>
<ul>
  <li>November 21, 2011, by Michael Wetter:<br/>
    Added documentation.
  </li>
</ul>

-------- Errors --------
line 8 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/ThermalZones/ReducedOrder/RC/FourElements.mo ----
-------- HTML Code --------

 <ul>
 <li>
 March 7, 2022, by Michael Wetter:<br/>
 Removed <code>massDynamics</code>.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1542\">#1542</a>.
 </li>
 <li>
 December 9, 2019, by Moritz Lauster:<br/>
 Changes <code>nExt</code> to <code>nRoof</code> for
 <code>RRoof</code> and <code>CRoof</code>
 </li>
 <li>
 July 11, 2019, by Katharina Brinkmann:<br/>
 Renamed <code>alphaRoof</code> to <code>hConRoof</code>,
 <code>alphaRoofConst</code> to <code>hConRoof_const</code>
 </li>
 <li>
 August 31, 2018 by Moritz Lauster:<br/>
 Updated schema in documentation and fixes
 orientation and connections of roofRC for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/997\">
 issue 997</a>.
 </li>
 <li>
 September 11, 2015 by Moritz Lauster:<br/>
 First Implementation.
 </li>
 </ul>
 
   <p>
   This model adds another element for the roof. Roofs commonly
   exhibit the same excitations as exterior walls but have different coefficients
   of heat transfer due to their orientation. Adding an extra element for the roof
   might lead to a finer resolution of the dynamic behaviour but increases
   calculation times. The roof is parameterized via the length of the RC-chain
   <code>nRoof</code>,
   the vector of capacities <code>CRoof[nRoof]</code>, the vector of resistances
   <code>RRoof[nRoof]</code> and remaining resistances <code>RRoofRem</code>.
   </p>
   <p>
   The image below shows the RC-network of this model.
   </p>
   <p align=\"center\">
   <img src=\"modelica://AixLib/Resources/Images/ThermalZones/ReducedOrder/RC/FourElements.png\" alt=\"image\"/>
   </p>
   
-------- Corrected Code --------
<ul>
  <li>March 7, 2022, by Michael Wetter:<br/>
    Removed <code>massDynamics</code>.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1542\">#1542</a>.
  </li>
  <li>December 9, 2019, by Moritz Lauster:<br/>
    Changes <code>nExt</code> to <code>nRoof</code> for
    <code>RRoof</code> and <code>CRoof</code>
  </li>
  <li>July 11, 2019, by Katharina Brinkmann:<br/>
    Renamed <code>alphaRoof</code> to <code>hConRoof</code>,
    <code>alphaRoofConst</code> to <code>hConRoof_const</code>
  </li>
  <li>August 31, 2018 by Moritz Lauster:<br/>
    Updated schema in documentation and fixes orientation and
    connections of roofRC for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/997\">issue 997</a>.
  </li>
  <li>September 11, 2015 by Moritz Lauster:<br/>
    First Implementation.
  </li>
</ul>
<p>
  This model adds another element for the roof. Roofs commonly exhibit
  the same excitations as exterior walls but have different
  coefficients of heat transfer due to their orientation. Adding an
  extra element for the roof might lead to a finer resolution of the
  dynamic behaviour but increases calculation times. The roof is
  parameterized via the length of the RC-chain <code>nRoof</code>, the
  vector of capacities <code>CRoof[nRoof]</code>, the vector of
  resistances <code>RRoof[nRoof]</code> and remaining resistances
  <code>RRoofRem</code>.
</p>
<p>
  The image below shows the RC-network of this model.
</p>
<p align=\"center\">
  <img src=
  \"modelica://AixLib/Resources/Images/ThermalZones/ReducedOrder/RC/FourElements.png\"
  alt=\"image\">
</p>

-------- Errors --------
line 15 column 4 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Chillers/Carnot_TEva.mo ----
-------- HTML Code --------

 <p>
 This is a model of a chiller whose coefficient of performance COP changes
 with temperatures in the same way as the Carnot efficiency changes.
 The control input is the setpoint of the evaporator leaving temperature, which
 is met exactly at steady state if the chiller has sufficient capacity.
 </p>
 <p>
 The model allows to either specify the Carnot effectivness
 <i>&eta;<sub>Carnot,0</sub></i>, or
 a <i>COP<sub>0</sub></i>
 at the nominal conditions, together with
 the evaporator temperature <i>T<sub>eva,0</sub></i> and
 the condenser temperature <i>T<sub>con,0</sub></i>, in which
 case the model computes the Carnot effectivness as
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 &eta;<sub>Carnot,0</sub> =
   COP<sub>0</sub>
 &frasl;  (T<sub>eva,0</sub> &frasl; (T<sub>con,0</sub>-T<sub>eva,0</sub>)).
 </p>
 <p>
 On the <code>Advanced</code> tab, a user can specify the temperatures that
 will be used as the evaporator and condenser temperature.
 </p>
 <p>
 During the simulation, the chiller COP is computed as the product
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   COP = &eta;<sub>Carnot,0</sub> COP<sub>Carnot</sub> &eta;<sub>PL</sub>,
 </p>
 <p>
 where <i>COP<sub>Carnot</sub></i> is the Carnot efficiency and
 <i>&eta;<sub>PL</sub></i> is a polynomial in the cooling part load ratio <i>y<sub>PL</sub></i>
 that can be used to take into account a change in <i>COP</i> at part load
 conditions.
 This polynomial has the form
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   &eta;<sub>PL</sub> = a<sub>1</sub> + a<sub>2</sub> y<sub>PL</sub> + a<sub>3</sub> y<sub>PL</sub><sup>2</sup> + ...
 </p>
 <p>
 where the coefficients <i>a<sub>i</sub></i>
 are declared by the parameter <code>a</code>.
 </p>
 <p>
 On the <code>Dynamics</code> tag, the model can be parametrized to compute a transient
 or steady-state response.
 The transient response of the model is computed using a first
 order differential equation for the evaporator and condenser fluid volumes.
 The chiller outlet temperatures are equal to the temperatures of these lumped volumes.
 </p>
 <h4>Typical use and important parameters</h4>
 <p>
 When using this component, make sure that the condenser has sufficient mass flow rate.
 Based on the evaporator mass flow rate, temperature difference and the efficiencies,
 the model computes how much heat will be added to the condenser.
 If the mass flow rate is too small, very high outlet temperatures can result.
 </p>
 <p>
 The evaporator heat flow rate <code>QEva_flow_nominal</code> is used to assign
 the default value for the mass flow rates, which are used for the pressure drop
 calculations.
 It is also used to compute the part load efficiency.
 Hence, make sure that <code>QEva_flow_nominal</code> is set to a reasonable value.
 </p>
 <p>
 The maximum cooling capacity is set by the parameter <code>QEva_flow_min</code>,
 which is by default set to negative infinity.
 </p>
 <p>
 The coefficient of performance depends on the
 evaporator and condenser leaving temperature
 since otherwise the second law of thermodynamics may be violated.
 </p>
 <h4>Notes</h4>
 <p>
 For a similar model that can be used as a heat pump, see
 <a href=\"modelica://AixLib.Fluid.HeatPumps.Examples.Carnot_TCon\">
 AixLib.Fluid.HeatPumps.Examples.Carnot_TCon</a>.
 </p>
 
 <ul>
 <li>
 May 8, 2017, by Michael Wetter:<br/>
 Replaced model that interfaces with fluid stream.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/763\">
 AixLib, #763</a>.
 </li>
 <li>
 January 2, 2017, by Filip Jorissen:<br/>
 Removed parameters
 <code>effInpEva</code> and <code>effInpCon</code>
 and updated documentation.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/497\">
 issue 497</a>.
 </li>
 <li>
 August 8, 2016, by Michael Wetter:<br/>
 Changed default temperature to compute COP to be the leaving temperature as
 use of the entering temperature can violate the 2nd law if the temperature
 lift is small.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/497\">
 Annex 60, issue 497</a>.
 </li>
 <li>
 November 25, 2015 by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This is a model of a chiller whose coefficient of performance COP
  changes with temperatures in the same way as the Carnot efficiency
  changes. The control input is the setpoint of the evaporator leaving
  temperature, which is met exactly at steady state if the chiller has
  sufficient capacity.
</p>
<p>
  The model allows to either specify the Carnot effectivness
  <i>η<sub>Carnot,0</sub></i>, or a <i>COP<sub>0</sub></i> at the
  nominal conditions, together with the evaporator temperature
  <i>T<sub>eva,0</sub></i> and the condenser temperature
  <i>T<sub>con,0</sub></i>, in which case the model computes the Carnot
  effectivness as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  η<sub>Carnot,0</sub> = COP<sub>0</sub> ⁄ (T<sub>eva,0</sub> ⁄
  (T<sub>con,0</sub>-T<sub>eva,0</sub>)).
</p>
<p>
  On the <code>Advanced</code> tab, a user can specify the temperatures
  that will be used as the evaporator and condenser temperature.
</p>
<p>
  During the simulation, the chiller COP is computed as the product
</p>
<p align=\"center\" style=\"font-style:italic;\">
  COP = η<sub>Carnot,0</sub> COP<sub>Carnot</sub> η<sub>PL</sub>,
</p>
<p>
  where <i>COP<sub>Carnot</sub></i> is the Carnot efficiency and
  <i>η<sub>PL</sub></i> is a polynomial in the cooling part load ratio
  <i>y<sub>PL</sub></i> that can be used to take into account a change
  in <i>COP</i> at part load conditions. This polynomial has the form
</p>
<p align=\"center\" style=\"font-style:italic;\">
  η<sub>PL</sub> = a<sub>1</sub> + a<sub>2</sub> y<sub>PL</sub> +
  a<sub>3</sub> y<sub>PL</sub><sup>2</sup> + ...
</p>
<p>
  where the coefficients <i>a<sub>i</sub></i> are declared by the
  parameter <code>a</code>.
</p>
<p>
  On the <code>Dynamics</code> tag, the model can be parametrized to
  compute a transient or steady-state response. The transient response
  of the model is computed using a first order differential equation
  for the evaporator and condenser fluid volumes. The chiller outlet
  temperatures are equal to the temperatures of these lumped volumes.
</p>
<h4>
  Typical use and important parameters
</h4>
<p>
  When using this component, make sure that the condenser has
  sufficient mass flow rate. Based on the evaporator mass flow rate,
  temperature difference and the efficiencies, the model computes how
  much heat will be added to the condenser. If the mass flow rate is
  too small, very high outlet temperatures can result.
</p>
<p>
  The evaporator heat flow rate <code>QEva_flow_nominal</code> is used
  to assign the default value for the mass flow rates, which are used
  for the pressure drop calculations. It is also used to compute the
  part load efficiency. Hence, make sure that
  <code>QEva_flow_nominal</code> is set to a reasonable value.
</p>
<p>
  The maximum cooling capacity is set by the parameter
  <code>QEva_flow_min</code>, which is by default set to negative
  infinity.
</p>
<p>
  The coefficient of performance depends on the evaporator and
  condenser leaving temperature since otherwise the second law of
  thermodynamics may be violated.
</p>
<h4>
  Notes
</h4>
<p>
  For a similar model that can be used as a heat pump, see <a href=
  \"modelica://AixLib.Fluid.HeatPumps.Examples.Carnot_TCon\">AixLib.Fluid.HeatPumps.Examples.Carnot_TCon</a>.
</p>
<ul>
  <li>May 8, 2017, by Michael Wetter:<br/>
    Replaced model that interfaces with fluid stream.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/763\">AixLib,
    #763</a>.
  </li>
  <li>January 2, 2017, by Filip Jorissen:<br/>
    Removed parameters <code>effInpEva</code> and
    <code>effInpCon</code> and updated documentation. This is for
    <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/497\">issue
    497</a>.
  </li>
  <li>August 8, 2016, by Michael Wetter:<br/>
    Changed default temperature to compute COP to be the leaving
    temperature as use of the entering temperature can violate the 2nd
    law if the temperature lift is small.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/497\">Annex 60,
    issue 497</a>.
  </li>
  <li>November 25, 2015 by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 17 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 29 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 39 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Utilities/Math/Functions/polynomial.mo ----
-------- HTML Code --------

 This function computes a polynomial of arbitrary order.
 The polynomial has the form
 <p align=\"center\" style=\"font-style:italic;\">
   y = a<sub>1</sub> + a<sub>2</sub> x + a<sub>3</sub> x<sup>2</sup> + ...
 </p>
 
 <ul>
 <li>
 December 14, 2016, by Michael Wetter:<br/>
 Removed derivative annotation.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/602\">issue 602</a>.
 </li>
 <li>
 March 30, 2011, by Michael Wetter:<br/>
 Added <code>zeroDerivative</code> keyword.
 </li>
 <li>
 March 2, by Michael Wetter:<br/>
 Removed redundant <code>smoothOrder</code> annotation.
 </li>
 <li>
 February 29, 2009 by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
This function computes a polynomial of arbitrary order. The polynomial
has the form
<p align=\"center\" style=\"font-style:italic;\">
  y = a<sub>1</sub> + a<sub>2</sub> x + a<sub>3</sub> x<sup>2</sup> +
  ...
</p>
<ul>
  <li>December 14, 2016, by Michael Wetter:<br/>
    Removed derivative annotation.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/602\">issue 602</a>.
  </li>
  <li>March 30, 2011, by Michael Wetter:<br/>
    Added <code>zeroDerivative</code> keyword.
  </li>
  <li>March 2, by Michael Wetter:<br/>
    Removed redundant <code>smoothOrder</code> annotation.
  </li>
  <li>February 29, 2009 by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 4 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/ThermalZones/ReducedOrder/RC/BaseClasses/InteriorWall.mo ----
-------- HTML Code --------

   <p><code>InteriorWall</code> represents heat storage within walls. It links a
   variable number <code>n</code> of thermal resistances and capacities to a
   series connection. <code>n</code> thus defines the spatial discretization of
   thermal effects within the wall. All effects are considered as one-dimensional
   normal to the wall&apos;s surface. This model is thought for interior wall
   elements that only serve as heat storage elements. The RC-chain is defined via
   a vector of capacities <code>CInt[n]</code> and a vector of resistances
   <code>RInt[n]</code>.
   Resistances and capacities are connected alternately, starting with the first
   resistance <code>RInt[1]</code>, from heat <code>port_a</code> into the wall.
   </p>
   <p align=\"center\"><img src=\"modelica://AixLib/Resources/Images/ThermalZones/ReducedOrder/RC/BaseClasses/IntMassVarRC/IntMassVarRC.png\" alt=\"image\"/> </p>
   
   <ul>
   <li>
   April 27, 2016, by Michael Wetter:<br/>
   Added graphical connections.
   </li>
   <li>
   April 17, 2015, by Moritz Lauster:<br/>
   Implemented.
   </li>
   </ul>
   
-------- Corrected Code --------
<p>
  <code>InteriorWall</code> represents heat storage within walls. It
  links a variable number <code>n</code> of thermal resistances and
  capacities to a series connection. <code>n</code> thus defines the
  spatial discretization of thermal effects within the wall. All
  effects are considered as one-dimensional normal to the wall's
  surface. This model is thought for interior wall elements that only
  serve as heat storage elements. The RC-chain is defined via a vector
  of capacities <code>CInt[n]</code> and a vector of resistances
  <code>RInt[n]</code>. Resistances and capacities are connected
  alternately, starting with the first resistance <code>RInt[1]</code>,
  from heat <code>port_a</code> into the wall.
</p>
<p align=\"center\">
  <img src=
  \"modelica://AixLib/Resources/Images/ThermalZones/ReducedOrder/RC/BaseClasses/IntMassVarRC/IntMassVarRC.png\"
  alt=\"image\">
</p>
<ul>
  <li>April 27, 2016, by Michael Wetter:<br/>
    Added graphical connections.
  </li>
  <li>April 17, 2015, by Moritz Lauster:<br/>
    Implemented.
  </li>
</ul>

-------- Errors --------
line 13 column 4 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Utilities/Math/QuadraticLinear.mo ----
-------- HTML Code --------

 <p>Block for function quadraticLinear, which computes </p>
 <p align=\"center\"><i>y = a1 + a2 x1 + a3 x12 + (a4 + a5 x1 + a6 x12) x2 </i></p>
 
 <ul>
 <li>
 November 29, 2013 by Marcus Fuchs:<br/>
 Implementation based on Functions.quadraticLinear.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Block for function quadraticLinear, which computes
</p>
<p align=\"center\">
  <i>y = a1 + a2 x1 + a3 x12 + (a4 + a5 x1 + a6 x12) x2</i>
</p>
<ul>
  <li>November 29, 2013 by Marcus Fuchs:<br/>
    Implementation based on Functions.quadraticLinear.
  </li>
</ul>

-------- Errors --------
line 3 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/ThermalZones/ReducedOrder/RC/BaseClasses/ExteriorWall.mo ----
-------- HTML Code --------

   <p><code>ExteriorWall</code> represents heat conduction and heat storage
   within walls. It links a variable number <code>n</code> of thermal resistances
   and capacities to a series connection. <code>n</code> thus defines the spatial
   discretization of thermal effects within the wall. All effects are considered
   as one-dimensional normal to the wall&apos;s surface. This model is thought
   for exterior wall elements that contribute to heat transfer to the outdoor.
   The RC-chain is defined via a vector of capacities <code>CExt[n]</code> and a
   vector of resistances <code>RExt[n]</code>. Resistances and capacities are
   connected alternately, starting with the first resistance <code>RExt[1]</code>,
   from heat <code>port_a</code> to heat <code>port_b</code>. <code>RExtRem</code>
   is the resistance between the last capacity <code>CExt[end]</code> and the
   heat <code>port_b</code>.</p>
   <p align=\"center\"><img src=\"modelica://AixLib/Resources/Images/ThermalZones/ReducedOrder/RC/BaseClasses/ExtMassVarRC/ExtMassVarRC.png\" alt=\"image\"/> </p>
   
   <ul>
   <li>
   April 27, 2016, by Michael Wetter:<br/>
   Added graphical connections.
   </li>
   <li>
   April 17, 2015, by Moritz Lauster:<br/>
   Implemented.
   </li>
   </ul>
   
-------- Corrected Code --------
<p>
  <code>ExteriorWall</code> represents heat conduction and heat storage
  within walls. It links a variable number <code>n</code> of thermal
  resistances and capacities to a series connection. <code>n</code>
  thus defines the spatial discretization of thermal effects within the
  wall. All effects are considered as one-dimensional normal to the
  wall's surface. This model is thought for exterior wall elements that
  contribute to heat transfer to the outdoor. The RC-chain is defined
  via a vector of capacities <code>CExt[n]</code> and a vector of
  resistances <code>RExt[n]</code>. Resistances and capacities are
  connected alternately, starting with the first resistance
  <code>RExt[1]</code>, from heat <code>port_a</code> to heat
  <code>port_b</code>. <code>RExtRem</code> is the resistance between
  the last capacity <code>CExt[end]</code> and the heat
  <code>port_b</code>.
</p>
<p align=\"center\">
  <img src=
  \"modelica://AixLib/Resources/Images/ThermalZones/ReducedOrder/RC/BaseClasses/ExtMassVarRC/ExtMassVarRC.png\"
  alt=\"image\">
</p>
<ul>
  <li>April 27, 2016, by Michael Wetter:<br/>
    Added graphical connections.
  </li>
  <li>April 17, 2015, by Moritz Lauster:<br/>
    Implemented.
  </li>
</ul>

-------- Errors --------
line 14 column 4 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/BoundaryConditions/Validation/UsersGuide.mo ----
-------- HTML Code --------

<p>
The package <a href=\"modelica://AixLib.BoundaryConditions.Validation.BESTEST\">AixLib.BoundaryConditions.Validation.BESTEST</a>
contains the models that are used for the BESTEST validation ASHRAE 2020 for weather data acquisition and postprocessing.
</p>
<p>
Each model represents a different climate with different days as shown in the tables below.
All examples have a script that runs the simulation according to the specifications and derive the required Json file as reported below.
</p>
<p>
The weather radiation data has to be provided at different orientations and inclinations.
</p>
<p><i>Table 2:&nbsp;</i>Azimuth and Slope for Surfaces</p>
<table summary = \"Azimuth and Slope for Surfaces\" cellspacing=\"2\" cellpadding=\"0\" border=\"1\"><tr>
<td><p>Azimuth</p></td>
<td><p>Slope</p></td>
</tr>
<tr>
<td><p>Horizontal</p></td>
<td><p>0&deg; from horizontal</p></td>
</tr>
<tr>
<td><p>South</p></td>
<td><p>90&deg; from horizontal</p></td>
</tr>
<tr>
<td><p>East</p></td>
<td><p>90&deg; from horizontal</p></td>
</tr>
<tr>
<td><p>North</p></td>
<td><p>90&deg; from horizontal</p></td>
</tr>
<tr>
<td><p>West</p></td>
<td><p>90&deg; from horizontal</p></td>
</tr>
<tr>
<td><p>45&deg; East of South</p></td>
<td><p>90&deg; from horizontal</p></td>
</tr>
<tr>
<td><p>45&deg; West of South</p></td>
<td><p>90&deg; from horizontal</p></td>
</tr>
<tr>
<td><p>East</p></td>
<td><p>30&deg; from horizontal</p></td>
</tr>
<tr>
<td><p>South</p></td>
<td><p>30&deg; from horizontal</p></td>
</tr>
<tr>
<td><p>West</p></td>
<td><p>30&deg; from horizontal</p></td>
</tr>
</table>

<br><p><i>Additional parameters and correlations</i></p>
<ul>
<li>Ground reflectance &rho; is set to 0 for cases from WD100 to WD500 and 0.2 for WD600</li>
<li>
<a href=\"modelica://AixLib.BoundaryConditions.SkyTemperature.BlackBody\">Sky black body temperature</a>
calculated using Horizontal radiation or dew point temperature and sky cover.
</li>
<li>Diffused radiation calculated using <a href=\"modelica://AixLib.BoundaryConditions.SolarIrradiation.DiffusePerez\">Perez</a> and
<a href=\"modelica://AixLib.BoundaryConditions.SolarIrradiation.DiffuseIsotropic\">Isotropic</a> sky models</li>
</ul>
<h4>Outputs required</h4>
<p><i>Annual Outputs</i></p>
<p><b>&nbsp;</b>The following outputs are  provided for an annual simulation:</p>
<ul>
<li>Average dry bulb temperature (&deg;C)</li>
<li>Average relative humidity (%)</li>
<li>Average dewpoint temperature (&deg;C)</li>
<li>Average humidity ratio (kg moisture/kg dry air)</li>
<li>Average wet bulb temperature (&deg;C)</li>
<li>Sum of total, beam, and diffuse solar radiation incident on each surface (Wh/m2)</li>
</ul>
<br><p><i>Hourly Outputs</i></p>
<p>The following outputs are  provided for each hour of the days specified for each test case in Table 3:</p>
<ul>
<li>Dry bulb temperature (&deg;C)</li>
<li>Relative humidity (%)</li>
<li>Dewpoint temperature (&deg;C)</li>
<li>Humidity ratio (kg moisture/kg dry air)</li>
<li>Wet bulb temperature (&deg;C)</li>
<li>Windspeed (m/s)</li>
<li>Wind direction (degrees from north)</li>
<li>Station pressure (mbar)</li>
<li>Total cloud cover (tenths of sky)</li>
<li>Opaque cloud cover (tenths of sky)</li>
<li>Sky temperature (&deg;C)</li>
<li>Sum of total, beam, and diffuse solar radiation incident on each surface (Wh/m2)&nbsp;</li>
</ul>
<br><p><i>Table 3: Specific Days for Output</i></p>
<table summary = \"Specific Days for Output\" cellspacing=\"2\" cellpadding=\"0\" border=\"1\"><tr>
<td><p>Case </p></td>
<td><p>Days</p></td>
</tr>
<tr>
<td><p>WD100 </p></td>
<td><p>May 4th, July 14th, September 6th</p></td>
</tr>
<tr>
<td><p>WD200 </p></td>
<td><p>May 24th, August 26th</p></td>
</tr>
<tr>
<td><p>WD300 </p></td>
<td><p>February 7th, August 13th</p></td>
</tr>
<tr>
<td><p>WD400 </p></td>
<td><p>January 24th, July 1st</p></td>
</tr>
<tr>
<td><p>WD500 </p></td>
<td><p>March 1st, September 14th</p></td>
</tr>
<tr>
<td><p>WD600 </p></td>
<td><p>May 4th, July 14th, September 6th</p></td>
</tr>
</table>
<br><p><i>Sub-hourly Outputs</i></p>
<p>The following outputs are  provided at each timestep of the days specified for each test case in Table 3:</p>
<ul>
<li>Dry bulb temperature (C)</li>
<li>Relative humidity (%)</li>
<li>Sum of total, beam, and diffuse solar radiation incident on each surface (Wh/m2) </li>
</ul>
<p>The following outputs are  provided integrated hourly for the days specified for each test case in Table 3:</p>
<ul>
<li>Total incident horizontal solar radiation (Wh/m2)</li>
<li>Total incident horizontal beam solar radiation (Wh/m2)</li>
<li>Total incident horizontal diffuse solar radiation (Wh/m2) </li>
</ul>
<h4>Validation results</h4>
<p>(Not available yet)</p>
<h4>Implementation</h4>
<p>To generate the data shown in this user guide, run </p>
<pre>
cd AixLib/Resources/Data/BoundaryConditions/Validation/BESTEST
python3 generateResults.py -p
</pre>
<p>At the beginning of the Python script there are several options that the user can choose, by default the script will:
</p>
<ul>
<li>Clone the last master branch of the AixLib repository into a temporary directory</li>
<li>Execute all the simulations and create the folders with the .mat and .json files inside the BESTEST/Simulations folder</li>
</ul>
<h4>References</h4>
<p>(Not available yet)</p>

<ul>
<li>
March 11, 2020, by Ettore Zanetti:<br/>
first implementation of BESTEST weather validation
</li>
</ul>

-------- Corrected Code --------
<p>
  The package <a href=
  \"modelica://AixLib.BoundaryConditions.Validation.BESTEST\">AixLib.BoundaryConditions.Validation.BESTEST</a>
  contains the models that are used for the BESTEST validation ASHRAE
  2020 for weather data acquisition and postprocessing.
</p>
<p>
  Each model represents a different climate with different days as
  shown in the tables below. All examples have a script that runs the
  simulation according to the specifications and derive the required
  Json file as reported below.
</p>
<p>
  The weather radiation data has to be provided at different
  orientations and inclinations.
</p>
<p>
  <i>Table 2:&#160;</i>Azimuth and Slope for Surfaces
</p>
<table summary=\"Azimuth and Slope for Surfaces\" cellspacing=\"2\"
cellpadding=\"0\" border=\"1\">
  <tr>
    <td>
      <p>
        Azimuth
      </p>
    </td>
    <td>
      <p>
        Slope
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        Horizontal
      </p>
    </td>
    <td>
      <p>
        0° from horizontal
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        South
      </p>
    </td>
    <td>
      <p>
        90° from horizontal
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        East
      </p>
    </td>
    <td>
      <p>
        90° from horizontal
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        North
      </p>
    </td>
    <td>
      <p>
        90° from horizontal
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        West
      </p>
    </td>
    <td>
      <p>
        90° from horizontal
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        45° East of South
      </p>
    </td>
    <td>
      <p>
        90° from horizontal
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        45° West of South
      </p>
    </td>
    <td>
      <p>
        90° from horizontal
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        East
      </p>
    </td>
    <td>
      <p>
        30° from horizontal
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        South
      </p>
    </td>
    <td>
      <p>
        30° from horizontal
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        West
      </p>
    </td>
    <td>
      <p>
        30° from horizontal
      </p>
    </td>
  </tr>
</table><br/>
<p>
  <i>Additional parameters and correlations</i>
</p>
<ul>
  <li>Ground reflectance ρ is set to 0 for cases from WD100 to WD500
  and 0.2 for WD600
  </li>
  <li>
    <a href=
    \"modelica://AixLib.BoundaryConditions.SkyTemperature.BlackBody\">Sky
    black body temperature</a> calculated using Horizontal radiation or
    dew point temperature and sky cover.
  </li>
  <li>Diffused radiation calculated using <a href=
  \"modelica://AixLib.BoundaryConditions.SolarIrradiation.DiffusePerez\">
    Perez</a> and <a href=
    \"modelica://AixLib.BoundaryConditions.SolarIrradiation.DiffuseIsotropic\">
    Isotropic</a> sky models
  </li>
</ul>
<h4>
  Outputs required
</h4>
<p>
  <i>Annual Outputs</i>
</p>
<p>
  <b>&#160;</b>The following outputs are provided for an annual
  simulation:
</p>
<ul>
  <li>Average dry bulb temperature (°C)
  </li>
  <li>Average relative humidity (%)
  </li>
  <li>Average dewpoint temperature (°C)
  </li>
  <li>Average humidity ratio (kg moisture/kg dry air)
  </li>
  <li>Average wet bulb temperature (°C)
  </li>
  <li>Sum of total, beam, and diffuse solar radiation incident on each
  surface (Wh/m2)
  </li>
</ul><br/>
<p>
  <i>Hourly Outputs</i>
</p>
<p>
  The following outputs are provided for each hour of the days
  specified for each test case in Table 3:
</p>
<ul>
  <li>Dry bulb temperature (°C)
  </li>
  <li>Relative humidity (%)
  </li>
  <li>Dewpoint temperature (°C)
  </li>
  <li>Humidity ratio (kg moisture/kg dry air)
  </li>
  <li>Wet bulb temperature (°C)
  </li>
  <li>Windspeed (m/s)
  </li>
  <li>Wind direction (degrees from north)
  </li>
  <li>Station pressure (mbar)
  </li>
  <li>Total cloud cover (tenths of sky)
  </li>
  <li>Opaque cloud cover (tenths of sky)
  </li>
  <li>Sky temperature (°C)
  </li>
  <li>Sum of total, beam, and diffuse solar radiation incident on each
  surface (Wh/m2)&#160;
  </li>
</ul><br/>
<p>
  <i>Table 3: Specific Days for Output</i>
</p>
<table summary=\"Specific Days for Output\" cellspacing=\"2\" cellpadding=
\"0\" border=\"1\">
  <tr>
    <td>
      <p>
        Case
      </p>
    </td>
    <td>
      <p>
        Days
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        WD100
      </p>
    </td>
    <td>
      <p>
        May 4th, July 14th, September 6th
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        WD200
      </p>
    </td>
    <td>
      <p>
        May 24th, August 26th
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        WD300
      </p>
    </td>
    <td>
      <p>
        February 7th, August 13th
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        WD400
      </p>
    </td>
    <td>
      <p>
        January 24th, July 1st
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        WD500
      </p>
    </td>
    <td>
      <p>
        March 1st, September 14th
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        WD600
      </p>
    </td>
    <td>
      <p>
        May 4th, July 14th, September 6th
      </p>
    </td>
  </tr>
</table><br/>
<p>
  <i>Sub-hourly Outputs</i>
</p>
<p>
  The following outputs are provided at each timestep of the days
  specified for each test case in Table 3:
</p>
<ul>
  <li>Dry bulb temperature (C)
  </li>
  <li>Relative humidity (%)
  </li>
  <li>Sum of total, beam, and diffuse solar radiation incident on each
  surface (Wh/m2)
  </li>
</ul>
<p>
  The following outputs are provided integrated hourly for the days
  specified for each test case in Table 3:
</p>
<ul>
  <li>Total incident horizontal solar radiation (Wh/m2)
  </li>
  <li>Total incident horizontal beam solar radiation (Wh/m2)
  </li>
  <li>Total incident horizontal diffuse solar radiation (Wh/m2)
  </li>
</ul>
<h4>
  Validation results
</h4>
<p>
  (Not available yet)
</p>
<h4>
  Implementation
</h4>
<p>
  To generate the data shown in this user guide, run
</p>
<pre>
cd AixLib/Resources/Data/BoundaryConditions/Validation/BESTEST
python3 generateResults.py -p
</pre>
<p>
  At the beginning of the Python script there are several options that
  the user can choose, by default the script will:
</p>
<ul>
  <li>Clone the last master branch of the AixLib repository into a
  temporary directory
  </li>
  <li>Execute all the simulations and create the folders with the .mat
  and .json files inside the BESTEST/Simulations folder
  </li>
</ul>
<h4>
  References
</h4>
<p>
  (Not available yet)
</p>
<ul>
  <li>March 11, 2020, by Ettore Zanetti:<br/>
    first implementation of BESTEST weather validation
  </li>
</ul>

-------- Errors --------
line 14 column 1 - Warning: The summary attribute on the <table> element is obsolete in HTML5
line 98 column 1 - Warning: The summary attribute on the <table> element is obsolete in HTML5


---- AixLib/Fluid/Geothermal/Borefields/BaseClasses/HeatTransfer/LoadAggregation/Validation/ShiftAggregationCells.mo ----
-------- HTML Code --------

 <p>
 This validation case replicates the load-shifting procedure illustred in the figure below by Cimmino (2014).
 </p>
 <p align=\"center\">
 <img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/LoadAggregation_01.png\" />
 </p>
 <h4>References</h4>
 <p>
 Cimmino, M. 2014. <i>D&eacute;veloppement et validation exp&eacute;rimentale de facteurs de r&eacute;ponse
 thermique pour champs de puits g&eacute;othermiques</i>,
 Ph.D. Thesis, &Eacute;cole Polytechnique de Montr&eacute;al.
 </p>
 
 <ul>
 <li>
 July 18, 2018, by Alex Laferri&egrave;re:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This validation case replicates the load-shifting procedure illustred
  in the figure below by Cimmino (2014).
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/LoadAggregation_01.png\">
</p>
<h4>
  References
</h4>
<p>
  Cimmino, M. 2014. <i>Développement et validation expérimentale de
  facteurs de réponse thermique pour champs de puits géothermiques</i>,
  Ph.D. Thesis, École Polytechnique de Montréal.
</p>
<ul>
  <li>July 18, 2018, by Alex Laferrière:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 5 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Controls/Continuous/Examples/OffTimer.mo ----
-------- HTML Code --------

 <p>
 Example that demonstrates the use of the model
 <a href=\"modelica://AixLib.Controls.Continuous.OffTimer\">
 AixLib.Controls.Continuous.OffTimer</a>.
 The input to the two timers are alternating boolean values.
 Whenever the input becomes <code>false(=0)</code>, the timer is reset.
 The figures below show the input and output of the blocks.
 </p>
 <p align=\"center\">
 <img src=\"modelica://AixLib/Resources/Images/Controls/Continuous/Examples/OffTimer1.png\" border=\"1\" alt=\"Input and output of the OffTimer offTim1.\"/><br/>
 <img src=\"modelica://AixLib/Resources/Images/Controls/Continuous/Examples/OffTimer2.png\" border=\"1\" alt=\"Input and output of the OffTimer offTim1.\"/>
 </p>
 
 <ul>
 <li>
 November 21, 2011, by Michael Wetter:<br/>
 Added documentation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Example that demonstrates the use of the model <a href=
  \"modelica://AixLib.Controls.Continuous.OffTimer\">AixLib.Controls.Continuous.OffTimer</a>.
  The input to the two timers are alternating boolean values. Whenever
  the input becomes <code>false(=0)</code>, the timer is reset. The
  figures below show the input and output of the blocks.
</p>
<p align=\"center\">
  <img src=
  \"modelica://AixLib/Resources/Images/Controls/Continuous/Examples/OffTimer1.png\"
  border=\"1\" alt=\"Input and output of the OffTimer offTim1.\"><br/>
  <img src=
  \"modelica://AixLib/Resources/Images/Controls/Continuous/Examples/OffTimer2.png\"
  border=\"1\" alt=\"Input and output of the OffTimer offTim1.\">
</p>
<ul>
  <li>November 21, 2011, by Michael Wetter:<br/>
    Added documentation.
  </li>
</ul>

-------- Errors --------
line 10 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Sources/Outside_CpLowRise.mo ----
-------- HTML Code --------

 <p>
 This model describes boundary conditions for
 pressure, enthalpy, and species concentration that can be obtained
 from weather data. The model is identical to
 <a href=\"modelica://AixLib.Fluid.Sources.Outside\">
 AixLib.Fluid.Sources.Outside</a>,
 except that it adds the wind pressure to the
 pressure at the fluid port <code>ports</code>.
 The correlation that is used to compute the wind pressure is based
 on Swami and Chandra (1987) and valid for low-rise buildings
 with rectangular shape.
 The same correlation is also implemented in CONTAM (Persily and Ivy, 2001).
 <!-- @include_Buildings
 For other buildings, the model
 <a href=\"modelica://AixLib.Fluid.Sources.Outside_CpData\">
 AixLib.Fluid.Sources.Outside_CpData</a> or
 <a href=\"modelica://AixLib.Fluid.Sources.Outside_Cp\">
 AixLib.Fluid.Sources.Outside_Cp</a>
 should be used that takes
 the wind pressure coefficient as a parameter or an input.
 -->
 </p>
 <p>
 The wind pressure coefficient is computed based on the
 side ratio of the walls, which is defined as
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 s = x &frasl; y
 </p>
 <p>
 where <i>x</i> is the length of the wall that will be connected to
 this model, and <i>y</i> is the length of the adjacent wall.
 The wind direction is computed relative to the azimuth of this surface,
 which is equal to the parameter <code>azi</code>.
 The surface azimuth is defined in
 <a href=\"modelica://AixLib.Types.Azimuth\">
 AixLib.Types.Azimuth</a>.
 For example, if an exterior wall is South oriented, i.e., its outside-facing
 surface is towards South, use
 <code>AixLib.Types.Azimuth.S</code>.
 </p>
 <p>
 Based on the surface azimuth, the wind direction and the side ratio
 of the walls, the model computes how much the wind pressure
 is attenuated compared to the reference wind pressure <code>Cp0</code>.
 The reference wind pressure <code>Cp0</code> is a user-defined parameter,
 and must be equal to the wind pressure at zero wind incidence angle.
 Swami and Chandra (1987) recommend <i>C<sub>p0</sub> = 0.6</i> for
 all low-rise buildings as this represents the average of
 various values reported in the literature.
 The computation of the actual wind pressure coefficient <i>C<sub>p</sub></i>
 is explained in the function
 <a href=\"modelica://AixLib.Airflow.Multizone.BaseClasses.windPressureLowRise\">
 Buildings.Airflow.Multizone.BaseClasses.windPressureLowRise</a>
 that is called by this model.
 </p>
 <p>
 The pressure <i>p</i> at the port <code>ports</code> is computed as
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   p = p<sub>w</sub> + C<sub>p</sub> 1 &frasl; 2 v<sup>2</sup> &rho;,
 </p>
 <p>
 where
 <i>p<sub>w</sub></i> is the atmospheric pressure from the weather bus,
 <i>v</i> is the wind speed from the weather bus, and
 <i>&rho;</i> is the fluid density.
 </p>
 
 <p>
 This model differs from <a href=\"AixLib.Fluid.Sources.Outside_CpData\">
 AixLib.Fluid.Sources.Outside_CpData</a> by the calculation of the wind pressure coefficient C<sub>p,act</sub>.
 The wind pressure coefficient is defined by an equation in stead of a user-defined table.
 This model is only suited for low-rise rectangular buildings.
 </p>
 
 <h4>References</h4>
 <ul>
 <li>
 Muthusamy V. Swami and
 Subrato Chandra.
 <i>
 <a href=\"http://www.fsec.ucf.edu/en/publications/pdf/FSEC-CR-163-86.pdf\">
 Procedures for
 Calculating Natural
 Ventilation Airflow
 Rates in Buildings.</a></i>
 Florida Solar Energy Center, FSEC-CR-163-86. March, 1987.
 Cape Canaveral, Florida.
 </li>
 <li>
 Andrew K. Persily and Elizabeth M. Ivy.
 <i>
 <a href=\"http://ws680.nist.gov/publication/get_pdf.cfm?pub_id=860831\">
 Input Data for Multizone Airflow and IAQ Analysis.</a></i>
 NIST, NISTIR 6585.
 January, 2001.
 Gaithersburg, MD.
 </li>
 </ul>
 
 <ul>
 <li>
 February 2, 2022, by Michael Wetter:<br/>
 Revised implementation.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1436\">IBPSA, #1436</a>.
 </li>
 <li>
 Jun 28, 2021, by Klaas De Jonge:<br/>
 Documentation changes to explain the difference with <a href=\"modelica://AixLib.Fluid.Sources.Outside_CpData\">
 AixLib.Fluid.Sources.Outside_CpData</a>.
 </li>
 <li>
 January 26, 2016, by Michael Wetter:<br/>
 Added <code>unit</code> and <code>quantity</code> attributes.
 </li>
 <li>
 October 26, 2011 by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This model describes boundary conditions for pressure, enthalpy, and
  species concentration that can be obtained from weather data. The
  model is identical to <a href=
  \"modelica://AixLib.Fluid.Sources.Outside\">AixLib.Fluid.Sources.Outside</a>,
  except that it adds the wind pressure to the pressure at the fluid
  port <code>ports</code>. The correlation that is used to compute the
  wind pressure is based on Swami and Chandra (1987) and valid for
  low-rise buildings with rectangular shape. The same correlation is
  also implemented in CONTAM (Persily and Ivy, 2001). 
  <!-- @include_Buildings
 For other buildings, the model
 <a href=\"modelica://AixLib.Fluid.Sources.Outside_CpData\">
 AixLib.Fluid.Sources.Outside_CpData</a> or
 <a href=\"modelica://AixLib.Fluid.Sources.Outside_Cp\">
 AixLib.Fluid.Sources.Outside_Cp</a>
 should be used that takes
 the wind pressure coefficient as a parameter or an input.
 -->
</p>
<p>
  The wind pressure coefficient is computed based on the side ratio of
  the walls, which is defined as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  s = x ⁄ y
</p>
<p>
  where <i>x</i> is the length of the wall that will be connected to
  this model, and <i>y</i> is the length of the adjacent wall. The wind
  direction is computed relative to the azimuth of this surface, which
  is equal to the parameter <code>azi</code>. The surface azimuth is
  defined in <a href=
  \"modelica://AixLib.Types.Azimuth\">AixLib.Types.Azimuth</a>. For
  example, if an exterior wall is South oriented, i.e., its
  outside-facing surface is towards South, use
  <code>AixLib.Types.Azimuth.S</code>.
</p>
<p>
  Based on the surface azimuth, the wind direction and the side ratio
  of the walls, the model computes how much the wind pressure is
  attenuated compared to the reference wind pressure <code>Cp0</code>.
  The reference wind pressure <code>Cp0</code> is a user-defined
  parameter, and must be equal to the wind pressure at zero wind
  incidence angle. Swami and Chandra (1987) recommend <i>C<sub>p0</sub>
  = 0.6</i> for all low-rise buildings as this represents the average
  of various values reported in the literature. The computation of the
  actual wind pressure coefficient <i>C<sub>p</sub></i> is explained in
  the function <a href=
  \"modelica://AixLib.Airflow.Multizone.BaseClasses.windPressureLowRise\">
  Buildings.Airflow.Multizone.BaseClasses.windPressureLowRise</a> that
  is called by this model.
</p>
<p>
  The pressure <i>p</i> at the port <code>ports</code> is computed as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  p = p<sub>w</sub> + C<sub>p</sub> 1 ⁄ 2 v<sup>2</sup> ρ,
</p>
<p>
  where <i>p<sub>w</sub></i> is the atmospheric pressure from the
  weather bus, <i>v</i> is the wind speed from the weather bus, and
  <i>ρ</i> is the fluid density.
</p>
<p>
  This model differs from <a href=
  \"AixLib.Fluid.Sources.Outside_CpData\">AixLib.Fluid.Sources.Outside_CpData</a>
  by the calculation of the wind pressure coefficient
  C<sub>p,act</sub>. The wind pressure coefficient is defined by an
  equation in stead of a user-defined table. This model is only suited
  for low-rise rectangular buildings.
</p>
<h4>
  References
</h4>
<ul>
  <li>Muthusamy V. Swami and Subrato Chandra. <i><a href=
  \"http://www.fsec.ucf.edu/en/publications/pdf/FSEC-CR-163-86.pdf\">Procedures
  for Calculating Natural Ventilation Airflow Rates in
  Buildings.</a></i> Florida Solar Energy Center, FSEC-CR-163-86.
  March, 1987. Cape Canaveral, Florida.
  </li>
  <li>Andrew K. Persily and Elizabeth M. Ivy. <i><a href=
  \"http://ws680.nist.gov/publication/get_pdf.cfm?pub_id=860831\">Input
  Data for Multizone Airflow and IAQ Analysis.</a></i> NIST, NISTIR
  6585. January, 2001. Gaithersburg, MD.
  </li>
</ul>
<ul>
  <li>February 2, 2022, by Michael Wetter:<br/>
    Revised implementation.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1436\">IBPSA,
    #1436</a>.
  </li>
  <li>Jun 28, 2021, by Klaas De Jonge:<br/>
    Documentation changes to explain the difference with <a href=
    \"modelica://AixLib.Fluid.Sources.Outside_CpData\">AixLib.Fluid.Sources.Outside_CpData</a>.
  </li>
  <li>January 26, 2016, by Michael Wetter:<br/>
    Added <code>unit</code> and <code>quantity</code> attributes.
  </li>
  <li>October 26, 2011 by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 28 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 61 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/FMI/Adaptors/HVAC.mo ----
-------- HTML Code --------

 <p>
 The (time varying) vector <code>Real</code> output signal of this block can be defined in its
 parameter menu via variable <code>y</code>. The purpose is to support the
 easy definition of vector-valued Real expressions in a block diagram.
 </p>
 
 <p>
 Adaptor that can be used to connect an HVAC system (with acausal ports)
 to input/output signals, which then can be exposed in an FMI interface.
 </p>
 <p>
 The adaptor has a vector of fluid ports called <code>ports</code>.
 The supply and return air ducts need to be connected to these ports.
 Also, if a thermal zone has interzonal air exchange or air infiltration,
 these flow paths also need be connected to <code>ports</code>.
 </p>
 <p>
 This model outputs at the port <code>fluPor</code> the mass flow rate for
 each flow that is connected to <code>ports</code>, together with its
 temperature, water vapor mass fraction per total mass of the air (not per kg dry
 air), and trace substances. These quantities are always as if the flow
 enters the room, even if the flow is zero or negative.
 If a medium has no moisture, e.g., if <code>Medium.nXi=0</code>, or
 if it has no trace substances, e.g., if <code>Medium.nC=0</code>, then
 the output signal for these properties are removed.
 These quantities are always as if the flow
 enters the room, even if the flow is zero or negative.
 Thus, a thermal zone model that uses these signals to compute the
 heat added by the HVAC system need to implement an equation such as
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 Q<sub>sen</sub> = max(0, &#7745;<sub>sup</sub>) &nbsp; c<sub>p</sub> &nbsp; (T<sub>sup</sub> - T<sub>air,zon</sub>),
 </p>
 <p>
 where
 <i>Q<sub>sen</sub></i> is the sensible heat flow rate added to the thermal zone,
 <i>&#7745;<sub>sup</sub></i> is the supply air mass flow rate from
 the port <code>fluPor</code> (which is negative if it is an exhaust),
 <i>c<sub>p</sub></i> is the specific heat capacity at constant pressure,
 <i>T<sub>sup</sub></i> is the supply air temperature and
 <i>T<sub>air,zon</sub></i> is the zone air temperature.
 Note that without the <i>max(&middot;, &middot;)</i> function, the energy
 balance would be wrong.
 </p>
 <p>
 The output signals of this model are the zone air temperature,
 the water vapor mass fraction per total mass of the air (unless <code>Medium.nXi=0</code>)
 and trace substances (unless <code>Medium.nC=0</code>).
 These output connectors can be used to connect to a controller.
 These values are obtained from the fluid stream(s) that flow into this component
 at the port <code>fluPor</code>, e.g., from the connector
 <code>fluPor.backward</code>.
 Note that there are <code>nPorts</code> of these signals.
 For a completely mixed room, they will all have the same value, but
 for a room with non-uniform temperatures, they can have different values.
 </p>
 <h4>Assumption and limitations</h4>
 <p>
 The mass flow rates at <code>ports</code> sum to zero, hence this
 model conserves mass.
 </p>
 <p>
 This model does not impose any pressure, other than setting the pressure
 of all fluid connections to <code>ports</code> to be equal.
 The reason is that setting a pressure can lead to non-physical system models,
 for example if a mass flow rate is imposed and the HVAC system is connected
 to a model that sets a pressure boundary condition such as
 <a href=\"modelica://AixLib.Fluid.Sources.Outside\">
 AixLib.Fluid.Sources.Outside</a>.
 Also, setting a pressure would make it impossible to use multiple instances
 of this model (one for each thermal zone) and build in Modelica an airflow network
 model with pressure driven mass flow rates.
 </p>
 <p>
 The model has no pressure drop. Hence, the pressure drop
 of an air diffuser or of an exhaust grill need to be modelled
 in models that are connected to <code>ports</code>.
 </p>
 <h4>Typical use and important parameters</h4>
 <p>
 See
 <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.HVACZone\">
 AixLib.Fluid.FMI.ExportContainers.HVACZone</a>
 for a model that uses this model.
 </p>
 
 <ul>
 <li>
 January 18, 2019, by Jianjun Hu:<br/>
 Limited the media choice to moist air only.
 See <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1050\">#1050</a>.
 </li>
 <li>
 September 13, 2017, by Michael Wetter:<br/>
 Removed erroneous <code>each</code>.
 </li>
 <li>
 October 4, 2016, by Michael Wetter:<br/>
 Corrected assignment of <code>quantity</code> in <code>CZon</code>.
 </li>
 <li>
 June 29, 2016, by Michael Wetter:<br/>
 Revised implementation.
 </li>
 <li>
 April 14, 2016, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  The (time varying) vector <code>Real</code> output signal of this
  block can be defined in its parameter menu via variable
  <code>y</code>. The purpose is to support the easy definition of
  vector-valued Real expressions in a block diagram.
</p>
<p>
  Adaptor that can be used to connect an HVAC system (with acausal
  ports) to input/output signals, which then can be exposed in an FMI
  interface.
</p>
<p>
  The adaptor has a vector of fluid ports called <code>ports</code>.
  The supply and return air ducts need to be connected to these ports.
  Also, if a thermal zone has interzonal air exchange or air
  infiltration, these flow paths also need be connected to
  <code>ports</code>.
</p>
<p>
  This model outputs at the port <code>fluPor</code> the mass flow rate
  for each flow that is connected to <code>ports</code>, together with
  its temperature, water vapor mass fraction per total mass of the air
  (not per kg dry air), and trace substances. These quantities are
  always as if the flow enters the room, even if the flow is zero or
  negative. If a medium has no moisture, e.g., if
  <code>Medium.nXi=0</code>, or if it has no trace substances, e.g., if
  <code>Medium.nC=0</code>, then the output signal for these properties
  are removed. These quantities are always as if the flow enters the
  room, even if the flow is zero or negative. Thus, a thermal zone
  model that uses these signals to compute the heat added by the HVAC
  system need to implement an equation such as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  Q<sub>sen</sub> = max(0, ṁ<sub>sup</sub>) &#160; c<sub>p</sub> &#160;
  (T<sub>sup</sub> - T<sub>air,zon</sub>),
</p>
<p>
  where <i>Q<sub>sen</sub></i> is the sensible heat flow rate added to
  the thermal zone, <i>ṁ<sub>sup</sub></i> is the supply air mass flow
  rate from the port <code>fluPor</code> (which is negative if it is an
  exhaust), <i>c<sub>p</sub></i> is the specific heat capacity at
  constant pressure, <i>T<sub>sup</sub></i> is the supply air
  temperature and <i>T<sub>air,zon</sub></i> is the zone air
  temperature. Note that without the <i>max(·, ·)</i> function, the
  energy balance would be wrong.
</p>
<p>
  The output signals of this model are the zone air temperature, the
  water vapor mass fraction per total mass of the air (unless
  <code>Medium.nXi=0</code>) and trace substances (unless
  <code>Medium.nC=0</code>). These output connectors can be used to
  connect to a controller. These values are obtained from the fluid
  stream(s) that flow into this component at the port
  <code>fluPor</code>, e.g., from the connector
  <code>fluPor.backward</code>. Note that there are <code>nPorts</code>
  of these signals. For a completely mixed room, they will all have the
  same value, but for a room with non-uniform temperatures, they can
  have different values.
</p>
<h4>
  Assumption and limitations
</h4>
<p>
  The mass flow rates at <code>ports</code> sum to zero, hence this
  model conserves mass.
</p>
<p>
  This model does not impose any pressure, other than setting the
  pressure of all fluid connections to <code>ports</code> to be equal.
  The reason is that setting a pressure can lead to non-physical system
  models, for example if a mass flow rate is imposed and the HVAC
  system is connected to a model that sets a pressure boundary
  condition such as <a href=
  \"modelica://AixLib.Fluid.Sources.Outside\">AixLib.Fluid.Sources.Outside</a>.
  Also, setting a pressure would make it impossible to use multiple
  instances of this model (one for each thermal zone) and build in
  Modelica an airflow network model with pressure driven mass flow
  rates.
</p>
<p>
  The model has no pressure drop. Hence, the pressure drop of an air
  diffuser or of an exhaust grill need to be modelled in models that
  are connected to <code>ports</code>.
</p>
<h4>
  Typical use and important parameters
</h4>
<p>
  See <a href=
  \"modelica://AixLib.Fluid.FMI.ExportContainers.HVACZone\">AixLib.Fluid.FMI.ExportContainers.HVACZone</a>
  for a model that uses this model.
</p>
<ul>
  <li>January 18, 2019, by Jianjun Hu:<br/>
    Limited the media choice to moist air only. See <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1050\">#1050</a>.
  </li>
  <li>September 13, 2017, by Michael Wetter:<br/>
    Removed erroneous <code>each</code>.
  </li>
  <li>October 4, 2016, by Michael Wetter:<br/>
    Corrected assignment of <code>quantity</code> in <code>CZon</code>.
  </li>
  <li>June 29, 2016, by Michael Wetter:<br/>
    Revised implementation.
  </li>
  <li>April 14, 2016, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 26 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Actuators/Valves/Examples/TwoWayValveTable.mo ----
-------- HTML Code --------

 <p>
 Test model for a two way valve in which a table is used to specify the
 opening characteristics.
 The valve has the following opening characteristics, which is taken from a test case
 of the IEA EBC Annex 60 project.
 </p>
 <table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\" style=\"border-collapse:collapse;\">
 <tr><td><i>y</i></td>
   <td>0</td>  <td>0.1667</td>  <td>0.3333</td>  <td>0.5</td>  <td>0.6667</td>  <td>1</td>
 </tr>
 <tr><td><i>K<sub>v</sub></i></td>
   <td>0</td>  <td>0.19</td>  <td>0.35</td>  <td>0.45</td>  <td>0.5</td>  <td>0.65</td>       </tr>
 </table>
 <p>
 The <i>K<sub>v</sub></i> value is the volume flow rate in m<sup>3</sup>/h at a pressure difference
 of 1 bar.
 Hence, the <i>K<sub>v</sub></i> value of the fully open valve is <i>K<sub>v</sub>=0.65</i>.
 </p>
 <p>
 Plotting the variables <code>kv.y</code> versus <code>y.y</code> shows that the valve
 reproduces the <i>K<sub>v</sub></i> values shown in the above table.
 </p>
 <p align=\"center\">
 <img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/Actuators/Valves/Examples/TwoWayValveTable_kv.png\"/>
 </p>
 <p>
 The parameter <code>filterOpening</code> is set to <code>false</code>,
 as this model is used to plot the flow at different opening signals
 without taking into account the travel time of the actuator.
 </p>
 
 <ul>
 <li>
 August 12, 2014 by Michael Wetter:<br/>
 Added <code>parameter</code> keyword to <code>datVal</code>,
 as this is needed to asssign <code>datVal</code> to a parameter
 in the instance <code>valTab</code>.
 This also avoids an error in OpenModelica.
 </li>
 <li>
 April 2, 2014 by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Test model for a two way valve in which a table is used to specify
  the opening characteristics. The valve has the following opening
  characteristics, which is taken from a test case of the IEA EBC Annex
  60 project.
</p>
<table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\"
style=\"border-collapse:collapse;\">
  <tr>
    <td>
      <i>y</i>
    </td>
    <td>
      0
    </td>
    <td>
      0.1667
    </td>
    <td>
      0.3333
    </td>
    <td>
      0.5
    </td>
    <td>
      0.6667
    </td>
    <td>
      1
    </td>
  </tr>
  <tr>
    <td>
      <i>K<sub>v</sub></i>
    </td>
    <td>
      0
    </td>
    <td>
      0.19
    </td>
    <td>
      0.35
    </td>
    <td>
      0.45
    </td>
    <td>
      0.5
    </td>
    <td>
      0.65
    </td>
  </tr>
</table>
<p>
  The <i>K<sub>v</sub></i> value is the volume flow rate in
  m<sup>3</sup>/h at a pressure difference of 1 bar. Hence, the
  <i>K<sub>v</sub></i> value of the fully open valve is
  <i>K<sub>v</sub>=0.65</i>.
</p>
<p>
  Plotting the variables <code>kv.y</code> versus <code>y.y</code>
  shows that the valve reproduces the <i>K<sub>v</sub></i> values shown
  in the above table.
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/Actuators/Valves/Examples/TwoWayValveTable_kv.png\">
</p>
<p>
  The parameter <code>filterOpening</code> is set to
  <code>false</code>, as this model is used to plot the flow at
  different opening signals without taking into account the travel time
  of the actuator.
</p>
<ul>
  <li>August 12, 2014 by Michael Wetter:<br/>
    Added <code>parameter</code> keyword to <code>datVal</code>, as
    this is needed to asssign <code>datVal</code> to a parameter in the
    instance <code>valTab</code>. This also avoids an error in
    OpenModelica.
  </li>
  <li>April 2, 2014 by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 8 column 2 - Warning: The summary attribute on the <table> element is obsolete in HTML5
line 24 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/FixedResistances/Validation/PlugFlowPipes/MSLAIT2Nodes.mo ----
-------- HTML Code --------

 <p>The example contains
 <a href=\"modelica://AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.Data.PipeDataAIT151218\">
 experimental data</a> from a real district heating network.
 This data is used to validate this library's
 <a href=\"modelica://AixLib.Fluid.FixedResistances.PlugFlowPipe\">plug flow pipe model</a>
 in <a href=\"modelica://AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.PlugFlowAIT\">
 AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.PlugFlowAIT</a>.
 </p>
 <p>
 Note that these three models are identical, except for the pipe model that is used:
 </p>
 <ul>
 <li>
 The model
 <a href=\"modelica://AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.MSLAIT\">
 AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.MSLAIT</a>
 uses the pipe model from the Modelica Standard Library, with a fine discretization.
 See the parameter <code>nNodes</code>.
 </li>
 <li>
 The model
 <a href=\"modelica://AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.MSLAIT2Nodes\">
 AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.MSLAIT2Nodes</a>
 uses the same model as above, but sets <code>nNodes=2</code>.
 </li>
 <li>
 The model
 <a href=\"modelica://AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.PlugFlowAIT\">
 AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.PlugFlowAIT</a>
 uses the plug flow model
 <a href=\"modelica://AixLib.Fluid.FixedResistances.PlugFlowPipe\">
 AixLib.Fluid.FixedResistances.PlugFlowPipe</a>.
 </li>
 </ul>
 <p>
 This comparison between different discretization levels and pipe models is made
 to check the influence of the discretization and pipe model on computation time
 and simulation accuracy.
 </p>
 <p>The pipes' temperatures are not initialized, thus results of outflow temperature
 before approximately the first 10000 seconds should not be considered.
 </p>
 <h4>Test bench schematic</h4>
 <p><img alt=\"Schematic of test district heating network\" src=\"modelica://AixLib/Resources/Images/Fluid/FixedResistances/Validation/PlugFlowPipes/AITTestBench.png\"/> </p>
 <h4>Calibration</h4>
 <p>
 To calculate the length specific thermal resistance <code>R</code> of the pipe,
 the thermal resistance of the surrounding ground is added.
 </p>
 <p align=\"center\"style=\"font-style:italic;\">
 R=1/(0.208)+1/(2 &nbsp; lambda<sub>g</sub> Modelica.Constants.pi) &nbsp; log(1/0.18)
 </p>
 <p>
 Where the thermal conductivity of the ground <code>lambda_g</code> = 2.4 W/(m K).
 </p>
 
 <ul>
 <li>
 March 7, 2020, by Michael Wetter:<br/>
 Replaced measured data from specification in Modelica file to external table,
 as this reduces the computing time.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1289\"> #1289</a>.
 </li>
 <li>
 May 15, 2019, by Jianjun Hu:<br/>
 Replaced fluid source. This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1072\"> #1072</a>.
 </li>
 <li>November 28, 2016 by Bram van der Heijde:<br/>Remove <code>pipVol.</code>
 </li>
 <li>
 August 24, 2016 by Bram van der Heijde:<br/>
 Implement validation with MSL pipes for comparison, based on AIT validation.
 </li>
 <li>
 July 4, 2016 by Bram van der Heijde:<br/>Added parameters to test the
 influence of allowFlowReversal and the presence of explicit volumes in the pipe.
 </li>
 <li>January 26, 2016 by Carles Ribas:<br/>First implementation. </li>
 </ul>
 
-------- Corrected Code --------
<p>
  The example contains <a href=
  \"modelica://AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.Data.PipeDataAIT151218\">
  experimental data</a> from a real district heating network. This data
  is used to validate this library's <a href=
  \"modelica://AixLib.Fluid.FixedResistances.PlugFlowPipe\">plug flow
  pipe model</a> in <a href=
  \"modelica://AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.PlugFlowAIT\">
  AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.PlugFlowAIT</a>.
</p>
<p>
  Note that these three models are identical, except for the pipe model
  that is used:
</p>
<ul>
  <li>The model <a href=
  \"modelica://AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.MSLAIT\">
    AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.MSLAIT</a>
    uses the pipe model from the Modelica Standard Library, with a fine
    discretization. See the parameter <code>nNodes</code>.
  </li>
  <li>The model <a href=
  \"modelica://AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.MSLAIT2Nodes\">
    AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.MSLAIT2Nodes</a>
    uses the same model as above, but sets <code>nNodes=2</code>.
  </li>
  <li>The model <a href=
  \"modelica://AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.PlugFlowAIT\">
    AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.PlugFlowAIT</a>
    uses the plug flow model <a href=
    \"modelica://AixLib.Fluid.FixedResistances.PlugFlowPipe\">AixLib.Fluid.FixedResistances.PlugFlowPipe</a>.
  </li>
</ul>
<p>
  This comparison between different discretization levels and pipe
  models is made to check the influence of the discretization and pipe
  model on computation time and simulation accuracy.
</p>
<p>
  The pipes' temperatures are not initialized, thus results of outflow
  temperature before approximately the first 10000 seconds should not
  be considered.
</p>
<h4>
  Test bench schematic
</h4>
<p>
  <img alt=\"Schematic of test district heating network\" src=
  \"modelica://AixLib/Resources/Images/Fluid/FixedResistances/Validation/PlugFlowPipes/AITTestBench.png\">
</p>
<h4>
  Calibration
</h4>
<p>
  To calculate the length specific thermal resistance <code>R</code> of
  the pipe, the thermal resistance of the surrounding ground is added.
</p>
<p align=\"center\" style=\"font-style:italic;\">
  R=1/(0.208)+1/(2 &#160; lambda<sub>g</sub> Modelica.Constants.pi)
  &#160; log(1/0.18)
</p>
<p>
  Where the thermal conductivity of the ground <code>lambda_g</code> =
  2.4 W/(m K).
</p>
<ul>
  <li>March 7, 2020, by Michael Wetter:<br/>
    Replaced measured data from specification in Modelica file to
    external table, as this reduces the computing time.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1289\">#1289</a>.
  </li>
  <li>May 15, 2019, by Jianjun Hu:<br/>
    Replaced fluid source. This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1072\">#1072</a>.
  </li>
  <li>November 28, 2016 by Bram van der Heijde:<br/>
    Remove <code>pipVol.</code>
  </li>
  <li>August 24, 2016 by Bram van der Heijde:<br/>
    Implement validation with MSL pipes for comparison, based on AIT
    validation.
  </li>
  <li>July 4, 2016 by Bram van der Heijde:<br/>
    Added parameters to test the influence of allowFlowReversal and the
    presence of explicit volumes in the pipe.
  </li>
  <li>January 26, 2016 by Carles Ribas:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 51 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Media/Specialized/Water/TemperatureDependentDensity.mo ----
-------- HTML Code --------

     <p>
     Base properties of the medium.
     </p>
 
 <p>
 This function computes the density as a function of temperature.
 </p>
 <h4>Implementation</h4>
 <p>
 The function is based on the IDA implementation in <code>therpro.nmf</code>, which
 implements
 </p>
 <pre>
 d := 1000.12 + 1.43711e-2*T_degC -
  5.83576e-3*T_degC^2 + 1.5009e-5*T_degC^3;
  </pre>
 <p>
 This has been converted to Kelvin, which resulted in the above expression.
 In addition, below 5 &deg;C and above 100 &deg;C, the density is replaced
 by a linear function to avoid inflection points.
 This linear extension is such that the density is once continuously differentiable.
 </p>
 
 <ul>
 <li>
 December 18, 2013, by Michael Wetter:<br/>
 First implementation, based on the IDA implementation in <code>therpro.nmf</code>,
 but converted from Celsius to Kelvin and linearly extended.
 </li>
 </ul>
 
 <p>
 This function computes the dynamic viscosity.
 </p>
 
 <ul>
 <li>
 December 2, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This function computes the specific enthalpy.
 </p>
 
 <ul>
 <li>
 December 11, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This function computes the specific enthalpy of liquid water.
 </p>
 
 <ul>
 <li>
 December 2, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This function computes the specific internal energy.
 </p>
 
 <ul>
 <li>
 December 11, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This function computes the specific entropy.
 </p>
 <p>
 To obtain the state for a given pressure, entropy and mass fraction, use
 <a href=\"modelica://AixLib.Media.Air.setState_psX\">
 AixLib.Media.Air.setState_psX</a>.
 </p>
 
 <ul>
 <li>
 December 18, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This function computes the specific Gibbs energy.
 </p>
 
 <ul>
 <li>
 December 2, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This function computes the specific Helmholtz energy.
 </p>
 
 <ul>
 <li>
 December 2, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This function computes the specific enthalpy for
 an isentropic state change from the temperature
 that corresponds to the state <code>refState</code>
 to <code>reference_T</code>.
 </p>
 
 <ul>
 <li>
 December 18, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This function returns the isobaric expansion coefficient,
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 &beta;<sub>p</sub> = - 1 &frasl; v &nbsp; (&part; v &frasl; &part; T)<sub>p</sub>,
 </p>
 <p>
 where
 <i>v</i> is the specific volume,
 <i>T</i> is the temperature and
 <i>p</i> is the pressure.
 </p>
 
 <ul>
 <li>
 December 18, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This function returns the isothermal compressibility coefficient,
 which is zero as this medium is incompressible.
 The isothermal compressibility is defined as
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 &kappa;<sub>T</sub> = - 1 &frasl; v &nbsp; (&part; v &frasl; &part; p)<sub>T</sub>,
 </p>
 <p>
 where
 <i>v</i> is the specific volume,
 <i>T</i> is the temperature and
 <i>p</i> is the pressure.
 </p>
 
 <ul>
 <li>
 December 18, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This function returns the partial derivative of density
 with respect to pressure at constant temperature,
 which is zero as the medium is incompressible.
 </p>
 
 <ul>
 <li>
 December 18, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This function computes the derivative of density with respect to temperature
 at constant pressure.
 </p>
 
 <ul>
 <li>
 August 17, 2015, by Michael Wetter:<br/>
 Removed dublicate entry of <code>smooth</code> and <code>smoothOrder</code>.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/303\">issue 303</a>.
 </li>
 <li>
 December 18, 2013, by Michael Wetter:<br/>
 First implementation, based on the IDA implementation in <code>therpro.nmf</code>,
 but converted from Celsius to Kelvin.
 </li>
 </ul>
 
 <p>
 This function returns the partial derivative of density
 with respect to mass fraction,
 which is zero as the medium is a single substance.
 </p>
 
 <ul>
 <li>
 December 18, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This function returns the specific heat capacity at constant pressure.
 </p>
 
 <ul>
 <li>
 December 11, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This function computes the specific heat capacity at constant volume.
 </p>
 
 <ul>
 <li>
 December 11, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This function returns the thermal conductivity.
 The expression is obtained from Ramires et al. (1995).
 </p>
 <h4>References</h4>
 <p>
 Ramires, Maria L. V. and Nieto de Castro, Carlos A. and Nagasaka, Yuchi
 and Nagashima, Akira and Assael, Marc J. and Wakeham, William A.
 Standard Reference Data for the Thermal Conductivity of Water.
 <i>Journal of Physical and Chemical Reference Data</i>, 24, p. 1377-1381, 1995.
 <a href=\"http://dx.doi.org/10.1063/1.555963\">DOI:10.1063/1.555963</a>.
 </p>
 
 <ul>
 <li>
 December 18, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This function returns the pressure.
 </p>
 
 <ul>
 <li>
 December 18, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This function returns the temperature.
 </p>
 
 <ul>
 <li>
 December 18, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This function returns the molar mass,
 which is assumed to be constant.
 </p>
 
 <ul>
 <li>
 December 18, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This function returns the thermodynamic state for a given pressure,
 specific enthalpy and composition.
 </p>
 
 <ul>
 <li>
 December 11, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This function returns the thermodynamic state for a given pressure,
 temperature and composition.
 </p>
 
 <ul>
 <li>
 December 11, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This function returns the thermodynamic state based on pressure,
 specific entropy and mass fraction.
 </p>
 <p>
 The state is computed by symbolically solving
 <a href=\"modelica://AixLib.Media.Specialized.Water.TemperatureDependentDensity.specificEntropy\">
 AixLib.Media.Specialized.Water.TemperatureDependentDensity.specificEntropy</a>
 for temperature.
   </p>
 
 <ul>
 <li>
 April 11, 2016 by Michael Wetter:<br/>
 Corrected wrong hyperlink in documentation for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/450\">issue 450</a>.
 </li>
 <li>
 December 11, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This function computes the derivative of the specific heat capacity
 at constant pressure with respect to the state.
 </p>
 
 <ul>
 <li>
 December 11, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This function computes the temperature derivative of the enthalpy of liquid water
 per unit mass.
 </p>
 
 <ul>
 <li>
 December 11, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This function computes the kinematic viscosity as a function of temperature.
 </p>
 <h4>Implementation</h4>
 <p>
 The function is based on the IDA implementation in <code>therpro.nmf</code>.
 The original equation is
 </p>
 <pre>
 kinVis :=1E-6*Modelica.Math.exp(0.577449 - 3.253945e-2*T_degC + 2.17369e-4*
       T_degC^2 - 7.22111e-7*T_degC^3);
       </pre>
 <p>
 This has been converted to Kelvin, which resulted in the above expression.
 In addition, at 5 &deg;C the kinematic viscosity is linearly extrapolated
 to avoid a large gradient at very low temperatures.
 We selected the same point for the linearization as we used for the density,
 as the density and the kinematic viscosity are combined in
 <a href=\"modelica://AixLib.Media.Specialized.Water.TemperatureDependentDensity.dynamicViscosity\">
 AixLib.Media.Specialized.Water.TemperatureDependentDensity.dynamicViscosity</a>.
 </p>
 
 <ul>
 <li>
 April 11, 2016 by Michael Wetter:<br/>
 Corrected wrong hyperlink in documentation for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/450\">issue 450</a>.
 </li>
 <li>
 December 18, 2013, by Michael Wetter:<br/>
 First implementation, based on the IDA implementation in <code>therpro.nmf</code>,
 but converted from Celsius to Kelvin.
 </li>
 </ul>
 
 <p>
 This medium package models liquid water.
 </p>
 <p>
 The mass density is computed using a 3rd order polynomial, which yields the
 density as a function of temperature as shown in the figure below. Note, however,
 that computing density as a function of temperature can lead to considerably
 slower computing time compared to using
 <a href=\"modelica://AixLib.Media.Water\">
 AixLib.Media.Water</a>
 in which the density is a constant. We therefore recommend to use
 <a href=\"modelica://AixLib.Media.Water\">
 AixLib.Media.Water</a>
 for typical building energy simulations.
 </p>
 <p align=\"center\">
 <img src=\"modelica://AixLib/Resources/Images/Media/Water/plotRho.png\" border=\"1\"
 alt=\"Mass density as a function of temperature\"/>
 </p>
 <p>
 For the specific heat capacities at constant pressure and at constant volume,
 a constant value of <i>4184</i> J/(kg K), which corresponds to <i>20</i>&deg;C
 is used.
 The figure below shows the relative error of the specific heat capacity that
 is introduced by this simplification.
 Using a constant value for the specific heat capacity allows to compute
 temperature from enthalpy without having to solve an implicit equation,
 and therefore leads to faster simulation.
 </p>
 <p align=\"center\">
 <img src=\"modelica://AixLib/Resources/Images/Media/Water/plotCp.png\" border=\"1\"
 alt=\"Relative variation of specific heat capacity with temperature\"/>
 </p>
 
 
 <p>
 Thermal conductivity is calculated as a function of temperature as shown in the figure below.
 The correlation used to calculate the thermal conductivity is
 </p>
 
 <p align=\"center\" style=\"font-style:italic;\">
 &lambda;(T) = &lambda;(298.15 K) &sdot; (-1.48445+4.12292&sdot;(T/298.15)-1.63866&sdot;(T/298.15)<sup>2</sup>),
 </p>
 <p>
 where <i>&lambda;(298.15 K) = 0.6065</i>  W/(m &sdot; K) is the adopted standard value
 of the thermal conductivity of water at <i>298.15</i> K and <i>0.1</i> MPa.
 </p>
 <p align=\"center\">
 <img src=\"modelica://AixLib/Resources/Images/Media/Water/plotLambda.png\" border=\"1\"
 alt=\"Thermal conductivity as a function of temperature\"/>
 </p>
 
 <p>
 Dynamic viscosity is calculated as the product of density and kinematic viscosity,
 both temperature dependent. However, the kinematic viscosity
 has its own temperature dependent correlation, implemented at
 <a href=\"modelica://AixLib.Media.Specialized.Water.TemperatureDependentDensity.kinematicViscosity\">
 AixLib.Media.Specialized.Water.TemperatureDependentDensity.kinematicViscosity</a>.
 Results of the kinematic viscosity as a function of temperature are shown in the figure below.
 </p>
 <p align=\"center\">
 <img src=\"modelica://AixLib/Resources/Images/Media/Water/plotkinVis.png\" border=\"1\"
 alt=\"Kinematic viscosity as a function of temperature\"/>
 </p>
 
 <p>
 The enthalpy is computed using the convention that <i>h=0</i>
 if <i>T=0</i> &deg;C.
 </p>
 <h4>Limitations</h4>
 <p>
 Phase changes are not modeled.
 </p>
 
 <ul>
 <li>
 April 5, 2022, by Michael Wetter:<br/>
 Corrected assignment of <code>R_s</code> in <code>BaseProperties</code> to avoid a unit error.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1603\">#1603</a>.
 </li>
 <li>
 July 7, 2016, by Carles Ribas Tugores:<br/>
 Correct Documentation. This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/487\">#487</a>.
 </li>
 <li>
 June 6, 2015, by Michael Wetter:<br/>
 Set <code>AbsolutePressure(start=p_default)</code>
 and <code>Temperature(start=T_default)</code>
 to have to have conistent start values.
 See also revision notes of
 <a href=\"modelica://AixLib.Media.Water\">
 AixLib.Media.Water</a>.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/266\">#266</a>.
 </li>
 <li>
 May 1, 2015, by Michael Wetter:<br/>
 Added <code>Inline=true</code> for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/227\">
 issue 227</a>.
 </li>
 <li>
 February 25, 2015, by Michael Wetter:<br/>
 Removed <code>stateSelect</code> attribute on pressure as this caused
 <a href=\"modelica://AixLib.Examples.Tutorial.SpaceCooling.System3\">
 AixLib.Examples.Tutorial.SpaceCooling.System3</a>
 to fail with the error message
 \"differentiated if-then-else was not continuous\".
 </li>
 <li>
 February 3, 2015, by Michael Wetter:<br/>
 Removed <code>stateSelect.prefer</code> for temperature.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/160\">#160</a>.
 </li>
 <li>
 October 15, 2014, by Michael Wetter:<br/>
 Renamed from <code>AixLib.Media.Water</code> to
 <code>AixLib.Media.Water.Detailed</code> to allow addition of
 <code>AixLib.Media.Water.Simple</code>.
 </li>
 <li>
 September 12, 2014, by Michael Wetter:<br/>
 Set <code>T(start=T_default)</code> and <code>p(start=p_default)</code> in the
 <code>ThermodynamicState</code> record. Setting the start value for
 <code>T</code> is required to avoid an error due to conflicting start values
 when checking <a href=\"modelica://AixLib.Examples.VAVReheat.ClosedLoop\">
 AixLib.Examples.VAVReheat.ClosedLoop</a> in pedantic mode.
 </li>
 <li>
 December 18, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Base properties of the medium.
</p>
<p>
  This function computes the density as a function of temperature.
</p>
<h4>
  Implementation
</h4>
<p>
  The function is based on the IDA implementation in
  <code>therpro.nmf</code>, which implements
</p>
<pre>
 d := 1000.12 + 1.43711e-2*T_degC -
  5.83576e-3*T_degC^2 + 1.5009e-5*T_degC^3;
  </pre>
<p>
  This has been converted to Kelvin, which resulted in the above
  expression. In addition, below 5 °C and above 100 °C, the density is
  replaced by a linear function to avoid inflection points. This linear
  extension is such that the density is once continuously
  differentiable.
</p>
<ul>
  <li>December 18, 2013, by Michael Wetter:<br/>
    First implementation, based on the IDA implementation in
    <code>therpro.nmf</code>, but converted from Celsius to Kelvin and
    linearly extended.
  </li>
</ul>
<p>
  This function computes the dynamic viscosity.
</p>
<ul>
  <li>December 2, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This function computes the specific enthalpy.
</p>
<ul>
  <li>December 11, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This function computes the specific enthalpy of liquid water.
</p>
<ul>
  <li>December 2, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This function computes the specific internal energy.
</p>
<ul>
  <li>December 11, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This function computes the specific entropy.
</p>
<p>
  To obtain the state for a given pressure, entropy and mass fraction,
  use <a href=
  \"modelica://AixLib.Media.Air.setState_psX\">AixLib.Media.Air.setState_psX</a>.
</p>
<ul>
  <li>December 18, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This function computes the specific Gibbs energy.
</p>
<ul>
  <li>December 2, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This function computes the specific Helmholtz energy.
</p>
<ul>
  <li>December 2, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This function computes the specific enthalpy for an isentropic state
  change from the temperature that corresponds to the state
  <code>refState</code> to <code>reference_T</code>.
</p>
<ul>
  <li>December 18, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This function returns the isobaric expansion coefficient,
</p>
<p align=\"center\" style=\"font-style:italic;\">
  β<sub>p</sub> = - 1 ⁄ v &#160; (∂ v ⁄ ∂ T)<sub>p</sub>,
</p>
<p>
  where <i>v</i> is the specific volume, <i>T</i> is the temperature
  and <i>p</i> is the pressure.
</p>
<ul>
  <li>December 18, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This function returns the isothermal compressibility coefficient,
  which is zero as this medium is incompressible. The isothermal
  compressibility is defined as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  κ<sub>T</sub> = - 1 ⁄ v &#160; (∂ v ⁄ ∂ p)<sub>T</sub>,
</p>
<p>
  where <i>v</i> is the specific volume, <i>T</i> is the temperature
  and <i>p</i> is the pressure.
</p>
<ul>
  <li>December 18, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This function returns the partial derivative of density with respect
  to pressure at constant temperature, which is zero as the medium is
  incompressible.
</p>
<ul>
  <li>December 18, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This function computes the derivative of density with respect to
  temperature at constant pressure.
</p>
<ul>
  <li>August 17, 2015, by Michael Wetter:<br/>
    Removed dublicate entry of <code>smooth</code> and
    <code>smoothOrder</code>. This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/303\">issue 303</a>.
  </li>
  <li>December 18, 2013, by Michael Wetter:<br/>
    First implementation, based on the IDA implementation in
    <code>therpro.nmf</code>, but converted from Celsius to Kelvin.
  </li>
</ul>
<p>
  This function returns the partial derivative of density with respect
  to mass fraction, which is zero as the medium is a single substance.
</p>
<ul>
  <li>December 18, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This function returns the specific heat capacity at constant
  pressure.
</p>
<ul>
  <li>December 11, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This function computes the specific heat capacity at constant volume.
</p>
<ul>
  <li>December 11, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This function returns the thermal conductivity. The expression is
  obtained from Ramires et al. (1995).
</p>
<h4>
  References
</h4>
<p>
  Ramires, Maria L. V. and Nieto de Castro, Carlos A. and Nagasaka,
  Yuchi and Nagashima, Akira and Assael, Marc J. and Wakeham, William
  A. Standard Reference Data for the Thermal Conductivity of Water.
  <i>Journal of Physical and Chemical Reference Data</i>, 24, p.
  1377-1381, 1995. <a href=
  \"http://dx.doi.org/10.1063/1.555963\">DOI:10.1063/1.555963</a>.
</p>
<ul>
  <li>December 18, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This function returns the pressure.
</p>
<ul>
  <li>December 18, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This function returns the temperature.
</p>
<ul>
  <li>December 18, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This function returns the molar mass, which is assumed to be
  constant.
</p>
<ul>
  <li>December 18, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This function returns the thermodynamic state for a given pressure,
  specific enthalpy and composition.
</p>
<ul>
  <li>December 11, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This function returns the thermodynamic state for a given pressure,
  temperature and composition.
</p>
<ul>
  <li>December 11, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This function returns the thermodynamic state based on pressure,
  specific entropy and mass fraction.
</p>
<p>
  The state is computed by symbolically solving <a href=
  \"modelica://AixLib.Media.Specialized.Water.TemperatureDependentDensity.specificEntropy\">
  AixLib.Media.Specialized.Water.TemperatureDependentDensity.specificEntropy</a>
  for temperature.
</p>
<ul>
  <li>April 11, 2016 by Michael Wetter:<br/>
    Corrected wrong hyperlink in documentation for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/450\">issue 450</a>.
  </li>
  <li>December 11, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This function computes the derivative of the specific heat capacity
  at constant pressure with respect to the state.
</p>
<ul>
  <li>December 11, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This function computes the temperature derivative of the enthalpy of
  liquid water per unit mass.
</p>
<ul>
  <li>December 11, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This function computes the kinematic viscosity as a function of
  temperature.
</p>
<h4>
  Implementation
</h4>
<p>
  The function is based on the IDA implementation in
  <code>therpro.nmf</code>. The original equation is
</p>
<pre>
 kinVis :=1E-6*Modelica.Math.exp(0.577449 - 3.253945e-2*T_degC + 2.17369e-4*
       T_degC^2 - 7.22111e-7*T_degC^3);
       </pre>
<p>
  This has been converted to Kelvin, which resulted in the above
  expression. In addition, at 5 °C the kinematic viscosity is linearly
  extrapolated to avoid a large gradient at very low temperatures. We
  selected the same point for the linearization as we used for the
  density, as the density and the kinematic viscosity are combined in
  <a href=
  \"modelica://AixLib.Media.Specialized.Water.TemperatureDependentDensity.dynamicViscosity\">
  AixLib.Media.Specialized.Water.TemperatureDependentDensity.dynamicViscosity</a>.
</p>
<ul>
  <li>April 11, 2016 by Michael Wetter:<br/>
    Corrected wrong hyperlink in documentation for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/450\">issue 450</a>.
  </li>
  <li>December 18, 2013, by Michael Wetter:<br/>
    First implementation, based on the IDA implementation in
    <code>therpro.nmf</code>, but converted from Celsius to Kelvin.
  </li>
</ul>
<p>
  This medium package models liquid water.
</p>
<p>
  The mass density is computed using a 3rd order polynomial, which
  yields the density as a function of temperature as shown in the
  figure below. Note, however, that computing density as a function of
  temperature can lead to considerably slower computing time compared
  to using <a href=
  \"modelica://AixLib.Media.Water\">AixLib.Media.Water</a> in which the
  density is a constant. We therefore recommend to use <a href=
  \"modelica://AixLib.Media.Water\">AixLib.Media.Water</a> for typical
  building energy simulations.
</p>
<p align=\"center\">
  <img src=\"modelica://AixLib/Resources/Images/Media/Water/plotRho.png\"
  border=\"1\" alt=\"Mass density as a function of temperature\">
</p>
<p>
  For the specific heat capacities at constant pressure and at constant
  volume, a constant value of <i>4184</i> J/(kg K), which corresponds
  to <i>20</i>°C is used. The figure below shows the relative error of
  the specific heat capacity that is introduced by this simplification.
  Using a constant value for the specific heat capacity allows to
  compute temperature from enthalpy without having to solve an implicit
  equation, and therefore leads to faster simulation.
</p>
<p align=\"center\">
  <img src=\"modelica://AixLib/Resources/Images/Media/Water/plotCp.png\"
  border=\"1\" alt=
  \"Relative variation of specific heat capacity with temperature\">
</p>
<p>
  Thermal conductivity is calculated as a function of temperature as
  shown in the figure below. The correlation used to calculate the
  thermal conductivity is
</p>
<p align=\"center\" style=\"font-style:italic;\">
  λ(T) = λ(298.15 K) ⋅
  (-1.48445+4.12292⋅(T/298.15)-1.63866⋅(T/298.15)<sup>2</sup>),
</p>
<p>
  where <i>λ(298.15 K) = 0.6065</i> W/(m ⋅ K) is the adopted standard
  value of the thermal conductivity of water at <i>298.15</i> K and
  <i>0.1</i> MPa.
</p>
<p align=\"center\">
  <img src=
  \"modelica://AixLib/Resources/Images/Media/Water/plotLambda.png\"
  border=\"1\" alt=\"Thermal conductivity as a function of temperature\">
</p>
<p>
  Dynamic viscosity is calculated as the product of density and
  kinematic viscosity, both temperature dependent. However, the
  kinematic viscosity has its own temperature dependent correlation,
  implemented at <a href=
  \"modelica://AixLib.Media.Specialized.Water.TemperatureDependentDensity.kinematicViscosity\">
  AixLib.Media.Specialized.Water.TemperatureDependentDensity.kinematicViscosity</a>.
  Results of the kinematic viscosity as a function of temperature are
  shown in the figure below.
</p>
<p align=\"center\">
  <img src=
  \"modelica://AixLib/Resources/Images/Media/Water/plotkinVis.png\"
  border=\"1\" alt=\"Kinematic viscosity as a function of temperature\">
</p>
<p>
  The enthalpy is computed using the convention that <i>h=0</i> if
  <i>T=0</i> °C.
</p>
<h4>
  Limitations
</h4>
<p>
  Phase changes are not modeled.
</p>
<ul>
  <li>April 5, 2022, by Michael Wetter:<br/>
    Corrected assignment of <code>R_s</code> in
    <code>BaseProperties</code> to avoid a unit error.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1603\">#1603</a>.
  </li>
  <li>July 7, 2016, by Carles Ribas Tugores:<br/>
    Correct Documentation. This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/487\">#487</a>.
  </li>
  <li>June 6, 2015, by Michael Wetter:<br/>
    Set <code>AbsolutePressure(start=p_default)</code> and
    <code>Temperature(start=T_default)</code> to have to have conistent
    start values. See also revision notes of <a href=
    \"modelica://AixLib.Media.Water\">AixLib.Media.Water</a>. This is for
    <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/266\">#266</a>.
  </li>
  <li>May 1, 2015, by Michael Wetter:<br/>
    Added <code>Inline=true</code> for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/227\">issue 227</a>.
  </li>
  <li>February 25, 2015, by Michael Wetter:<br/>
    Removed <code>stateSelect</code> attribute on pressure as this
    caused <a href=
    \"modelica://AixLib.Examples.Tutorial.SpaceCooling.System3\">AixLib.Examples.Tutorial.SpaceCooling.System3</a>
    to fail with the error message \"differentiated if-then-else was not
    continuous\".
  </li>
  <li>February 3, 2015, by Michael Wetter:<br/>
    Removed <code>stateSelect.prefer</code> for temperature. This is
    for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/160\">#160</a>.
  </li>
  <li>October 15, 2014, by Michael Wetter:<br/>
    Renamed from <code>AixLib.Media.Water</code> to
    <code>AixLib.Media.Water.Detailed</code> to allow addition of
    <code>AixLib.Media.Water.Simple</code>.
  </li>
  <li>September 12, 2014, by Michael Wetter:<br/>
    Set <code>T(start=T_default)</code> and
    <code>p(start=p_default)</code> in the
    <code>ThermodynamicState</code> record. Setting the start value for
    <code>T</code> is required to avoid an error due to conflicting
    start values when checking <a href=
    \"modelica://AixLib.Examples.VAVReheat.ClosedLoop\">AixLib.Examples.VAVReheat.ClosedLoop</a>
    in pedantic mode.
  </li>
  <li>December 18, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 5 column 2 - Warning: <p> attribute "align" not allowed for HTML5


line 7 column 2 - Warning: <p> attribute "align" not allowed for HTML5


line 17 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 31 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 42 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 49 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 62 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/FixedResistances/PressureDrop.mo ----
-------- HTML Code --------

 <p>
 Model of a flow resistance with a fixed flow coefficient.
 The mass flow rate is
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 m&#775; = k
 &radic;<span style=\"text-decoration:overline;\">&Delta;P</span>,
 </p>
 <p>
 where
 <i>k</i> is a constant and
 <i>&Delta;P</i> is the pressure drop.
 The constant <i>k</i> is equal to
 <code>k=m_flow_nominal/sqrt(dp_nominal)</code>,
 where <code>m_flow_nominal</code> and <code>dp_nominal</code>
 are parameters.
 </p>
 <h4>Assumptions</h4>
 <p>
 In the region
 <code>abs(m_flow) &lt; m_flow_turbulent</code>,
 the square root is replaced by a differentiable function
 with finite slope.
 The value of <code>m_flow_turbulent</code> is
 computed as
 <code>m_flow_turbulent = deltaM * abs(m_flow_nominal)</code>,
 where <code>deltaM=0.3</code> and
 <code>m_flow_nominal</code> are parameters that can be set by the user.
 </p>
 <p>
 The figure below shows the pressure drop for the parameters
 <code>m_flow_nominal=5</code> kg/s,
 <code>dp_nominal=10</code> Pa and
 <code>deltaM=0.3</code>.
 </p>
 <p align=\"center\">
 <img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/FixedResistances/PressureDrop.png\"/>
 </p>
 <h4>Important parameters</h4>
 <p>
 The parameter <code>from_dp</code> is used to determine
 whether the mass flow rate is computed as a function of the
 pressure drop (if <code>from_dp=true</code>), or vice versa.
 This setting can affect the size of the nonlinear system of equations.
 </p>
 <p>
 If the parameter <code>linearized</code> is set to <code>true</code>,
 then the pressure drop is computed as a linear function of the
 mass flow rate.
 </p>
 <p>
 Setting <code>allowFlowReversal=false</code> can lead to simpler
 equations. However, this should only be set to <code>false</code>
 if one can guarantee that the flow never reverses its direction.
 This can be difficult to guarantee, as pressure imbalance after
 the initialization, or due to medium expansion and contraction,
 can lead to reverse flow.
 </p>
 <p>
 If the parameter
 <code>show_T</code> is set to <code>true</code>,
 then the model will compute the
 temperature at its ports. Note that this can lead to state events
 when the mass flow rate approaches zero,
 which can increase computing time.
 </p>
 <h4>Notes</h4>
 <p>
 For more detailed models that compute the actual flow friction,
 models from the package
 <a href=\"modelica://Modelica.Fluid\">
 Modelica.Fluid</a>
 can be used and combined with models from the
 <code>AixLib</code> library.
 </p>
 <p>
 For a model that uses the hydraulic parameter and flow velocity at nominal conditions
 as a parameter, use
 <a href=\"modelica://AixLib.Fluid.FixedResistances.HydraulicDiameter\">
 AixLib.Fluid.FixedResistances.HydraulicDiameter</a>.
 </p>
 <h4>Implementation</h4>
 <p>
 The pressure drop is computed by calling a function in the package
 <a href=\"modelica://AixLib.Fluid.BaseClasses.FlowModels\">
 AixLib.Fluid.BaseClasses.FlowModels</a>,
 This package contains regularized implementations of the equation
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   m = sign(&Delta;p) k  &radic;<span style=\"text-decoration:overline;\">&nbsp;&Delta;p &nbsp;</span>
 </p>
 <p>
 and its inverse function.
 </p>
 <p>
 To decouple the energy equation from the mass equations,
 the pressure drop is a function of the mass flow rate,
 and not the volume flow rate.
 This leads to simpler equations.
 </p>
 
 <ul>
 <li>
 September 21, 2018, by Michael Wetter:<br/>
 Decrease value of <code>deltaM(min=...)</code> attribute.
 See <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1026\">#1026</a>.
 </li>
 <li>
 February 3, 2018, by Filip Jorissen:<br/>
 Revised implementation of pressure drop equation
 such that it depends on <code>from_dp</code>
 when <code>linearized=true</code>.
 See <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/884\">#884</a>.
 </li>
 <li>
 December 1, 2016, by Michael Wetter:<br/>
 Simplified model by removing the geometry dependent parameters into the new
 model
 <a href=\"modelica://AixLib.Fluid.FixedResistances.HydraulicDiameter\">
 AixLib.Fluid.FixedResistances.HydraulicDiameter</a>.
 </li>
 <li>
 November 23, 2016, by Filip Jorissen:<br/>
 Removed <code>dp_nominal</code> and
 <code>m_flow_nominal</code> labels from icon.
 </li>
 <li>
 October 14, 2016, by Michael Wetter:<br/>
 Updated comment for parameter <code>use_dh</code>.
 </li>
 <li>
 November 26, 2014, by Michael Wetter:<br/>
 Added the required <code>annotation(Evaluate=true)</code> so
 that the system of nonlinear equations in
 <a href=\"modelica://AixLib.Fluid.FixedResistances.Validation.PressureDropsExplicit\">
 AixLib.Fluid.FixedResistances.Validation.PressureDropsExplicit</a>
 remains the same.
 </li>
 <li>
 November 20, 2014, by Michael Wetter:<br/>
 Rewrote the warning message using an <code>assert</code> with
 <code>AssertionLevel.warning</code>
 as this is the proper way to write warnings in Modelica.
 </li>
 <li>
 August 5, 2014, by Michael Wetter:<br/>
 Corrected error in documentation of computation of <code>k</code>.
 </li>
 <li>
 May 29, 2014, by Michael Wetter:<br/>
 Removed undesirable annotation <code>Evaluate=true</code>.
 </li>
 <li>
 October 8, 2013, by Michael Wetter:<br/>
 Removed parameter <code>show_V_flow</code>.
 </li>
 <li>
 December 14, 2012 by Michael Wetter:<br/>
 Renamed protected parameters for consistency with the naming conventions.
 </li>
 <li>
 January 16, 2012 by Michael Wetter:<br/>
 To simplify object inheritance tree, revised base classes
 <code>AixLib.Fluid.BaseClasses.PartialResistance</code>,
 <code>AixLib.Fluid.Actuators.BaseClasses.PartialTwoWayValve</code>,
 <code>AixLib.Fluid.Actuators.BaseClasses.PartialDamperExponential</code>,
 <code>AixLib.Fluid.Actuators.BaseClasses.PartialActuator</code>
 and model
 <code>AixLib.Fluid.FixedResistances.PressureDrop</code>.
 </li>
 <li>
 May 30, 2008 by Michael Wetter:<br/>
 Added parameters <code>use_dh</code> and <code>deltaM</code> for easier parameterization.
 </li>
 <li>
 July 20, 2007 by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Model of a flow resistance with a fixed flow coefficient. The mass
  flow rate is
</p>
<p align=\"center\" style=\"font-style:italic;\">
  ṁ = k √<span style=\"text-decoration:overline;\">ΔP</span>,
</p>
<p>
  where <i>k</i> is a constant and <i>ΔP</i> is the pressure drop. The
  constant <i>k</i> is equal to
  <code>k=m_flow_nominal/sqrt(dp_nominal)</code>, where
  <code>m_flow_nominal</code> and <code>dp_nominal</code> are
  parameters.
</p>
<h4>
  Assumptions
</h4>
<p>
  In the region <code>abs(m_flow) &lt; m_flow_turbulent</code>, the
  square root is replaced by a differentiable function with finite
  slope. The value of <code>m_flow_turbulent</code> is computed as
  <code>m_flow_turbulent = deltaM * abs(m_flow_nominal)</code>, where
  <code>deltaM=0.3</code> and <code>m_flow_nominal</code> are
  parameters that can be set by the user.
</p>
<p>
  The figure below shows the pressure drop for the parameters
  <code>m_flow_nominal=5</code> kg/s, <code>dp_nominal=10</code> Pa and
  <code>deltaM=0.3</code>.
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/FixedResistances/PressureDrop.png\">
</p>
<h4>
  Important parameters
</h4>
<p>
  The parameter <code>from_dp</code> is used to determine whether the
  mass flow rate is computed as a function of the pressure drop (if
  <code>from_dp=true</code>), or vice versa. This setting can affect
  the size of the nonlinear system of equations.
</p>
<p>
  If the parameter <code>linearized</code> is set to <code>true</code>,
  then the pressure drop is computed as a linear function of the mass
  flow rate.
</p>
<p>
  Setting <code>allowFlowReversal=false</code> can lead to simpler
  equations. However, this should only be set to <code>false</code> if
  one can guarantee that the flow never reverses its direction. This
  can be difficult to guarantee, as pressure imbalance after the
  initialization, or due to medium expansion and contraction, can lead
  to reverse flow.
</p>
<p>
  If the parameter <code>show_T</code> is set to <code>true</code>,
  then the model will compute the temperature at its ports. Note that
  this can lead to state events when the mass flow rate approaches
  zero, which can increase computing time.
</p>
<h4>
  Notes
</h4>
<p>
  For more detailed models that compute the actual flow friction,
  models from the package <a href=
  \"modelica://Modelica.Fluid\">Modelica.Fluid</a> can be used and
  combined with models from the <code>AixLib</code> library.
</p>
<p>
  For a model that uses the hydraulic parameter and flow velocity at
  nominal conditions as a parameter, use <a href=
  \"modelica://AixLib.Fluid.FixedResistances.HydraulicDiameter\">AixLib.Fluid.FixedResistances.HydraulicDiameter</a>.
</p>
<h4>
  Implementation
</h4>
<p>
  The pressure drop is computed by calling a function in the package
  <a href=
  \"modelica://AixLib.Fluid.BaseClasses.FlowModels\">AixLib.Fluid.BaseClasses.FlowModels</a>,
  This package contains regularized implementations of the equation
</p>
<p align=\"center\" style=\"font-style:italic;\">
  m = sign(Δp) k √<span style=\"text-decoration:overline;\">&#160;Δp
  &#160;</span>
</p>
<p>
  and its inverse function.
</p>
<p>
  To decouple the energy equation from the mass equations, the pressure
  drop is a function of the mass flow rate, and not the volume flow
  rate. This leads to simpler equations.
</p>
<ul>
  <li>September 21, 2018, by Michael Wetter:<br/>
    Decrease value of <code>deltaM(min=...)</code> attribute. See
    <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1026\">#1026</a>.
  </li>
  <li>February 3, 2018, by Filip Jorissen:<br/>
    Revised implementation of pressure drop equation such that it
    depends on <code>from_dp</code> when <code>linearized=true</code>.
    See <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/884\">#884</a>.
  </li>
  <li>December 1, 2016, by Michael Wetter:<br/>
    Simplified model by removing the geometry dependent parameters into
    the new model <a href=
    \"modelica://AixLib.Fluid.FixedResistances.HydraulicDiameter\">AixLib.Fluid.FixedResistances.HydraulicDiameter</a>.
  </li>
  <li>November 23, 2016, by Filip Jorissen:<br/>
    Removed <code>dp_nominal</code> and <code>m_flow_nominal</code>
    labels from icon.
  </li>
  <li>October 14, 2016, by Michael Wetter:<br/>
    Updated comment for parameter <code>use_dh</code>.
  </li>
  <li>November 26, 2014, by Michael Wetter:<br/>
    Added the required <code>annotation(Evaluate=true)</code> so that
    the system of nonlinear equations in <a href=
    \"modelica://AixLib.Fluid.FixedResistances.Validation.PressureDropsExplicit\">
    AixLib.Fluid.FixedResistances.Validation.PressureDropsExplicit</a>
    remains the same.
  </li>
  <li>November 20, 2014, by Michael Wetter:<br/>
    Rewrote the warning message using an <code>assert</code> with
    <code>AssertionLevel.warning</code> as this is the proper way to
    write warnings in Modelica.
  </li>
  <li>August 5, 2014, by Michael Wetter:<br/>
    Corrected error in documentation of computation of <code>k</code>.
  </li>
  <li>May 29, 2014, by Michael Wetter:<br/>
    Removed undesirable annotation <code>Evaluate=true</code>.
  </li>
  <li>October 8, 2013, by Michael Wetter:<br/>
    Removed parameter <code>show_V_flow</code>.
  </li>
  <li>December 14, 2012 by Michael Wetter:<br/>
    Renamed protected parameters for consistency with the naming
    conventions.
  </li>
  <li>January 16, 2012 by Michael Wetter:<br/>
    To simplify object inheritance tree, revised base classes
    <code>AixLib.Fluid.BaseClasses.PartialResistance</code>,
    <code>AixLib.Fluid.Actuators.BaseClasses.PartialTwoWayValve</code>,
    <code>AixLib.Fluid.Actuators.BaseClasses.PartialDamperExponential</code>,
    <code>AixLib.Fluid.Actuators.BaseClasses.PartialActuator</code> and
    model <code>AixLib.Fluid.FixedResistances.PressureDrop</code>.
  </li>
  <li>May 30, 2008 by Michael Wetter:<br/>
    Added parameters <code>use_dh</code> and <code>deltaM</code> for
    easier parameterization.
  </li>
  <li>July 20, 2007 by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 6 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 37 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 90 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Geothermal/Borefields/BaseClasses/HeatTransfer/ThermalResponseFactors/cylindricalHeatSource.mo ----
-------- HTML Code --------

 <p>
 This function evaluates the cylindrical heat source solution. This solution
 gives the relation between the constant heat transfer rate (per unit length)
 injected by a cylindrical heat source of infinite length and the temperature
 raise in the medium. The cylindrical heat source solution is defined by
 </p>
 <p align=\"center\">
 <img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/CylindricalHeatSource_01.png\" />
 </p>
 <p>
 where <i>&Delta;T(t,r)</i> is the temperature raise after a time <i>t</i> of
 constant heat injection and at a distance <i>r</i> from the cylindrical source,
 <i>Q'</i> is the heat injection rate per unit length, <i>k<sub>s</sub></i> is
 the soil thermal conductivity, <i>Fo</i> is the Fourier number,
 <i>aSoi<sub>s</sub></i> is the ground thermal diffusivity,
 <i>r<sub>b</sub></i> is the radius of the cylindrical source and <i>G</i>
 is the cylindrical heat source solution.
 </p>
 <p>
 The cylindrical heat source solution is given by:
 </p>
 <p align=\"center\">
 <img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/CylindricalHeatSource_02.png\" />
 </p>
 <p>
 The integral is solved numerically, with the integrand defined in
 <a href=\"modelica://AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.ThermalResponseFactors.cylindricalHeatSource_Integrand\">
 AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.ThermalResponseFactors.cylindricalHeatSource_Integrand</a>.
 </p>
 
 <ul>
 <li>
 March 22, 2018 by Massimo Cimmino:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This function evaluates the cylindrical heat source solution. This
  solution gives the relation between the constant heat transfer rate
  (per unit length) injected by a cylindrical heat source of infinite
  length and the temperature raise in the medium. The cylindrical heat
  source solution is defined by
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/CylindricalHeatSource_01.png\">
</p>
<p>
  where <i>ΔT(t,r)</i> is the temperature raise after a time <i>t</i>
  of constant heat injection and at a distance <i>r</i> from the
  cylindrical source, <i>Q'</i> is the heat injection rate per unit
  length, <i>k<sub>s</sub></i> is the soil thermal conductivity,
  <i>Fo</i> is the Fourier number, <i>aSoi<sub>s</sub></i> is the
  ground thermal diffusivity, <i>r<sub>b</sub></i> is the radius of the
  cylindrical source and <i>G</i> is the cylindrical heat source
  solution.
</p>
<p>
  The cylindrical heat source solution is given by:
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/CylindricalHeatSource_02.png\">
</p>
<p>
  The integral is solved numerically, with the integrand defined in
  <a href=
  \"modelica://AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.ThermalResponseFactors.cylindricalHeatSource_Integrand\">
  AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.ThermalResponseFactors.cylindricalHeatSource_Integrand</a>.
</p>
<ul>
  <li>March 22, 2018 by Massimo Cimmino:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 8 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 23 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Media/Air.mo ----
-------- HTML Code --------

 <p>
 Model with basic thermodynamic properties.
 </p>
 <p>
 This model provides equation for the following thermodynamic properties:
 </p>
 <table border=\"1\" cellspacing=\"0\" cellpadding=\"2\" summary=\"Thermodynamic properties\">
   <tr><td><strong>Variable</strong></td>
       <td><strong>Unit</strong></td>
       <td><strong>Description</strong></td></tr>
   <tr><td>T</td>
       <td>K</td>
       <td>temperature</td></tr>
   <tr><td>p</td>
       <td>Pa</td>
       <td>absolute pressure</td></tr>
   <tr><td>d</td>
       <td>kg/m3</td>
       <td>density</td></tr>
   <tr><td>h</td>
       <td>J/kg</td>
       <td>specific enthalpy</td></tr>
   <tr><td>u</td>
       <td>J/kg</td>
       <td>specific internal energy</td></tr>
   <tr><td>Xi[nXi]</td>
       <td>kg/kg</td>
       <td>independent mass fractions m_i/m</td></tr>
   <tr><td>R</td>
       <td>J/kg.K</td>
       <td>gas constant</td></tr>
   <tr><td>M</td>
       <td>kg/mol</td>
       <td>molar mass</td></tr>
 </table>
 
 <ul>
 <li>
 September 22, 2020, by Michael Wetter:<br/>
 First implementation based on Modelica Standard Library,
 but with <code>noEvent</code> added to check of bounds.
 </li>
 </ul>
 
 Density is computed from pressure, temperature and composition in the thermodynamic state record applying the ideal gas law.
 
 <p>
 This function returns the dynamic viscosity.
 </p>
 <h4>Implementation</h4>
 <p>
 The function is based on the 5th order polynomial
 of
 <a href=\"modelica://Modelica.Media.Air.MoistAir.dynamicViscosity\">
 Modelica.Media.Air.MoistAir.dynamicViscosity</a>.
 However, for the typical range of temperatures encountered
 in building applications, a linear function sufficies.
 This implementation is therefore the above 5th order polynomial,
 linearized around <i>20</i>&deg;C.
 The relative error of this linearization is
 <i>0.4</i>% at <i>-20</i>&deg;C,
 and less then
 <i>0.2</i>% between  <i>-5</i>&deg;C and  <i>+50</i>&deg;C.
 </p>
 
 <ul>
 <li>
 December 19, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 The ideal gas constant for moist air is computed from <a href=\"modelica://Modelica.Media.Air.MoistAir.ThermodynamicState\">thermodynamic state</a> assuming that all water is in the gas phase.
 
 Pressure is returned from the thermodynamic state record input as a simple assignment.
 
 <p>
 This function returns the isobaric expansion coefficient at constant pressure,
 which is zero for this medium.
 The isobaric expansion coefficient at constant pressure is
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 &beta;<sub>p</sub> = - 1 &frasl; v &nbsp; (&part; v &frasl; &part; T)<sub>p</sub> = 0,
 </p>
 <p>
 where
 <i>v</i> is the specific volume,
 <i>T</i> is the temperature and
 <i>p</i> is the pressure.
 </p>
 
 <ul>
 <li>
 December 18, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This function returns the isothermal compressibility coefficient.
 The isothermal compressibility is
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 &kappa;<sub>T</sub> = -1 &frasl; v &nbsp; (&part; v &frasl; &part; p)<sub>T</sub>
   = -1 &frasl; p,
 </p>
 <p>
 where
 <i>v</i> is the specific volume,
 <i>T</i> is the temperature and
 <i>p</i> is the pressure.
 </p>
 
 <ul>
 <li>
 December 18, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This function computes the specific entropy.
 </p>
 <p>
 The specific entropy of the mixture is obtained from
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 s = s<sub>s</sub> + s<sub>m</sub>,
 </p>
 <p>
 where
 <i>s<sub>s</sub></i> is the entropy change due to the state change
 (relative to the reference temperature) and
 <i>s<sub>m</sub></i> is the entropy change due to mixing
 of the dry air and water vapor.
 </p>
 <p>
 The entropy change due to change in state is obtained from
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 s<sub>s</sub> = c<sub>v</sub> ln(T/T<sub>0</sub>) + R ln(v/v<sub>0</sub>) <br/>
 = c<sub>v</sub> ln(T/T<sub>0</sub>) + R ln(&rho;<sub>0</sub>/&rho;)
 </p>
 <p>If we assume <i>&rho; = p<sub>0</sub>/(R T)</i>,
 and because <i>c<sub>p</sub> = c<sub>v</sub> + R</i>,
 we can write
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 s<sub>s</sub> = c<sub>v</sub> ln(T/T<sub>0</sub>) + R ln(T/T<sub>0</sub>) <br/>
 =c<sub>p</sub> ln(T/T<sub>0</sub>).
 </p>
 <p>
 Next, the entropy of mixing is obtained from a reversible isothermal
 expansion process. Hence,
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   s<sub>m</sub> = -R &sum;<sub>i</sub>( X<sub>i</sub> &frasl; M<sub>i</sub>
   ln(Y<sub>i</sub> p/p<sub>0</sub>)),
 </p>
 <p>
 where <i>R</i> is the gas constant,
 <i>X</i> is the mass fraction,
 <i>M</i> is the molar mass, and
 <i>Y</i> is the mole fraction.
 </p>
 <p>
 To obtain the state for a given pressure, entropy and mass fraction, use
 <a href=\"modelica://AixLib.Media.Air.setState_psX\">
 AixLib.Media.Air.setState_psX</a>.
 </p>
 <h4>Limitations</h4>
 <p>
 This function is only valid for a relative humidity below 100%.
 </p>
 
 <ul>
 <li>
 November 27, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This function returns the partial derivative of density
 with respect to pressure at constant temperature.
 </p>
 
 <ul>
 <li>
 December 18, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This function computes the derivative of density with respect to temperature
 at constant pressure.
 </p>
 
 <ul>
 <li>
 December 18, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This function returns the partial derivative of density
 with respect to mass fraction.
 This value is zero because in this medium, density is proportional
 to pressure, but independent of the species concentration.
 </p>
 
 <ul>
 <li>
 December 18, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 The <a href=\"modelica://Modelica.Media.Interfaces.PartialMixtureMedium.ThermodynamicState\">thermodynamic state record</a>
     is computed from density <code>d</code>, temperature <code>T</code> and composition <code>X</code>.
 </p>
 
 The <a href=\"modelica://Modelica.Media.Interfaces.PartialMixtureMedium.ThermodynamicState\">
 thermodynamic state record</a> is computed from pressure p, specific enthalpy h and composition X.
 
 The <a href=\"modelica://Modelica.Media.Interfaces.PartialMixtureMedium.ThermodynamicState\">
 thermodynamic state record</a> is computed from pressure p, temperature T and composition X.
 
 <p>
 This function returns the thermodynamic state based on pressure,
 specific entropy and mass fraction.
 </p>
 <p>
 The state is computed by symbolically solving
 <a href=\"modelica://AixLib.Media.Air.specificEntropy\">
 AixLib.Media.Air.specificEntropy</a>
 for temperature.
 </p>
 
 <ul>
 <li>
 November 27, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 Specific enthalpy as a function of temperature and species concentration.
 The pressure is input for compatibility with the medium models, but the specific enthalpy
 is independent of the pressure.
 
 <ul>
 <li>
 April 30, 2015, by Filip Jorissen and Michael Wetter:<br/>
 Added <code>Inline=true</code> for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/227\">
 issue 227</a>.
 </li>
 </ul>
 
 <p>
 This function computes the specific enthalpy for
 an isentropic state change from the temperature
 that corresponds to the state <code>refState</code>
 to <code>reference_T</code>.
 </p>
 
 <ul>
 <li>
 December 18, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 Temperature is returned from the thermodynamic state record input as a simple assignment.
 
 <p>
 This function returns the molar mass.
 </p>
 
 <ul>
 <li>
 December 18, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 Temperature as a function of specific enthalpy and species concentration.
 The pressure is input for compatibility with the medium models, but the temperature
 is independent of the pressure.
 
 <ul>
 <li>
 April 30, 2015, by Filip Jorissen and Michael Wetter:<br/>
 Added <code>Inline=true</code> for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/227\">
 issue 227</a>.
 </li>
 </ul>
 
 <p>
 This data record contains the coefficients for perfect gases.
 </p>
 
 <ul>
 <li>
 September 12, 2014, by Michael Wetter:<br/>
 Corrected the wrong location of the <code>preferredView</code>
 and the <code>revisions</code> annotation.
 </li>
 <li>
 November 21, 2013, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This medium package models moist air using a gas law in which pressure and temperature
 are independent, which often leads to significantly faster and more robust computations.
 The specific heat capacities at constant pressure and at constant volume are constant.
 The air is assumed to be not saturated.
 </p>
 <p>
 This medium uses the gas law
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 &rho;/&rho;<sub>stp</sub> = p/p<sub>stp</sub>,
 </p>
 <p>
 where
 <i>p<sub>std</sub></i> and <i>&rho;<sub>stp</sub></i> are constant reference
 temperature and density, rathern than the ideal gas law
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 &rho; = p &frasl;(R T),
 </p>
 <p>
 where <i>R</i> is the gas constant and <i>T</i> is the temperature.
 </p>
 <p>
 This formulation often leads to smaller systems of nonlinear equations
 because equations for pressure and temperature are decoupled.
 Therefore, if air inside a control volume such as room air is heated, it
 does not increase its specific volume. Consequently, merely heating or cooling
 a control volume does not affect the air flow calculations in a duct network
 that may be connected to that volume.
 Note that multizone air exchange simulation in which buoyancy drives the
 air flow is still possible as the models in
 <a href=\"modelica://AixLib.Airflow.Multizone\">
 AixLib.Airflow.Multizone</a> compute the mass density using the function
 <a href=\"modelica://AixLib.Utilities.Psychrometrics.Functions.density_pTX\">
 AixLib.Utilities.Psychrometrics.Functions.density_pTX</a> in which density
 is a function of temperature.
 </p>
 <p>
 Note that models in this package implement the equation for the internal energy as
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   u = h - p<sub>stp</sub> &frasl; &rho;<sub>stp</sub>,
 </p>
 <p>
 where
 <i>u</i> is the internal energy per unit mass,
 <i>h</i> is the enthalpy per unit mass,
 <i>p<sub>stp</sub></i> is the static pressure and
 <i>&rho;<sub>stp</sub></i> is the mass density at standard pressure and temperature.
 The reason for this implementation is that in general,
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   h = u + p v,
 </p>
 <p>
 from which follows that
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   u = h - p v = h - p &frasl; &rho; = h - p<sub>stp</sub> &frasl; &rho;<sub>std</sub>,
 </p>
 <p>
 because <i>p &frasl; &rho; = p<sub>stp</sub> &frasl; &rho;<sub>stp</sub></i> in this medium model.
 </p>
 <p>
 The enthalpy is computed using the convention that <i>h=0</i>
 if <i>T=0</i> &deg;C and no water vapor is present.
 </p>
 
 <ul>
 <li>
 September 28, 2020, by Michael Wetter:<br/>
 Reformulated <code>BaseProperties</code> to avoid event-triggering assertions.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1401\">#1401</a>.
 </li>
 <li>
 January 11, 2019 by Michael Wetter:<br/>
 Reforulated assignment of <code>X_int</code> in <code>setState_psX</code>.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1079\">#1079</a>.
 </li>
 <li>
 October 26, 2018, by Filip Jorissen and Michael Wetter:<br/>
 Now printing different messages if temperature is above or below its limit,
 and adding instance name as JModelica does not print the full instance name in the assertion.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1045\">#1045</a>.
 </li>
 <li>
 November 4, 2016, by Michael Wetter:<br/>
 Set default value for <code>dT.start</code> in base properties.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/575\">#575</a>.
 </li>
 <li>
 June 6, 2015, by Michael Wetter:<br/>
 Set <code>AbsolutePressure(start=p_default)</code> to avoid
 a translation error if
 <a href=\"modelica://AixLib.Fluid.Sources.Examples.TraceSubstancesFlowSource\">
 AixLib.Fluid.Sources.Examples.TraceSubstancesFlowSource</a>
 is translated in pedantic mode in Dymola 2016.
 The reason is that pressures use <code>Medium.p_default</code> as start values,
 but
 <a href=\"modelica://Modelica.Media.Interfaces.Types\">
 Modelica.Media.Interfaces.Types</a>
 sets a default value of <i>1E-5</i>.
 A similar change has been done for pressure.
 This fixes
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/266\">#266</a>.
 </li>
 <li>
 June 5, 2015, by Michael Wetter:<br/>
 Added <code>stateSelect</code> attribute in <code>BaseProperties.T</code>
 to allow correct use of <code>preferredMediumState</code> as
 described in
 <a href=\"modelica://Modelica.Media.Interfaces.PartialMedium\">
 Modelica.Media.Interfaces.PartialMedium</a>.
 Note that the default is <code>preferredMediumState=false</code>
 and hence the same states are used as were used before.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/260\">#260</a>.
 </li>
 <li>
 May 11, 2015, by Michael Wetter:<br/>
 Removed
 <code>p(stateSelect=if preferredMediumStates then StateSelect.prefer else StateSelect.default)</code>
 in declaration of <code>BaseProperties</code>.
 Otherwise, when models that contain a fluid volume
 are exported as an FMU, their pressure would be
 differentiated with respect to time. This would require
 the time derivative of the inlet pressure, which is not available,
 causing the translation to stop with an error.
 </li>
 <li>
 May 1, 2015, by Michael Wetter:<br/>
 Added <code>Inline=true</code> for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/227\">
 issue 227</a>.
 </li>
 <li>
 March 20, 2015, by Michael Wetter:<br/>
 Added missing term <code>state.p/reference_p</code> in function
 <code>specificEntropy</code>.
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/193\">#193</a>.
 </li>
 <li>
 February 3, 2015, by Michael Wetter:<br/>
 Removed <code>stateSelect.prefer</code> for temperature.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/160\">#160</a>.
 </li>
 <li>
 July 24, 2014, by Michael Wetter:<br/>
 Changed implementation to use
 <a href=\"modelica://AixLib.Utilities.Psychrometrics.Constants\">
 AixLib.Utilities.Psychrometrics.Constants</a>.
 This was done to use consistent values throughout the library.
 </li>
 <li>
 November 16, 2013, by Michael Wetter:<br/>
 Revised and simplified the implementation.
 </li>
 <li>
 November 14, 2013, by Michael Wetter:<br/>
 Removed function
 <code>HeatCapacityOfWater</code>
 which is neither needed nor implemented in the
 Modelica Standard Library.
 </li>
 <li>
 November 13, 2013, by Michael Wetter:<br/>
 Removed non-used computations in <code>specificEnthalpy_pTX</code> and
 in <code>temperature_phX</code>.
 </li>
 <li>
 March 29, 2013, by Michael Wetter:<br/>
 Added <code>final standardOrderComponents=true</code> in the
 <code>BaseProperties</code> declaration. This avoids an error
 when models are checked in Dymola 2014 in the pedenatic mode.
 </li>
 <li>
 April 12, 2012, by Michael Wetter:<br/>
 Added keyword <code>each</code> to <code>Xi(stateSelect=...)</code>.
 </li>
 <li>
 April 4, 2012, by Michael Wetter:<br/>
 Added redeclaration of <code>ThermodynamicState</code> to avoid a warning
 during model check and translation.
 </li>
 <li>
 August 3, 2011, by Michael Wetter:<br/>
 Fixed bug in <code>u=h-R*T</code>, which is only valid for ideal gases.
 For this medium, the function is <code>u=h-pStd/dStp</code>.
 </li>
 <li>
 January 27, 2010, by Michael Wetter:<br/>
 Fixed bug in <code>else</code> branch of function <code>setState_phX</code>
 that lead to a run-time error when the constructor of this function was called.
 </li>
 <li>
 January 22, 2010, by Michael Wetter:<br/>
 Added implementation of function
 <a href=\"modelica://AixLib.Media.GasesPTDecoupled.MoistAirUnsaturated.enthalpyOfNonCondensingGas\">
 enthalpyOfNonCondensingGas</a> and its derivative.
 </li>
 <li>
 January 13, 2010, by Michael Wetter:<br/>
 Fixed implementation of derivative functions.
 </li>
 <li>
 August 28, 2008, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Model with basic thermodynamic properties.
</p>
<p>
  This model provides equation for the following thermodynamic
  properties:
</p>
<table border=\"1\" cellspacing=\"0\" cellpadding=\"2\" summary=
\"Thermodynamic properties\">
  <tr>
    <td>
      <strong>Variable</strong>
    </td>
    <td>
      <strong>Unit</strong>
    </td>
    <td>
      <strong>Description</strong>
    </td>
  </tr>
  <tr>
    <td>
      T
    </td>
    <td>
      K
    </td>
    <td>
      temperature
    </td>
  </tr>
  <tr>
    <td>
      p
    </td>
    <td>
      Pa
    </td>
    <td>
      absolute pressure
    </td>
  </tr>
  <tr>
    <td>
      d
    </td>
    <td>
      kg/m3
    </td>
    <td>
      density
    </td>
  </tr>
  <tr>
    <td>
      h
    </td>
    <td>
      J/kg
    </td>
    <td>
      specific enthalpy
    </td>
  </tr>
  <tr>
    <td>
      u
    </td>
    <td>
      J/kg
    </td>
    <td>
      specific internal energy
    </td>
  </tr>
  <tr>
    <td>
      Xi[nXi]
    </td>
    <td>
      kg/kg
    </td>
    <td>
      independent mass fractions m_i/m
    </td>
  </tr>
  <tr>
    <td>
      R
    </td>
    <td>
      J/kg.K
    </td>
    <td>
      gas constant
    </td>
  </tr>
  <tr>
    <td>
      M
    </td>
    <td>
      kg/mol
    </td>
    <td>
      molar mass
    </td>
  </tr>
</table>
<ul>
  <li>September 22, 2020, by Michael Wetter:<br/>
    First implementation based on Modelica Standard Library, but with
    <code>noEvent</code> added to check of bounds.
  </li>
</ul>
Density is computed from pressure, temperature and composition in the
thermodynamic state record applying the ideal gas law.
<p>
  This function returns the dynamic viscosity.
</p>
<h4>
  Implementation
</h4>
<p>
  The function is based on the 5th order polynomial of <a href=
  \"modelica://Modelica.Media.Air.MoistAir.dynamicViscosity\">Modelica.Media.Air.MoistAir.dynamicViscosity</a>.
  However, for the typical range of temperatures encountered in
  building applications, a linear function sufficies. This
  implementation is therefore the above 5th order polynomial,
  linearized around <i>20</i>°C. The relative error of this
  linearization is <i>0.4</i>% at <i>-20</i>°C, and less then
  <i>0.2</i>% between <i>-5</i>°C and <i>+50</i>°C.
</p>
<ul>
  <li>December 19, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
The ideal gas constant for moist air is computed from <a href=
\"modelica://Modelica.Media.Air.MoistAir.ThermodynamicState\">thermodynamic
state</a> assuming that all water is in the gas phase.
Pressure is returned from the thermodynamic state record input as a
simple assignment.
<p>
  This function returns the isobaric expansion coefficient at constant
  pressure, which is zero for this medium. The isobaric expansion
  coefficient at constant pressure is
</p>
<p align=\"center\" style=\"font-style:italic;\">
  β<sub>p</sub> = - 1 ⁄ v &#160; (∂ v ⁄ ∂ T)<sub>p</sub> = 0,
</p>
<p>
  where <i>v</i> is the specific volume, <i>T</i> is the temperature
  and <i>p</i> is the pressure.
</p>
<ul>
  <li>December 18, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This function returns the isothermal compressibility coefficient. The
  isothermal compressibility is
</p>
<p align=\"center\" style=\"font-style:italic;\">
  κ<sub>T</sub> = -1 ⁄ v &#160; (∂ v ⁄ ∂ p)<sub>T</sub> = -1 ⁄ p,
</p>
<p>
  where <i>v</i> is the specific volume, <i>T</i> is the temperature
  and <i>p</i> is the pressure.
</p>
<ul>
  <li>December 18, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This function computes the specific entropy.
</p>
<p>
  The specific entropy of the mixture is obtained from
</p>
<p align=\"center\" style=\"font-style:italic;\">
  s = s<sub>s</sub> + s<sub>m</sub>,
</p>
<p>
  where <i>s<sub>s</sub></i> is the entropy change due to the state
  change (relative to the reference temperature) and
  <i>s<sub>m</sub></i> is the entropy change due to mixing of the dry
  air and water vapor.
</p>
<p>
  The entropy change due to change in state is obtained from
</p>
<p align=\"center\" style=\"font-style:italic;\">
  s<sub>s</sub> = c<sub>v</sub> ln(T/T<sub>0</sub>) + R
  ln(v/v<sub>0</sub>)<br/>
  = c<sub>v</sub> ln(T/T<sub>0</sub>) + R ln(ρ<sub>0</sub>/ρ)
</p>
<p>
  If we assume <i>ρ = p<sub>0</sub>/(R T)</i>, and because
  <i>c<sub>p</sub> = c<sub>v</sub> + R</i>, we can write
</p>
<p align=\"center\" style=\"font-style:italic;\">
  s<sub>s</sub> = c<sub>v</sub> ln(T/T<sub>0</sub>) + R
  ln(T/T<sub>0</sub>)<br/>
  =c<sub>p</sub> ln(T/T<sub>0</sub>).
</p>
<p>
  Next, the entropy of mixing is obtained from a reversible isothermal
  expansion process. Hence,
</p>
<p align=\"center\" style=\"font-style:italic;\">
  s<sub>m</sub> = -R ∑<sub>i</sub>( X<sub>i</sub> ⁄ M<sub>i</sub>
  ln(Y<sub>i</sub> p/p<sub>0</sub>)),
</p>
<p>
  where <i>R</i> is the gas constant, <i>X</i> is the mass fraction,
  <i>M</i> is the molar mass, and <i>Y</i> is the mole fraction.
</p>
<p>
  To obtain the state for a given pressure, entropy and mass fraction,
  use <a href=
  \"modelica://AixLib.Media.Air.setState_psX\">AixLib.Media.Air.setState_psX</a>.
</p>
<h4>
  Limitations
</h4>
<p>
  This function is only valid for a relative humidity below 100%.
</p>
<ul>
  <li>November 27, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This function returns the partial derivative of density with respect
  to pressure at constant temperature.
</p>
<ul>
  <li>December 18, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This function computes the derivative of density with respect to
  temperature at constant pressure.
</p>
<ul>
  <li>December 18, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This function returns the partial derivative of density with respect
  to mass fraction. This value is zero because in this medium, density
  is proportional to pressure, but independent of the species
  concentration.
</p>
<ul>
  <li>December 18, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  The <a href=
  \"modelica://Modelica.Media.Interfaces.PartialMixtureMedium.ThermodynamicState\">
  thermodynamic state record</a> is computed from density
  <code>d</code>, temperature <code>T</code> and composition
  <code>X</code>.
</p>
The <a href=
\"modelica://Modelica.Media.Interfaces.PartialMixtureMedium.ThermodynamicState\">
thermodynamic state record</a> is computed from pressure p, specific
enthalpy h and composition X.
The <a href=
\"modelica://Modelica.Media.Interfaces.PartialMixtureMedium.ThermodynamicState\">
thermodynamic state record</a> is computed from pressure p, temperature
T and composition X.
<p>
  This function returns the thermodynamic state based on pressure,
  specific entropy and mass fraction.
</p>
<p>
  The state is computed by symbolically solving <a href=
  \"modelica://AixLib.Media.Air.specificEntropy\">AixLib.Media.Air.specificEntropy</a>
  for temperature.
</p>
<ul>
  <li>November 27, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
Specific enthalpy as a function of temperature and species
concentration. The pressure is input for compatibility with the medium
models, but the specific enthalpy is independent of the pressure.
<ul>
  <li>April 30, 2015, by Filip Jorissen and Michael Wetter:<br/>
    Added <code>Inline=true</code> for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/227\">issue 227</a>.
  </li>
</ul>
<p>
  This function computes the specific enthalpy for an isentropic state
  change from the temperature that corresponds to the state
  <code>refState</code> to <code>reference_T</code>.
</p>
<ul>
  <li>December 18, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
Temperature is returned from the thermodynamic state record input as a
simple assignment.
<p>
  This function returns the molar mass.
</p>
<ul>
  <li>December 18, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
Temperature as a function of specific enthalpy and species
concentration. The pressure is input for compatibility with the medium
models, but the temperature is independent of the pressure.
<ul>
  <li>April 30, 2015, by Filip Jorissen and Michael Wetter:<br/>
    Added <code>Inline=true</code> for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/227\">issue 227</a>.
  </li>
</ul>
<p>
  This data record contains the coefficients for perfect gases.
</p>
<ul>
  <li>September 12, 2014, by Michael Wetter:<br/>
    Corrected the wrong location of the <code>preferredView</code> and
    the <code>revisions</code> annotation.
  </li>
  <li>November 21, 2013, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  This medium package models moist air using a gas law in which
  pressure and temperature are independent, which often leads to
  significantly faster and more robust computations. The specific heat
  capacities at constant pressure and at constant volume are constant.
  The air is assumed to be not saturated.
</p>
<p>
  This medium uses the gas law
</p>
<p align=\"center\" style=\"font-style:italic;\">
  ρ/ρ<sub>stp</sub> = p/p<sub>stp</sub>,
</p>
<p>
  where <i>p<sub>std</sub></i> and <i>ρ<sub>stp</sub></i> are constant
  reference temperature and density, rathern than the ideal gas law
</p>
<p align=\"center\" style=\"font-style:italic;\">
  ρ = p ⁄(R T),
</p>
<p>
  where <i>R</i> is the gas constant and <i>T</i> is the temperature.
</p>
<p>
  This formulation often leads to smaller systems of nonlinear
  equations because equations for pressure and temperature are
  decoupled. Therefore, if air inside a control volume such as room air
  is heated, it does not increase its specific volume. Consequently,
  merely heating or cooling a control volume does not affect the air
  flow calculations in a duct network that may be connected to that
  volume. Note that multizone air exchange simulation in which buoyancy
  drives the air flow is still possible as the models in <a href=
  \"modelica://AixLib.Airflow.Multizone\">AixLib.Airflow.Multizone</a>
  compute the mass density using the function <a href=
  \"modelica://AixLib.Utilities.Psychrometrics.Functions.density_pTX\">AixLib.Utilities.Psychrometrics.Functions.density_pTX</a>
  in which density is a function of temperature.
</p>
<p>
  Note that models in this package implement the equation for the
  internal energy as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  u = h - p<sub>stp</sub> ⁄ ρ<sub>stp</sub>,
</p>
<p>
  where <i>u</i> is the internal energy per unit mass, <i>h</i> is the
  enthalpy per unit mass, <i>p<sub>stp</sub></i> is the static pressure
  and <i>ρ<sub>stp</sub></i> is the mass density at standard pressure
  and temperature. The reason for this implementation is that in
  general,
</p>
<p align=\"center\" style=\"font-style:italic;\">
  h = u + p v,
</p>
<p>
  from which follows that
</p>
<p align=\"center\" style=\"font-style:italic;\">
  u = h - p v = h - p ⁄ ρ = h - p<sub>stp</sub> ⁄ ρ<sub>std</sub>,
</p>
<p>
  because <i>p ⁄ ρ = p<sub>stp</sub> ⁄ ρ<sub>stp</sub></i> in this
  medium model.
</p>
<p>
  The enthalpy is computed using the convention that <i>h=0</i> if
  <i>T=0</i> °C and no water vapor is present.
</p>
<ul>
  <li>September 28, 2020, by Michael Wetter:<br/>
    Reformulated <code>BaseProperties</code> to avoid event-triggering
    assertions.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1401\">#1401</a>.
  </li>
  <li>January 11, 2019 by Michael Wetter:<br/>
    Reforulated assignment of <code>X_int</code> in
    <code>setState_psX</code>.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1079\">#1079</a>.
  </li>
  <li>October 26, 2018, by Filip Jorissen and Michael Wetter:<br/>
    Now printing different messages if temperature is above or below
    its limit, and adding instance name as JModelica does not print the
    full instance name in the assertion. This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1045\">#1045</a>.
  </li>
  <li>November 4, 2016, by Michael Wetter:<br/>
    Set default value for <code>dT.start</code> in base properties.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/575\">#575</a>.
  </li>
  <li>June 6, 2015, by Michael Wetter:<br/>
    Set <code>AbsolutePressure(start=p_default)</code> to avoid a
    translation error if <a href=
    \"modelica://AixLib.Fluid.Sources.Examples.TraceSubstancesFlowSource\">
    AixLib.Fluid.Sources.Examples.TraceSubstancesFlowSource</a> is
    translated in pedantic mode in Dymola 2016. The reason is that
    pressures use <code>Medium.p_default</code> as start values, but
    <a href=
    \"modelica://Modelica.Media.Interfaces.Types\">Modelica.Media.Interfaces.Types</a>
    sets a default value of <i>1E-5</i>. A similar change has been done
    for pressure. This fixes <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/266\">#266</a>.
  </li>
  <li>June 5, 2015, by Michael Wetter:<br/>
    Added <code>stateSelect</code> attribute in
    <code>BaseProperties.T</code> to allow correct use of
    <code>preferredMediumState</code> as described in <a href=
    \"modelica://Modelica.Media.Interfaces.PartialMedium\">Modelica.Media.Interfaces.PartialMedium</a>.
    Note that the default is <code>preferredMediumState=false</code>
    and hence the same states are used as were used before. This is for
    <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/260\">#260</a>.
  </li>
  <li>May 11, 2015, by Michael Wetter:<br/>
    Removed <code>p(stateSelect=if preferredMediumStates then
    StateSelect.prefer else StateSelect.default)</code> in declaration
    of <code>BaseProperties</code>. Otherwise, when models that contain
    a fluid volume are exported as an FMU, their pressure would be
    differentiated with respect to time. This would require the time
    derivative of the inlet pressure, which is not available, causing
    the translation to stop with an error.
  </li>
  <li>May 1, 2015, by Michael Wetter:<br/>
    Added <code>Inline=true</code> for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/227\">issue 227</a>.
  </li>
  <li>March 20, 2015, by Michael Wetter:<br/>
    Added missing term <code>state.p/reference_p</code> in function
    <code>specificEntropy</code>. <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/193\">#193</a>.
  </li>
  <li>February 3, 2015, by Michael Wetter:<br/>
    Removed <code>stateSelect.prefer</code> for temperature. This is
    for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/160\">#160</a>.
  </li>
  <li>July 24, 2014, by Michael Wetter:<br/>
    Changed implementation to use <a href=
    \"modelica://AixLib.Utilities.Psychrometrics.Constants\">AixLib.Utilities.Psychrometrics.Constants</a>.
    This was done to use consistent values throughout the library.
  </li>
  <li>November 16, 2013, by Michael Wetter:<br/>
    Revised and simplified the implementation.
  </li>
  <li>November 14, 2013, by Michael Wetter:<br/>
    Removed function <code>HeatCapacityOfWater</code> which is neither
    needed nor implemented in the Modelica Standard Library.
  </li>
  <li>November 13, 2013, by Michael Wetter:<br/>
    Removed non-used computations in <code>specificEnthalpy_pTX</code>
    and in <code>temperature_phX</code>.
  </li>
  <li>March 29, 2013, by Michael Wetter:<br/>
    Added <code>final standardOrderComponents=true</code> in the
    <code>BaseProperties</code> declaration. This avoids an error when
    models are checked in Dymola 2014 in the pedenatic mode.
  </li>
  <li>April 12, 2012, by Michael Wetter:<br/>
    Added keyword <code>each</code> to
    <code>Xi(stateSelect=...)</code>.
  </li>
  <li>April 4, 2012, by Michael Wetter:<br/>
    Added redeclaration of <code>ThermodynamicState</code> to avoid a
    warning during model check and translation.
  </li>
  <li>August 3, 2011, by Michael Wetter:<br/>
    Fixed bug in <code>u=h-R*T</code>, which is only valid for ideal
    gases. For this medium, the function is <code>u=h-pStd/dStp</code>.
  </li>
  <li>January 27, 2010, by Michael Wetter:<br/>
    Fixed bug in <code>else</code> branch of function
    <code>setState_phX</code> that lead to a run-time error when the
    constructor of this function was called.
  </li>
  <li>January 22, 2010, by Michael Wetter:<br/>
    Added implementation of function <a href=
    \"modelica://AixLib.Media.GasesPTDecoupled.MoistAirUnsaturated.enthalpyOfNonCondensingGas\">
    enthalpyOfNonCondensingGas</a> and its derivative.
  </li>
  <li>January 13, 2010, by Michael Wetter:<br/>
    Fixed implementation of derivative functions.
  </li>
  <li>August 28, 2008, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 8 column 2 - Warning: The summary attribute on the <table> element is obsolete in HTML5


line 7 column 2 - Warning: <p> attribute "align" not allowed for HTML5


line 6 column 2 - Warning: <p> attribute "align" not allowed for HTML5


line 8 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 21 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 29 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 37 column 2 - Warning: <p> attribute "align" not allowed for HTML5


line 11 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 19 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 43 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 54 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 60 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/BoundaryConditions/Validation/BESTEST/WD400.mo ----
-------- HTML Code --------

 <ul>
 <li>
 September 6, 2021, by Ettore Zanetti:<br/>
 Removed parameter <code>lat</code> as it is now obtained from the weather data bus.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1477\">IBPSA, #1477</a>.
 </li>
 <li>
 March 11, 2020, by Ettore Zanetti:<br/>
 First implementation.
 </li>
 <li>
 April 14, 2020, by Ettore Zanetti:<br/>
 Rework after comments from pull request
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/pull/1339\">#1339</a>.
 </li>
 <li>
 May 2, 2021, by Ettore Zanetti:<br/>
 Updated weather file as explained in <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1478\">#1478</a>.
 </li>
 </ul>
 
 <h4>WD400: High Latitude Case</h4>
 <p>Weather data file : WD400.epw</p>
 <p><i>Table 1: Site Data for Weather file WD400.epw</i></p>
 <table summary=\"Site Data for Weather file WD400.epw\" cellspacing=\"2\" cellpadding=\"0\" border=\"1\"><tr>
 <td><p>Latitude</p></td>
 <td><p>71.286&deg; north</p></td>
 </tr>
 <tr>
 <td><p>Longitude</p></td>
 <td><p>156.767&deg; west</p></td>
 </tr>
 <tr>
 <td><p>Altitude</p></td>
 <td><p>10 m</p></td>
 </tr>
 <tr>
 <td><p>Time Zone</p></td>
 <td><p>-9</p></td>
 </tr>
 </table>
 
-------- Corrected Code --------
<ul>
  <li>September 6, 2021, by Ettore Zanetti:<br/>
    Removed parameter <code>lat</code> as it is now obtained from the
    weather data bus.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1477\">IBPSA,
    #1477</a>.
  </li>
  <li>March 11, 2020, by Ettore Zanetti:<br/>
    First implementation.
  </li>
  <li>April 14, 2020, by Ettore Zanetti:<br/>
    Rework after comments from pull request <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/pull/1339\">#1339</a>.
  </li>
  <li>May 2, 2021, by Ettore Zanetti:<br/>
    Updated weather file as explained in <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1478\">#1478</a>.
  </li>
</ul>
<h4>
  WD400: High Latitude Case
</h4>
<p>
  Weather data file : WD400.epw
</p>
<p>
  <i>Table 1: Site Data for Weather file WD400.epw</i>
</p>
<table summary=\"Site Data for Weather file WD400.epw\" cellspacing=\"2\"
cellpadding=\"0\" border=\"1\">
  <tr>
    <td>
      <p>
        Latitude
      </p>
    </td>
    <td>
      <p>
        71.286° north
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        Longitude
      </p>
    </td>
    <td>
      <p>
        156.767° west
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        Altitude
      </p>
    </td>
    <td>
      <p>
        10 m
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        Time Zone
      </p>
    </td>
    <td>
      <p>
        -9
      </p>
    </td>
  </tr>
</table>

-------- Errors --------
line 5 column 2 - Warning: The summary attribute on the <table> element is obsolete in HTML5


---- AixLib/Fluid/Actuators/Valves/TwoWayTable.mo ----
-------- HTML Code --------

 <p>
 Two way valve with opening characteristic that is configured through
 a table.
 </p>
 <p>
 The mass flow rate for the fully open valve is determined based
 on the value of the parameter <code>CvData</code>.
 For the different valve positions <i>y &isin; [0, 1]</i>, this nominal flow rate is
 scaled by the values of the parameter
 <code>flowCharacteristics</code>.
 The parameter <code>flowCharacteristics</code> declares a table of the form
 </p>
 <table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\" style=\"border-collapse:collapse;\">
 <tr>
 <td><i>y</i></td>  <td>0</td>  <td>...</td>  <td>1</td>
 </tr>
 <tr>
 <td><i>&phi;</i></td>  <td><i>l</i></td>  <td>...</td>  <td>1</td>
 </tr>
 </table>
 <p>
 where <i>l = K<sub>v</sub>(y=0)/K<sub>v</sub>(y=1) &gt; 0</i> is the valve leakage.
 The first row is the valve opening, and the second row is the
 mass flow rate, relative to the mass flow rate of the fully open
 valve, under the assumption of a constant pressure difference across the
 valve.
 A suggested value for the valve leakage is <i>l=0.0001</i>.
 If <i>l = 0</i>, then this model will replace it with
 <i>l = 10<sup>-8</sup></i> for numerical reasons.
 For example, if a valve has <i>K<sub>v</sub>=0.5</i> [m<sup>3</sup>/h/bar<sup>1/2</sup>] and
 a linear opening characteristics and
 a valve leakage of <i>l=0.0001</i>, then one would set
 </p>
 <pre>
  CvData=AixLib.Fluid.Types.CvTypes.Kv
  Kv = 0.5
  flowCharacteristics(y={0,1}, phi={0.0001,1})
  </pre>
 <p>
 Note, however, that
 <a href=\"modelica://AixLib.Fluid.Actuators.Valves.TwoWayLinear\">
 AixLib.Fluid.Actuators.Valves.TwoWayLinear</a> provides a more
 efficient implementation for this simple case.
 </p>
 <p>
 The parameter <code>flowCharacteristics</code> must meet the following
 requirements, otherwise the model stops with an error:
 </p>
 <ul>
 <li>
 Their arrays
 <code>y</code> and <code>phi</code>
 must be strictly monotonic increasing.
 </li>
 <li>
 The first value must satisfy
 <code>y[1]=0</code>, and
 <code>phi[1]</code> must be equal to the
 leakage flow rate, which must be bigger than zero.
 Otherwise, a default value of <code>1E-8</code> is used.
 </li>
 <li>
 The last values must satisfy
 <code>y[end]=1</code> and
 <code>phi[end]=1</code>.
 </li>
 </ul>
 <p>
 This model is based on the partial valve model
 <a href=\"modelica://AixLib.Fluid.Actuators.BaseClasses.PartialTwoWayValve\">
 AixLib.Fluid.Actuators.BaseClasses.PartialTwoWayValve</a>.
 Check this model for more information, such
 as the regularization near the origin.
 </p>
 <p>
 For an example that specifies an opening characteristics, see
 <a href=\"modelica://AixLib.Fluid.Actuators.Valves.Examples.TwoWayValveTable\">
 AixLib.Fluid.Actuators.Valves.Examples.TwoWayValveTable</a>.
 </p>
 
 <ul>
 <li>
 June 10, 2021, by Michael Wetter:<br/>
 Changed implementation of the filter and changed the parameter <code>order</code> to a constant
 as most users need not change this value.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1498\">#1498</a>.
 </li>
 <li>
 August 7, 2020, by Ettore Zanetti:<br/>
 changed the computation of <code>phi</code> using
 <code>max(0.1*l, . )</code> to avoid
 phi=0.
 See <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1376\">
 issue 1376</a>.
 </li>
 <li>
 November 9, 2019, by Filip Jorissen:<br/>
 Guarded the computation of <code>phi</code> using
 <code>max(0, . )</code> to avoid
 negative phi.
 See <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1223\">
 issue 1223</a>.
 </li>
 <li>
 January 26, 2016, by Michael Wetter:<br/>
 Removed equality comparison for <code>Real</code> in the
 <code>assert</code> statements as this is not allowed in Modelica.
 </li>
 <li>
 August 12, 2014, by Michael Wetter:<br/>
 Removed the <code>end</code> keyword when accessing array elements,
 as this language construct caused an error in OpenModelica.
 </li>
 <li>
 April 4, 2014, by Michael Wetter:<br/>
 Moved the assignment of the flow function <code>phi</code>
 to the model instantiation because in its base class,
 the keyword <code>input</code>
 has been added to the variable <code>phi</code>.
 </li>
 <li>
 March 26, 2014 by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Two way valve with opening characteristic that is configured through
  a table.
</p>
<p>
  The mass flow rate for the fully open valve is determined based on
  the value of the parameter <code>CvData</code>. For the different
  valve positions <i>y ∈ [0, 1]</i>, this nominal flow rate is scaled
  by the values of the parameter <code>flowCharacteristics</code>. The
  parameter <code>flowCharacteristics</code> declares a table of the
  form
</p>
<table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\"
style=\"border-collapse:collapse;\">
  <tr>
    <td>
      <i>y</i>
    </td>
    <td>
      0
    </td>
    <td>
      ...
    </td>
    <td>
      1
    </td>
  </tr>
  <tr>
    <td>
      <i>φ</i>
    </td>
    <td>
      <i>l</i>
    </td>
    <td>
      ...
    </td>
    <td>
      1
    </td>
  </tr>
</table>
<p>
  where <i>l = K<sub>v</sub>(y=0)/K<sub>v</sub>(y=1) &gt; 0</i> is the
  valve leakage. The first row is the valve opening, and the second row
  is the mass flow rate, relative to the mass flow rate of the fully
  open valve, under the assumption of a constant pressure difference
  across the valve. A suggested value for the valve leakage is
  <i>l=0.0001</i>. If <i>l = 0</i>, then this model will replace it
  with <i>l = 10<sup>-8</sup></i> for numerical reasons. For example,
  if a valve has <i>K<sub>v</sub>=0.5</i>
  [m<sup>3</sup>/h/bar<sup>1/2</sup>] and a linear opening
  characteristics and a valve leakage of <i>l=0.0001</i>, then one
  would set
</p>
<pre>
  CvData=AixLib.Fluid.Types.CvTypes.Kv
  Kv = 0.5
  flowCharacteristics(y={0,1}, phi={0.0001,1})
  </pre>
<p>
  Note, however, that <a href=
  \"modelica://AixLib.Fluid.Actuators.Valves.TwoWayLinear\">AixLib.Fluid.Actuators.Valves.TwoWayLinear</a>
  provides a more efficient implementation for this simple case.
</p>
<p>
  The parameter <code>flowCharacteristics</code> must meet the
  following requirements, otherwise the model stops with an error:
</p>
<ul>
  <li>Their arrays <code>y</code> and <code>phi</code> must be strictly
  monotonic increasing.
  </li>
  <li>The first value must satisfy <code>y[1]=0</code>, and
  <code>phi[1]</code> must be equal to the leakage flow rate, which
  must be bigger than zero. Otherwise, a default value of
  <code>1E-8</code> is used.
  </li>
  <li>The last values must satisfy <code>y[end]=1</code> and
  <code>phi[end]=1</code>.
  </li>
</ul>
<p>
  This model is based on the partial valve model <a href=
  \"modelica://AixLib.Fluid.Actuators.BaseClasses.PartialTwoWayValve\">AixLib.Fluid.Actuators.BaseClasses.PartialTwoWayValve</a>.
  Check this model for more information, such as the regularization
  near the origin.
</p>
<p>
  For an example that specifies an opening characteristics, see
  <a href=\"modelica://AixLib.Fluid.Actuators.Valves.Examples.TwoWayValveTable\">
  AixLib.Fluid.Actuators.Valves.Examples.TwoWayValveTable</a>.
</p>
<ul>
  <li>June 10, 2021, by Michael Wetter:<br/>
    Changed implementation of the filter and changed the parameter
    <code>order</code> to a constant as most users need not change this
    value.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1498\">#1498</a>.
  </li>
  <li>August 7, 2020, by Ettore Zanetti:<br/>
    changed the computation of <code>phi</code> using <code>max(0.1*l,
    . )</code> to avoid phi=0. See <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1376\">issue
    1376</a>.
  </li>
  <li>November 9, 2019, by Filip Jorissen:<br/>
    Guarded the computation of <code>phi</code> using <code>max(0, .
    )</code> to avoid negative phi. See <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1223\">issue
    1223</a>.
  </li>
  <li>January 26, 2016, by Michael Wetter:<br/>
    Removed equality comparison for <code>Real</code> in the
    <code>assert</code> statements as this is not allowed in Modelica.
  </li>
  <li>August 12, 2014, by Michael Wetter:<br/>
    Removed the <code>end</code> keyword when accessing array elements,
    as this language construct caused an error in OpenModelica.
  </li>
  <li>April 4, 2014, by Michael Wetter:<br/>
    Moved the assignment of the flow function <code>phi</code> to the
    model instantiation because in its base class, the keyword
    <code>input</code> has been added to the variable <code>phi</code>.
  </li>
  <li>March 26, 2014 by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 14 column 2 - Warning: The summary attribute on the <table> element is obsolete in HTML5


---- AixLib/Fluid/HeatExchangers/BaseClasses/HANaturalCylinder.mo ----
-------- HTML Code --------

             <p>
             This model calculates the convection coefficient <i>h</i> for natural convection
             from a cylinder submerged in fluid. <i>h</i> is calcualted using Eq 9.34 from
             Incropera and DeWitt (1996).
             Output of the block is the <i>hA</i> value.
             </p>
             <p>
             The Nusselt number is computed as
             </p>
             <p align=\"center\" style=\"font-style:italic;\">
             Nu<sub>D</sub> = (0.6 + (0.387 Ra<sub>D</sub><sup>(1/6)</sup>)/(1+(0.559 Pr)<sup>
             (9/16)</sup>)<sup>(8/27)</sup>)<sup>2</sup>);
             </p>
             <p>
             where <i>Nu<sub>D</sub></i> is the Nusselt number, <i>Ra<sub>D</sub></i> is the
             Rayleigh number and
             <i>Pr</i> is the Prandtl number.<br/>
             This correclation is accurate for <i>Ra<sub>D</sub></i> less than 10<sup>12</sup>.
             </p>
             <p>
             <i>h</i> is then calculated from the Nusselt number. The equation is
             </p>
             <p align=\"center\" style=\"font-style:italic;\">
             h = Nu<sub>D</sub> k/D
             </p>
             <p>
             where <i>k</i> is the thermal conductivity of the fluid and <i>D</i> is the diameter
             of the submerged cylinder.
             </p>
             <h4>References</h4>
             <p>
             Fundamentals of Heat and Mass Transfer (Fourth Edition), Frank Incropera and David
             DeWitt, John Wiley and Sons, 1996
             </p>
             
             <ul>
 <li>
 August 29, 2014 by Michael Wetter:<br/>
 Refactored function calls for medium properties.
 </li>
 <li>
 May 10, 2013 by Michael Wetter:<br/>
 Revised implementation to use <code>hA_nominal</code> as a parameter, and compute the
 associated surface area <code>A</code>. This revision was required to have a consistent
 computation of the <code>hA</code> values inside and outside of the coil in the
 heat exchanger model of the water tank.
 </li>
 <li>
 February 26, 2013 by Peter Grant:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This model calculates the convection coefficient <i>h</i> for natural
  convection from a cylinder submerged in fluid. <i>h</i> is calcualted
  using Eq 9.34 from Incropera and DeWitt (1996). Output of the block
  is the <i>hA</i> value.
</p>
<p>
  The Nusselt number is computed as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  Nu<sub>D</sub> = (0.6 + (0.387
  Ra<sub>D</sub><sup>(1/6)</sup>)/(1+(0.559 Pr)
  <sup>(9/16)</sup>)<sup>(8/27)</sup>)<sup>2</sup>);
</p>
<p>
  where <i>Nu<sub>D</sub></i> is the Nusselt number,
  <i>Ra<sub>D</sub></i> is the Rayleigh number and <i>Pr</i> is the
  Prandtl number.<br/>
  This correclation is accurate for <i>Ra<sub>D</sub></i> less than
  10<sup>12</sup>.
</p>
<p>
  <i>h</i> is then calculated from the Nusselt number. The equation is
</p>
<p align=\"center\" style=\"font-style:italic;\">
  h = Nu<sub>D</sub> k/D
</p>
<p>
  where <i>k</i> is the thermal conductivity of the fluid and <i>D</i>
  is the diameter of the submerged cylinder.
</p>
<h4>
  References
</h4>
<p>
  Fundamentals of Heat and Mass Transfer (Fourth Edition), Frank
  Incropera and David DeWitt, John Wiley and Sons, 1996
</p>
<ul>
  <li>August 29, 2014 by Michael Wetter:<br/>
    Refactored function calls for medium properties.
  </li>
  <li>May 10, 2013 by Michael Wetter:<br/>
    Revised implementation to use <code>hA_nominal</code> as a
    parameter, and compute the associated surface area <code>A</code>.
    This revision was required to have a consistent computation of the
    <code>hA</code> values inside and outside of the coil in the heat
    exchanger model of the water tank.
  </li>
  <li>February 26, 2013 by Peter Grant:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 11 column 14 - Warning: <p> attribute "align" not allowed for HTML5
line 24 column 14 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Sensors/SensibleEnthalpyFlowRate.mo ----
-------- HTML Code --------

 <p>
 This model outputs the <i>sensible</i> enthalphy flow rate of the medium in the flow
 between its fluid ports. In particular, if the total enthalpy flow rate is
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   H&#775;<sub>tot</sub> = H&#775;<sub>sen</sub> + H&#775;<sub>lat</sub>,
 </p>
 <p>
 where
 <i>H&#775;<sub>sen</sub> = m&#775; (1-X<sub>w</sub>) c<sub>p,air</sub></i>,
 then this sensor outputs <i>H&#775; = H&#775;<sub>sen</sub></i>.
 </p>
 
 <p>
 If the parameter <code>tau</code> is non-zero, then the measured
 specific sensible enthalpy <i>h<sub>out</sub></i> that is used to
 compute the sensible enthalpy flow rate
 <i>H&#775;<sub>sen</sub> = m&#775; h<sub>out</sub></i>
 is computed using a first order differential equation.
 See <a href=\"modelica://AixLib.Fluid.Sensors.UsersGuide\">
 AixLib.Fluid.Sensors.UsersGuide</a> for an explanation.
 </p>
 
 <p>
 For a sensor that measures
 <i>H&#775;<sub>tot</sub></i>, use
 <a href=\"modelica://AixLib.Fluid.Sensors.EnthalpyFlowRate\">
 AixLib.Fluid.Sensors.EnthalpyFlowRate</a>.<br/>
 For a sensor that measures
 <i>H&#775;<sub>lat</sub></i>, use
 <a href=\"modelica://AixLib.Fluid.Sensors.LatentEnthalpyFlowRate\">
 AixLib.Fluid.Sensors.LatentEnthalpyFlowRate</a>.
 </p>
 
 <p>
 The sensor is ideal, i.e., it does not influence the fluid.
 The sensor can only be used with medium models that implement the function
 <code>enthalpyOfNonCondensingGas(T)</code>.</p>
 
 
 <ul>
 <li>
 October 19, 2020, by Antoine Gautier:<br/>
 Changed default value for <code>tau</code> from <code>1</code> to <code>0</code>.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1406\">#1406</a>.
 </li>
 <li>
 February 25, 2020, by Michael Wetter:<br/>
 Changed icon to display its operating state.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1294\">#1294</a>.
 </li>
 <li>
 January 18, 2016 by Filip Jorissen:<br/>
 Using parameter <code>tauInv</code>
 since this now exists in
 <a href=\"modelica://AixLib.Fluid.Sensors.BaseClasses.PartialDynamicFlowSensor\">AixLib.Fluid.Sensors.BaseClasses.PartialDynamicFlowSensor</a>.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/372\">#372</a>.
 </li>
 <li>
 September 10, 2013, by Michael Wetter:<br/>
 Changed medium declaration in the <code>extends</code> statement
 to <code>replaceable</code> to avoid a translation error in
 OpenModelica.
 </li>
 <li>
 August 31, 2013, by Michael Wetter:<br/>
 Removed default value <code>tau=0</code> as the base class
 already sets <code>tau=1</code>.
 This change was made so that all sensors use the same default value.
 </li>
 <li>
 December 18, 2012, by Michael Wetter:<br/>
 Moved computation of <code>i_w</code> to new base class
 <a href=\"modelica://AixLib.Fluid.BaseClasses.IndexWater\">
 AixLib.Fluid.BaseClasses.IndexWater</a>.
 The value of this parameter is now assigned dynamically and does not require to be specified
 by the user.
 </li>
 <li>
 November 3, 2011, by Michael Wetter:<br/>
 Moved <code>der(h_out) := 0;</code> from the initial algorithm section to
 the initial equation section
 as this assignment does not conform to the Modelica specification.
 </li>
 <li>
 August 10, 2011 by Michael Wetter:<br/>
 Added parameter <code>i_w</code> and an assert statement to
 make sure it is set correctly. Without this change, Dymola
 cannot differentiate the model when reducing the index of the DAE.
 </li>
 <li>
 June 3, 2011 by Michael Wetter:<br/>
 Revised implementation to add dynamics in such a way that
 the time constant increases as the mass flow rate tends to zero.
 This can improve the numerics.
 </li>
 <li>
 February 22, by Michael Wetter:<br/>
 Improved code that searches for index of 'water' in the medium model.
 </li>
 <li>
 September 9, 2009 by Michael Wetter:<br/>
 First implementation.
 Implementation is based on enthalpy sensor of <code>Modelica.Fluid</code>.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This model outputs the <i>sensible</i> enthalphy flow rate of the
  medium in the flow between its fluid ports. In particular, if the
  total enthalpy flow rate is
</p>
<p align=\"center\" style=\"font-style:italic;\">
  Ḣ<sub>tot</sub> = Ḣ<sub>sen</sub> + Ḣ<sub>lat</sub>,
</p>
<p>
  where <i>Ḣ<sub>sen</sub> = ṁ (1-X<sub>w</sub>)
  c<sub>p,air</sub></i>, then this sensor outputs <i>Ḣ =
  Ḣ<sub>sen</sub></i>.
</p>
<p>
  If the parameter <code>tau</code> is non-zero, then the measured
  specific sensible enthalpy <i>h<sub>out</sub></i> that is used to
  compute the sensible enthalpy flow rate <i>Ḣ<sub>sen</sub> = ṁ
  h<sub>out</sub></i> is computed using a first order differential
  equation. See <a href=
  \"modelica://AixLib.Fluid.Sensors.UsersGuide\">AixLib.Fluid.Sensors.UsersGuide</a>
  for an explanation.
</p>
<p>
  For a sensor that measures <i>Ḣ<sub>tot</sub></i>, use <a href=
  \"modelica://AixLib.Fluid.Sensors.EnthalpyFlowRate\">AixLib.Fluid.Sensors.EnthalpyFlowRate</a>.<br/>

  For a sensor that measures <i>Ḣ<sub>lat</sub></i>, use <a href=
  \"modelica://AixLib.Fluid.Sensors.LatentEnthalpyFlowRate\">AixLib.Fluid.Sensors.LatentEnthalpyFlowRate</a>.
</p>
<p>
  The sensor is ideal, i.e., it does not influence the fluid. The
  sensor can only be used with medium models that implement the
  function <code>enthalpyOfNonCondensingGas(T)</code>.
</p>
<ul>
  <li>October 19, 2020, by Antoine Gautier:<br/>
    Changed default value for <code>tau</code> from <code>1</code> to
    <code>0</code>.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1406\">#1406</a>.
  </li>
  <li>February 25, 2020, by Michael Wetter:<br/>
    Changed icon to display its operating state.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1294\">#1294</a>.
  </li>
  <li>January 18, 2016 by Filip Jorissen:<br/>
    Using parameter <code>tauInv</code> since this now exists in
    <a href=
    \"modelica://AixLib.Fluid.Sensors.BaseClasses.PartialDynamicFlowSensor\">
    AixLib.Fluid.Sensors.BaseClasses.PartialDynamicFlowSensor</a>. This
    is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/372\">#372</a>.
  </li>
  <li>September 10, 2013, by Michael Wetter:<br/>
    Changed medium declaration in the <code>extends</code> statement to
    <code>replaceable</code> to avoid a translation error in
    OpenModelica.
  </li>
  <li>August 31, 2013, by Michael Wetter:<br/>
    Removed default value <code>tau=0</code> as the base class already
    sets <code>tau=1</code>. This change was made so that all sensors
    use the same default value.
  </li>
  <li>December 18, 2012, by Michael Wetter:<br/>
    Moved computation of <code>i_w</code> to new base class <a href=
    \"modelica://AixLib.Fluid.BaseClasses.IndexWater\">AixLib.Fluid.BaseClasses.IndexWater</a>.
    The value of this parameter is now assigned dynamically and does
    not require to be specified by the user.
  </li>
  <li>November 3, 2011, by Michael Wetter:<br/>
    Moved <code>der(h_out) := 0;</code> from the initial algorithm
    section to the initial equation section as this assignment does not
    conform to the Modelica specification.
  </li>
  <li>August 10, 2011 by Michael Wetter:<br/>
    Added parameter <code>i_w</code> and an assert statement to make
    sure it is set correctly. Without this change, Dymola cannot
    differentiate the model when reducing the index of the DAE.
  </li>
  <li>June 3, 2011 by Michael Wetter:<br/>
    Revised implementation to add dynamics in such a way that the time
    constant increases as the mass flow rate tends to zero. This can
    improve the numerics.
  </li>
  <li>February 22, by Michael Wetter:<br/>
    Improved code that searches for index of 'water' in the medium
    model.
  </li>
  <li>September 9, 2009 by Michael Wetter:<br/>
    First implementation. Implementation is based on enthalpy sensor of
    <code>Modelica.Fluid</code>.
  </li>
</ul>

-------- Errors --------
line 6 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Geothermal/Borefields/UsersGuide.mo ----
-------- HTML Code --------

<p>
This package contains borefield models. These models can simulate any arbitrary
configuration of vertical boreholes with equal lengths with both short and
long-term accuracy with an aggregation method to speed up the calculations of the ground heat transfer. Examples
of how to use the borefield models and validation cases can be found in
<a href=\"modelica://AixLib.Fluid.Geothermal.Borefields.Examples\">
AixLib.Fluid.Geothermal.Borefields.Examples</a>
and
<a href=\"modelica://AixLib.Fluid.Geothermal.Borefields.Validation\">
AixLib.Fluid.Geothermal.Borefields.Validation</a>,
respectively.
</p>
<p>
The major features and configurations currently supported are:
<ul>
<li> User-defined borefield characteristics and geometry (borehole radius, pipe radius, shank spacing, etc.),
including single U-tube, double U-tube in parallel and double U-tube in series configurations.
</li>
<li> The resistances <i>R<sub>b</sub></i> and <i>R<sub>a</sub></i> are
either automatically calculated using the multipole method,
or the resistance <i>R<sub>b</sub></i> can be directly provided by the user.
In this case, the resistances <i>R<sub>b</sub></i> and <i>R<sub>a</sub></i> are
still evaluated internally, but their values are weighted so that the borehole
resistance matches the specified value.
</li>
<li>
User-defined vertical discretization of boreholes are supported.
However, the borehole wall temperature
is identical for each borehole, as the ground temperature response model only computes the average borehole wall temperature
for all boreholes combined.
</li>
<li>
Borefields can consist of one or many boreholes. Each borehole can be positioned
at an arbitrary position in the field using cartesian coordinates.
</li>
<li>
The resolution and precision of the load aggregation method for the ground heat transfer can be adapted.
</li>
<li>
The thermal response of the ground heat transfer is stored locally to avoid
having to recalculate it for future simulations with the same borefield configuration.
</li>
<li>
Pressure losses are calculated if the <code>dp_nominal</code> parameter is set to a non-zero value.
</li>
</ul>

<p>
The model is limited to the simulation of borefields with boreholes connected in
parallel, as shown on the figure below for a single U-tube configuration. All
boreholes have the same length <code>hBor</code>, the same radius
<code>rBor</code>, and are buried at the same depth <code>dBor</code> below the
ground surface (also known as the inactive borehole length).
</p>
<p align=\"center\">
<img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/BorefieldGeometry_01.png\" width=\"610\"/>
</p>

<h4>How to use the borefield models</h4>
<h5>Borefield data record</h5>
<p>
Most of the parameter values of the model are contained in the record called <code>borFieDat</code>.
This record is composed of three subrecords:
<code>filDat</code> (containing the thermal characteristics of the borehole filling material),
<code>soiDat</code> (containing the thermal characteristics of the surrounding soil),
and <code>conDat</code> (containing all others parameters, namely parameters
defining the configuration of the borefield).
The structure and default values of the record are in the package:
<a href=\"modelica://AixLib.Fluid.Geothermal.Borefields.Data\">AixLib.Fluid.Geothermal.Borefields.Data</a>.
The <code>borFieDat</code> record
can be found in the <a href=\"modelica://AixLib.Fluid.Geothermal.Borefields.Data.Borefield\">
AixLib.Fluid.Geothermal.Borefields.Data.Borefield</a> subpackage therein.
Examples of the subrecords <code>conDat</code>, <code>filDat</code> and <code>soiDat</code>
can be found in
<a href=\"modelica://AixLib.Fluid.Geothermal.Borefields.Data.Configuration\">
AixLib.Fluid.Geothermal.Borefields.Data.Configuration</a>,
<a href=\"modelica://AixLib.Fluid.Geothermal.Borefields.Data.Filling\">
AixLib.Fluid.Geothermal.Borefields.Data.Filling</a> and
<a href=\"modelica://AixLib.Fluid.Geothermal.Borefields.Data.Soil\">
AixLib.Fluid.Geothermal.Borefields.Data.Soil</a>, respectively.
</p>
<p>
It is important to make sure that the <code>borCon</code> parameter within
the <code>conDat</code> subrecord is compatible with the chosen borefield model.
For example, if a double U-tube
borefield model is chosen, the <code>borCon</code> parameter could be set
to both a parallel double U-tube configuration and a double U-tube configuration in series,
but could not be set to a single U-tube configuration. An incompatible borehole
configuration will stop the simulation.
</p>
<h5>Ground heat transfer parameters</h5>
<p>
Other than the parameters contained in the <code>borFieDat</code> record,
the borefield models have other parameters which can be modified by the user.
The <code>tLoaAgg</code> parameter is the time resolution of the load aggregation
for the calculation of the ground heat transfer. It represents the
frequency at which the load aggregation procedure is performed in the simulation.
Therefore, smaller values of <code>tLoaAgg</code>  will improve
the accuracy of the model, at the cost of increased simulation times
due to a higher number of events occuring in the simulation. While a default value
is provided for this parameter, it is advisable to ensure that it is lower
than a fraction (e.g. half) of the time required for the fluid to completely circulate
through the borefield,
as increasing the value of <code>tLoaAgg</code> beyond this
will result in non-physical borehole wall temperatures.
</p>
<p>
The <code>nCel</code> parameter also affects the accuracy and simulation time
of the ground heat transfer calculations. As this parameter sets the number
of consecutive equal-size aggregation cells before increasing the size of cells,
increasing its value will result in less load aggregation, which will increase
accuracy at the cost of computation time. On the other hand,
decreasing the value of <code>nCel</code> (down to a minimum of 1)
will decrease accuracy but improve
computation time. The default value is chosen as a compromise between the two.
</p>
<p>
Further information on the <code>tLoaAgg</code> and <code>nCel</code> parameters can
be found in the documentation of
<a href=\"modelica://AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.GroundTemperatureResponse\">
AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.GroundTemperatureResponse</a>.
</p>
<h5>Other parameters</h5>
<p>
Other parameters which can be modified include the dynamics, initial conditions,
and further information regarding the fluid flow, for example whether the flow is reversible.
It is worth noting that regardless of the <code>energyDynamics</code> chosen,
the <code>dynFil</code> parameter can be set to <code>false</code>
to remove the effect of the thermal capacitance
of the filling material in the borehole(s).
The <code>nSeg</code> parameter specifies the number of segments for the vertical discretization of the borehole(s).
Further information on this discretization can be found in the &#34;Model description&#34; section below.
</p>
<h5>Running simulations</h5>
<p>
When running simulations using the borefield models,
the <code>tmp/temperatureResponseMatrix</code> directory within the current directory
will be checked to see if any of the
borefield configurations used in the simulation have already
had their ground temperature response calculated previously
If the data doesn't exist in the <code>tmp/temperatureResponseMatrix</code> folder,
it will be calculated during the initialization of the model
and will be saved there for future use.
</p>
<h4>Model description</h4>
<p>
The borefield models rely on the following key assumptions:
<ul>
<li>The thermal properties of the soil (conductivity and diffusivity) are constant,
homogenous and isotropic.
</li>
<li>
The conductivity, capacitance and density of the grout and pipe material are constant, homogenous and isotropic.
</li>
<li>
There is no heat extraction or injection prior to the simulation start.
</li>
<li>
All of the boreholes in the borefield have uniform dimensions (including the pipe dimensions).
</li>
<li>
Inside the boreholes, the non-advective heat transfer is only in the radial direction.
</li>
</ul>
<p>
The borefield models are constructed in two main parts: the borehole(s) and the ground heat transfer.
The former is modeled as a vertical discretization of borehole segments, where a uniform temperature increase or decrease
(due to heat injection or extraction) is superimposed to the far-field ground temperature to obtain the borehole wall
temperature. The thermal effects of the circulating fluid (including the convection resistance),
of the pipes and of the filling material are all taken into consideration, which allows modeling
short-term thermal effects in the borehole. The borehole segments do not take into account axial effects,
thus only radial (horizontal) effects are considered within the borehole(s). The thermal
behavior between the pipes and borehole wall are modeled as a resistance-capacitance network, with
the grout capacitance being split in the number of pipes present in a borehole section.
The capacitance is only present if the <code>dynFil</code> parameter is set to <code>true</code>.
The figure below shows an example for a borehole section within a single U-tube configuration.
</p>
<p align=\"center\">
<img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/BoreholeResistances_01.png\" />
</p>
<p>
The second main part of the borefield models is the ground heat transfer, which shares a thermal boundary
condition at the uniform borehole wall with all of the borehole segments. The heat transfer in the ground
is modeled analytically as a convolution integral between the heat flux at the borehole wall
and the borefield's thermal response factor.
</p>
<p align=\"center\">
<img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/LoadAggregation_12.png\" />
</p>
<p>
The model uses a load aggregation technique to reduce the time required to calculate
the borehole wall temperature changes resulting from heat injection or extraction.
</p>
<p>
The ground heat transfer takes into account both the borehole axial effects and
the borehole radial effects which are a result of its cylindrical geometry. The borefield's
thermal response to a constant load, also known as its <em>g-function</em>, is used
to calculate the thermal response in the simulation. This g-function
is stored in the <code>tmp/temperatureResponseMatrix</code> subdirectory,
as discussed previously in the
&#34;How to use the borefield models&#34; section. Further information on the
ground heat transfer model and the thermal temperature response calculations can
be found in
<a href=\"modelica://AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.GroundTemperatureResponse\">
AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.GroundTemperatureResponse</a>
and
<a href=\"modelica://AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.ThermalResponseFactors.gFunction\">
AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.ThermalResponseFactors.gFunction</a>.
</p>
<h4>References</h4>
<p>
D. Picard, L. Helsen.
<i>Advanced Hybrid Model for Borefield Heat
Exchanger Performance Evaluation; an Implementation in Modelica</i>
Proc. of the 10th Intertional ModelicaConference, p. 857-866. Lund, Sweden. March 2014.
<a href=\"https://lirias.kuleuven.be/retrieve/270880\">https://lirias.kuleuven.be/retrieve/270880</a>.
</p>

-------- Corrected Code --------
<p>
  This package contains borefield models. These models can simulate any
  arbitrary configuration of vertical boreholes with equal lengths with
  both short and long-term accuracy with an aggregation method to speed
  up the calculations of the ground heat transfer. Examples of how to
  use the borefield models and validation cases can be found in
  <a href=\"modelica://AixLib.Fluid.Geothermal.Borefields.Examples\">AixLib.Fluid.Geothermal.Borefields.Examples</a>
  and <a href=
  \"modelica://AixLib.Fluid.Geothermal.Borefields.Validation\">AixLib.Fluid.Geothermal.Borefields.Validation</a>,
  respectively.
</p>
<p>
  The major features and configurations currently supported are:
</p>
<ul>
  <li>User-defined borefield characteristics and geometry (borehole
  radius, pipe radius, shank spacing, etc.), including single U-tube,
  double U-tube in parallel and double U-tube in series configurations.
  </li>
  <li>The resistances <i>R<sub>b</sub></i> and <i>R<sub>a</sub></i> are
  either automatically calculated using the multipole method, or the
  resistance <i>R<sub>b</sub></i> can be directly provided by the user.
  In this case, the resistances <i>R<sub>b</sub></i> and
  <i>R<sub>a</sub></i> are still evaluated internally, but their values
  are weighted so that the borehole resistance matches the specified
  value.
  </li>
  <li>User-defined vertical discretization of boreholes are supported.
  However, the borehole wall temperature is identical for each
  borehole, as the ground temperature response model only computes the
  average borehole wall temperature for all boreholes combined.
  </li>
  <li>Borefields can consist of one or many boreholes. Each borehole
  can be positioned at an arbitrary position in the field using
  cartesian coordinates.
  </li>
  <li>The resolution and precision of the load aggregation method for
  the ground heat transfer can be adapted.
  </li>
  <li>The thermal response of the ground heat transfer is stored
  locally to avoid having to recalculate it for future simulations with
  the same borefield configuration.
  </li>
  <li>Pressure losses are calculated if the <code>dp_nominal</code>
  parameter is set to a non-zero value.
  </li>
</ul>
<p>
  The model is limited to the simulation of borefields with boreholes
  connected in parallel, as shown on the figure below for a single
  U-tube configuration. All boreholes have the same length
  <code>hBor</code>, the same radius <code>rBor</code>, and are buried
  at the same depth <code>dBor</code> below the ground surface (also
  known as the inactive borehole length).
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/BorefieldGeometry_01.png\"
  width=\"610\">
</p>
<h4>
  How to use the borefield models
</h4>
<h5>
  Borefield data record
</h5>
<p>
  Most of the parameter values of the model are contained in the record
  called <code>borFieDat</code>. This record is composed of three
  subrecords: <code>filDat</code> (containing the thermal
  characteristics of the borehole filling material),
  <code>soiDat</code> (containing the thermal characteristics of the
  surrounding soil), and <code>conDat</code> (containing all others
  parameters, namely parameters defining the configuration of the
  borefield). The structure and default values of the record are in the
  package: <a href=
  \"modelica://AixLib.Fluid.Geothermal.Borefields.Data\">AixLib.Fluid.Geothermal.Borefields.Data</a>.
  The <code>borFieDat</code> record can be found in the <a href=
  \"modelica://AixLib.Fluid.Geothermal.Borefields.Data.Borefield\">AixLib.Fluid.Geothermal.Borefields.Data.Borefield</a>
  subpackage therein. Examples of the subrecords <code>conDat</code>,
  <code>filDat</code> and <code>soiDat</code> can be found in <a href=
  \"modelica://AixLib.Fluid.Geothermal.Borefields.Data.Configuration\">AixLib.Fluid.Geothermal.Borefields.Data.Configuration</a>,
  <a href=
  \"modelica://AixLib.Fluid.Geothermal.Borefields.Data.Filling\">AixLib.Fluid.Geothermal.Borefields.Data.Filling</a>
  and <a href=
  \"modelica://AixLib.Fluid.Geothermal.Borefields.Data.Soil\">AixLib.Fluid.Geothermal.Borefields.Data.Soil</a>,
  respectively.
</p>
<p>
  It is important to make sure that the <code>borCon</code> parameter
  within the <code>conDat</code> subrecord is compatible with the
  chosen borefield model. For example, if a double U-tube borefield
  model is chosen, the <code>borCon</code> parameter could be set to
  both a parallel double U-tube configuration and a double U-tube
  configuration in series, but could not be set to a single U-tube
  configuration. An incompatible borehole configuration will stop the
  simulation.
</p>
<h5>
  Ground heat transfer parameters
</h5>
<p>
  Other than the parameters contained in the <code>borFieDat</code>
  record, the borefield models have other parameters which can be
  modified by the user. The <code>tLoaAgg</code> parameter is the time
  resolution of the load aggregation for the calculation of the ground
  heat transfer. It represents the frequency at which the load
  aggregation procedure is performed in the simulation. Therefore,
  smaller values of <code>tLoaAgg</code> will improve the accuracy of
  the model, at the cost of increased simulation times due to a higher
  number of events occuring in the simulation. While a default value is
  provided for this parameter, it is advisable to ensure that it is
  lower than a fraction (e.g. half) of the time required for the fluid
  to completely circulate through the borefield, as increasing the
  value of <code>tLoaAgg</code> beyond this will result in non-physical
  borehole wall temperatures.
</p>
<p>
  The <code>nCel</code> parameter also affects the accuracy and
  simulation time of the ground heat transfer calculations. As this
  parameter sets the number of consecutive equal-size aggregation cells
  before increasing the size of cells, increasing its value will result
  in less load aggregation, which will increase accuracy at the cost of
  computation time. On the other hand, decreasing the value of
  <code>nCel</code> (down to a minimum of 1) will decrease accuracy but
  improve computation time. The default value is chosen as a compromise
  between the two.
</p>
<p>
  Further information on the <code>tLoaAgg</code> and <code>nCel</code>
  parameters can be found in the documentation of <a href=
  \"modelica://AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.GroundTemperatureResponse\">
  AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.GroundTemperatureResponse</a>.
</p>
<h5>
  Other parameters
</h5>
<p>
  Other parameters which can be modified include the dynamics, initial
  conditions, and further information regarding the fluid flow, for
  example whether the flow is reversible. It is worth noting that
  regardless of the <code>energyDynamics</code> chosen, the
  <code>dynFil</code> parameter can be set to <code>false</code> to
  remove the effect of the thermal capacitance of the filling material
  in the borehole(s). The <code>nSeg</code> parameter specifies the
  number of segments for the vertical discretization of the
  borehole(s). Further information on this discretization can be found
  in the \"Model description\" section below.
</p>
<h5>
  Running simulations
</h5>
<p>
  When running simulations using the borefield models, the
  <code>tmp/temperatureResponseMatrix</code> directory within the
  current directory will be checked to see if any of the borefield
  configurations used in the simulation have already had their ground
  temperature response calculated previously If the data doesn't exist
  in the <code>tmp/temperatureResponseMatrix</code> folder, it will be
  calculated during the initialization of the model and will be saved
  there for future use.
</p>
<h4>
  Model description
</h4>
<p>
  The borefield models rely on the following key assumptions:
</p>
<ul>
  <li>The thermal properties of the soil (conductivity and diffusivity)
  are constant, homogenous and isotropic.
  </li>
  <li>The conductivity, capacitance and density of the grout and pipe
  material are constant, homogenous and isotropic.
  </li>
  <li>There is no heat extraction or injection prior to the simulation
  start.
  </li>
  <li>All of the boreholes in the borefield have uniform dimensions
  (including the pipe dimensions).
  </li>
  <li>Inside the boreholes, the non-advective heat transfer is only in
  the radial direction.
  </li>
</ul>
<p>
  The borefield models are constructed in two main parts: the
  borehole(s) and the ground heat transfer. The former is modeled as a
  vertical discretization of borehole segments, where a uniform
  temperature increase or decrease (due to heat injection or
  extraction) is superimposed to the far-field ground temperature to
  obtain the borehole wall temperature. The thermal effects of the
  circulating fluid (including the convection resistance), of the pipes
  and of the filling material are all taken into consideration, which
  allows modeling short-term thermal effects in the borehole. The
  borehole segments do not take into account axial effects, thus only
  radial (horizontal) effects are considered within the borehole(s).
  The thermal behavior between the pipes and borehole wall are modeled
  as a resistance-capacitance network, with the grout capacitance being
  split in the number of pipes present in a borehole section. The
  capacitance is only present if the <code>dynFil</code> parameter is
  set to <code>true</code>. The figure below shows an example for a
  borehole section within a single U-tube configuration.
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/BoreholeResistances_01.png\">
</p>
<p>
  The second main part of the borefield models is the ground heat
  transfer, which shares a thermal boundary condition at the uniform
  borehole wall with all of the borehole segments. The heat transfer in
  the ground is modeled analytically as a convolution integral between
  the heat flux at the borehole wall and the borefield's thermal
  response factor.
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/LoadAggregation_12.png\">
</p>
<p>
  The model uses a load aggregation technique to reduce the time
  required to calculate the borehole wall temperature changes resulting
  from heat injection or extraction.
</p>
<p>
  The ground heat transfer takes into account both the borehole axial
  effects and the borehole radial effects which are a result of its
  cylindrical geometry. The borefield's thermal response to a constant
  load, also known as its <em>g-function</em>, is used to calculate the
  thermal response in the simulation. This g-function is stored in the
  <code>tmp/temperatureResponseMatrix</code> subdirectory, as discussed
  previously in the \"How to use the borefield models\" section. Further
  information on the ground heat transfer model and the thermal
  temperature response calculations can be found in <a href=
  \"modelica://AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.GroundTemperatureResponse\">
  AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.GroundTemperatureResponse</a>
  and <a href=
  \"modelica://AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.ThermalResponseFactors.gFunction\">
  AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.ThermalResponseFactors.gFunction</a>.
</p>
<h4>
  References
</h4>
<p>
  D. Picard, L. Helsen. <i>Advanced Hybrid Model for Borefield Heat
  Exchanger Performance Evaluation; an Implementation in Modelica</i>
  Proc. of the 10th Intertional ModelicaConference, p. 857-866. Lund,
  Sweden. March 2014. <a href=
  \"https://lirias.kuleuven.be/retrieve/270880\">https://lirias.kuleuven.be/retrieve/270880</a>.
</p>

-------- Errors --------
line 56 column 1 - Warning: <p> attribute "align" not allowed for HTML5
line 179 column 1 - Warning: <p> attribute "align" not allowed for HTML5
line 188 column 1 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/HeatExchangers/BaseClasses/WetCoilWetRegime.mo ----
-------- HTML Code --------

 <ul>
 <li>
 Jan 21, 2021, by Donghun Kim:<br/>First implementation.
 </li>
 </ul>
 
 <p>
 This model implements the calculation for a 100% wet coil.
 </p>
 <p>
 The equations from Braun (1988) and Mitchell and Braun (2012a and b),
 which are essentially the extension of the <i>&epsilon;-NTU</i> approach to
 simultaneous sensible and latent heat transfer, are utilized.
 </p>
 <p>
 The mathematical equations are analogous to that of the sensible heat exchanger.
 However, the key distinction is that the heat transfer is driven by an enthalpy difference
 not by an temperature difference. This change in the driving potential results in re-defining
 capacitances and heat transfer coefficients accordingly.
 </p>
 
 <p>
 The total heat transfer rate is expressed as
 </p>
 <p align=\"center\">
 <i> Q<sub>tot</sub>=&epsilon;* C*<sub>min </sub>
 (h<sub>air,in</sub>-h<sub>sat</sub>(T<sub>wat,in</sub>))</i>,
 </p>
 <p>
 where <i>&epsilon;*=f(Cr*,NTU*)</i> and <i>f</i> is the same <i>&epsilon;-NTU</i> relationships
 (depending on the heat exchanger configuration) for the sensible heat exchanger.
 </p>
 <p>
 <i>h<sub>air,in</sub> </i> and <i>h<sub>sat</sub></i>(<i>T<sub>wat,in</sub></i>) are
 the specific enthalpies of the incoming moist air and saturated moist air
 at the water inlet temperature.
 </p>
 <p>
 The capacitances of water and air streams are defined as
 </p>
 <p align=\"center\"><i>C*<sub>air</sub>=m<sub>air</sub></i> and
 <i>C*<sub>wat</sub>=m<sub>wat</sub>c<sub>p,wat</sub>/csat</i>,
 </p>
 <p>
 where <i>csat</i> is an specific heat capacity, which indicates the sensitivity
 of the enthalpy of the staturated moist air w.r.t. the temperature, and is defined
 here as <i>csat=(h<sub>sat</sub>(T<sub>wat,out</sub>)-h<sub>sat</sub>(T<sub>wat,in</sub>))
 /(T<sub>wat,out</sub>-T<sub>wat,in</sub>)</i>.
 </p>
 <p>
 The capacitance ratio and minimum capacitance are naturally defined as
 </p>
 <p align=\"center\"> <i>Cr*=min(C*<sub>air</sub>,C*<sub>wat</sub>)/max(C*<sub>air</sub>,C*<sub>wat</sub>)</i>
 and <i>C*<sub>min</sub>=min(C*<sub>air</sub>,C*<sub>wat</sub>)</i>.
 </p>
 <p><br/>
 The number of transfer unit for the wet-coil is defined as <i>NTU*=UA*/C*<sub>min</sub></i>, where
 </p>
 <p align=\"center\">
 <i>UA*=1/(1/(UA<sub>air</sub>/c<sub>p,air</sub>)+1/(UA<sub>wat</sub>/csat)</i>.
 </p>
 
 <h4>References </h4>
 <p>
 Braun, James E. 1988.
 &quot;Methodologies for the Design and Control of Central Cooling Plants&quot;.
 PhD Thesis. University of Wisconsin - Madison.
 Available
 <a href=\"https://minds.wisconsin.edu/handle/1793/46694\">
 online</a>.
 </p>
 <p>
 Mitchell, John W., and James E. Braun. 2012a.
 Principles of heating, ventilation, and air conditioning in buildings.
 Hoboken, N.J.: Wiley.
 </p>
 <p>
 Mitchell, John W., and James E. Braun. 2012b.
 &quot;Supplementary Material Chapter 2: Heat Exchangers for Cooling Applications&quot;.
 Excerpt from Principles of heating, ventilation, and air conditioning in buildings.
 Hoboken, N.J.: Wiley.
 Available
 <a href=\"http://bcs.wiley.com/he-bcs/Books?action=index&amp;itemId=0470624574&amp;bcsId=7185\">
 online</a>.
 </p>
 
-------- Corrected Code --------
<ul>
  <li>Jan 21, 2021, by Donghun Kim:<br/>
    First implementation.
  </li>
</ul>
<p>
  This model implements the calculation for a 100% wet coil.
</p>
<p>
  The equations from Braun (1988) and Mitchell and Braun (2012a and b),
  which are essentially the extension of the <i>ε-NTU</i> approach to
  simultaneous sensible and latent heat transfer, are utilized.
</p>
<p>
  The mathematical equations are analogous to that of the sensible heat
  exchanger. However, the key distinction is that the heat transfer is
  driven by an enthalpy difference not by an temperature difference.
  This change in the driving potential results in re-defining
  capacitances and heat transfer coefficients accordingly.
</p>
<p>
  The total heat transfer rate is expressed as
</p>
<p align=\"center\">
  <i>Q<sub>tot</sub>=ε* C*<sub>min</sub>
  (h<sub>air,in</sub>-h<sub>sat</sub>(T<sub>wat,in</sub>))</i>,
</p>
<p>
  where <i>ε*=f(Cr*,NTU*)</i> and <i>f</i> is the same <i>ε-NTU</i>
  relationships (depending on the heat exchanger configuration) for the
  sensible heat exchanger.
</p>
<p>
  <i>h<sub>air,in</sub></i> and
  <i>h<sub>sat</sub></i>(<i>T<sub>wat,in</sub></i>) are the specific
  enthalpies of the incoming moist air and saturated moist air at the
  water inlet temperature.
</p>
<p>
  The capacitances of water and air streams are defined as
</p>
<p align=\"center\">
  <i>C*<sub>air</sub>=m<sub>air</sub></i> and
  <i>C*<sub>wat</sub>=m<sub>wat</sub>c<sub>p,wat</sub>/csat</i>,
</p>
<p>
  where <i>csat</i> is an specific heat capacity, which indicates the
  sensitivity of the enthalpy of the staturated moist air w.r.t. the
  temperature, and is defined here as
  <i>csat=(h<sub>sat</sub>(T<sub>wat,out</sub>)-h<sub>sat</sub>(T<sub>wat,in</sub>))
  /(T<sub>wat,out</sub>-T<sub>wat,in</sub>)</i>.
</p>
<p>
  The capacitance ratio and minimum capacitance are naturally defined
  as
</p>
<p align=\"center\">
  <i>Cr*=min(C*<sub>air</sub>,C*<sub>wat</sub>)/max(C*<sub>air</sub>,C*<sub>wat</sub>)</i>
  and <i>C*<sub>min</sub>=min(C*<sub>air</sub>,C*<sub>wat</sub>)</i>.
</p>
<p>
  <br/>
  The number of transfer unit for the wet-coil is defined as
  <i>NTU*=UA*/C*<sub>min</sub></i>, where
</p>
<p align=\"center\">
  <i>UA*=1/(1/(UA<sub>air</sub>/c<sub>p,air</sub>)+1/(UA<sub>wat</sub>/csat)</i>.
</p>
<h4>
  References
</h4>
<p>
  Braun, James E. 1988. \"Methodologies for the Design and Control of
  Central Cooling Plants\". PhD Thesis. University of Wisconsin -
  Madison. Available <a href=
  \"https://minds.wisconsin.edu/handle/1793/46694\">online</a>.
</p>
<p>
  Mitchell, John W., and James E. Braun. 2012a. Principles of heating,
  ventilation, and air conditioning in buildings. Hoboken, N.J.: Wiley.
</p>
<p>
  Mitchell, John W., and James E. Braun. 2012b. \"Supplementary Material
  Chapter 2: Heat Exchangers for Cooling Applications\". Excerpt from
  Principles of heating, ventilation, and air conditioning in
  buildings. Hoboken, N.J.: Wiley. Available <a href=
  \"http://bcs.wiley.com/he-bcs/Books?action=index&amp;itemId=0470624574&amp;bcsId=7185\">
  online</a>.
</p>

-------- Errors --------
line 20 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 36 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 48 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 54 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Controls/Discrete/BooleanDelay.mo ----
-------- HTML Code --------

 <p>
 Block that delays the boolean input signal by
 one sampling interval.
 For example,
 if <i>u</i> denotes the input,
 <i>y</i> denotes the output, and
 <i>t<sub>i</sub></i> and <i>t<sub>i+1</sub></i>
 denote subsequent sampling
 instants, then the model outputs
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 y(t<sub>i+1</sub>) = u(t<sub>i</sub>).
 </p>
 
 <ul>
 <li>
 June 6, 2015, by Michael Wetter:<br/>
 Set start value and <code>fixed</code> attribute
 for <code>firstTrigger</code>
 to avoid a translation warning in pedantic mode
 in Dymola 2016.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/266\">#266</a>.
 </li>
 <li>
 November 21, 2011, by Michael Wetter:<br/>
 Improved documentation.
 </li>
 <li>
 November 26, 2008, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Block that delays the boolean input signal by one sampling interval.
  For example, if <i>u</i> denotes the input, <i>y</i> denotes the
  output, and <i>t<sub>i</sub></i> and <i>t<sub>i+1</sub></i> denote
  subsequent sampling instants, then the model outputs
</p>
<p align=\"center\" style=\"font-style:italic;\">
  y(t<sub>i+1</sub>) = u(t<sub>i</sub>).
</p>
<ul>
  <li>June 6, 2015, by Michael Wetter:<br/>
    Set start value and <code>fixed</code> attribute for
    <code>firstTrigger</code> to avoid a translation warning in
    pedantic mode in Dymola 2016. This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/266\">#266</a>.
  </li>
  <li>November 21, 2011, by Michael Wetter:<br/>
    Improved documentation.
  </li>
  <li>November 26, 2008, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 12 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Humidifiers/SteamHumidifier_X.mo ----
-------- HTML Code --------

 <p>
 Model for a steam humidifier with a prescribed outlet water vapor mass fraction
 in kg/kg total air.
 </p>
 <p>
 This model forces the outlet water mass fraction at <code>port_b</code> to be
 no lower than the
 input signal <code>X_wSet</code>, subject to optional limits on the
 maximum water vapor mass flow rate that is added, as
 described by the parameter <code>mWatMax_flow</code>.
 By default, the model has unlimited capacity.
 </p>
 <p>
 The output signal <code>mWat_flow &ge; 0</code> is the moisture added
 to the medium if the flow rate is from <code>port_a</code> to <code>port_b</code>.
 If the flow is reversed, then <code>mWat_flow = 0</code>.
 The outlet specific enthalpy at <code>port_b</code> is increased by
 the enthalpy of steam at <i>100</i>&deg;C times the mass of steam that was added.
 Therefore, the temperature of the leaving fluid is slightly above the inlet temperature.
 </p>
 <p>
 The outlet conditions at <code>port_a</code> are not affected by this model,
 other than for a possible pressure difference due to flow friction.
 </p>
 <p>
 If the parameter <code>energyDynamics</code> is different from
 <code>Modelica.Fluid.Types.Dynamics.SteadyState</code>,
 the component models the dynamic response using a first order differential equation.
 The time constant of the component is equal to the parameter <code>tau</code>.
 This time constant is adjusted based on the mass flow rate using
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 &tau;<sub>eff</sub> = &tau; |m&#775;| &frasl; m&#775;<sub>nom</sub>
 </p>
 <p>
 where
 <i>&tau;<sub>eff</sub></i> is the effective time constant for the given mass flow rate
 <i>m&#775;</i> and
 <i>&tau;</i> is the time constant at the nominal mass flow rate
 <i>m&#775;<sub>nom</sub></i>.
 This type of dynamics is equal to the dynamics that a completely mixed
 control volume would have.
 </p>
 <p>
 Optionally, this model can have a flow resistance.
 Set <code>dp_nominal = 0</code> to disable the flow friction calculation.
 </p>
 <p>
 For a model that uses a control signal <i>u &isin; [0, 1]</i> and multiplies
 this with the nominal water mass flow rate, use
 <a href=\"modelica://AixLib.Fluid.Humidifiers.Humidifier_u\">
 AixLib.Fluid.Humidifiers.Humidifier_u</a>
 
 </p>
 <h4>Limitations</h4>
 <p>
 This model only adds water vapor for the flow from
 <code>port_a</code> to <code>port_b</code>.
 The water vapor of the reverse flow is not affected by this model.
 </p>
 
 <ul>
 <li>
 March 8, 2022, by Michael Wetter:<br/>
 Renamed parameter <code>massDynamics</code> to <code>energyDynamics</code> for consistency with other models.
 </li>
 <li>
 May 10, 2017, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Model for a steam humidifier with a prescribed outlet water vapor
  mass fraction in kg/kg total air.
</p>
<p>
  This model forces the outlet water mass fraction at
  <code>port_b</code> to be no lower than the input signal
  <code>X_wSet</code>, subject to optional limits on the maximum water
  vapor mass flow rate that is added, as described by the parameter
  <code>mWatMax_flow</code>. By default, the model has unlimited
  capacity.
</p>
<p>
  The output signal <code>mWat_flow ≥ 0</code> is the moisture added to
  the medium if the flow rate is from <code>port_a</code> to
  <code>port_b</code>. If the flow is reversed, then <code>mWat_flow =
  0</code>. The outlet specific enthalpy at <code>port_b</code> is
  increased by the enthalpy of steam at <i>100</i>°C times the mass of
  steam that was added. Therefore, the temperature of the leaving fluid
  is slightly above the inlet temperature.
</p>
<p>
  The outlet conditions at <code>port_a</code> are not affected by this
  model, other than for a possible pressure difference due to flow
  friction.
</p>
<p>
  If the parameter <code>energyDynamics</code> is different from
  <code>Modelica.Fluid.Types.Dynamics.SteadyState</code>, the component
  models the dynamic response using a first order differential
  equation. The time constant of the component is equal to the
  parameter <code>tau</code>. This time constant is adjusted based on
  the mass flow rate using
</p>
<p align=\"center\" style=\"font-style:italic;\">
  τ<sub>eff</sub> = τ |ṁ| ⁄ ṁ<sub>nom</sub>
</p>
<p>
  where <i>τ<sub>eff</sub></i> is the effective time constant for the
  given mass flow rate <i>ṁ</i> and <i>τ</i> is the time constant at
  the nominal mass flow rate <i>ṁ<sub>nom</sub></i>. This type of
  dynamics is equal to the dynamics that a completely mixed control
  volume would have.
</p>
<p>
  Optionally, this model can have a flow resistance. Set
  <code>dp_nominal = 0</code> to disable the flow friction calculation.
</p>
<p>
  For a model that uses a control signal <i>u ∈ [0, 1]</i> and
  multiplies this with the nominal water mass flow rate, use <a href=
  \"modelica://AixLib.Fluid.Humidifiers.Humidifier_u\">AixLib.Fluid.Humidifiers.Humidifier_u</a>
</p>
<h4>
  Limitations
</h4>
<p>
  This model only adds water vapor for the flow from
  <code>port_a</code> to <code>port_b</code>. The water vapor of the
  reverse flow is not affected by this model.
</p>
<ul>
  <li>March 8, 2022, by Michael Wetter:<br/>
    Renamed parameter <code>massDynamics</code> to
    <code>energyDynamics</code> for consistency with other models.
  </li>
  <li>May 10, 2017, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 33 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/HeatExchangers/EvaporatorCondenser.mo ----
-------- HTML Code --------

 <p>
 Model for a constant temperature evaporator or condenser based on a &epsilon;-NTU
 heat exchanger model.
 </p>
 <p>
 The heat exchanger effectiveness is calculated from the number of transfer units
 (NTU):
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 &epsilon; = 1 - exp(UA &frasl; (m&#775; c<sub>p</sub>))
 </p>
 <p>
 Optionally, this model can have a flow resistance.
 If no flow resistance is requested, set <code>dp_nominal=0</code>.
 </p>
 <h4>Limitations</h4>
 <p>
 This model does not consider any superheating or supercooling on the refrigerant
 side. The refrigerant is considered to exchange heat at a constant temperature
 throughout the heat exchanger.
 </p>
 
 <ul>
 <li>
 March 7, 2022, by Michael Wetter:<br/>
 Removed <code>massDynamics</code>.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1542\">#1542</a>.
 </li>
 <li>
 May 27, 2017, by Filip Jorissen:<br/>
 Regularised heat transfer around zero flow.<br/>
 This is for
 <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/769\">#769</a>.
 </li>
 <li>
 April 12, 2017, by Michael Wetter:<br/>
 Corrected invalid syntax for computing the specific heat capacity.<br/>
 This is for
 <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/707\">#707</a>.
 </li>
 <li>
 October 11, 2016, by Massimo Cimmino:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Model for a constant temperature evaporator or condenser based on a
  ε-NTU heat exchanger model.
</p>
<p>
  The heat exchanger effectiveness is calculated from the number of
  transfer units (NTU):
</p>
<p align=\"center\" style=\"font-style:italic;\">
  ε = 1 - exp(UA ⁄ (ṁ c<sub>p</sub>))
</p>
<p>
  Optionally, this model can have a flow resistance. If no flow
  resistance is requested, set <code>dp_nominal=0</code>.
</p>
<h4>
  Limitations
</h4>
<p>
  This model does not consider any superheating or supercooling on the
  refrigerant side. The refrigerant is considered to exchange heat at a
  constant temperature throughout the heat exchanger.
</p>
<ul>
  <li>March 7, 2022, by Michael Wetter:<br/>
    Removed <code>massDynamics</code>.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1542\">#1542</a>.
  </li>
  <li>May 27, 2017, by Filip Jorissen:<br/>
    Regularised heat transfer around zero flow.<br/>
    This is for <a href=
    \"https://github.com/lbl-srg/modelica-buildings/issues/769\">#769</a>.
  </li>
  <li>April 12, 2017, by Michael Wetter:<br/>
    Corrected invalid syntax for computing the specific heat
    capacity.<br/>
    This is for <a href=
    \"https://github.com/lbl-srg/modelica-buildings/issues/707\">#707</a>.
  </li>
  <li>October 11, 2016, by Massimo Cimmino:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 10 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Media/Antifreeze/PropyleneGlycolWater.mo ----
-------- HTML Code --------

     <p>
     This base properties model is identical to
     <a href=\"modelica://Modelica.Media.Water.ConstantPropertyLiquidWater\">
     Modelica.Media.Water.ConstantPropertyLiquidWater</a>,
     except that the equation
     <code>u = cv_const*(T - reference_T)</code>
     has been replaced by <code>u=h</code> because
     <code>cp_const=cv_const</code>.
     Also, the model checks if the mass fraction of the mixture is within the
     allowed limits.
     </p>
 
   <p>
   Density of propylene antifreeze-water mixture at specified mass fraction
   and temperature, based on Melinder (2010).
   </p>
   <h4>References</h4>
   <p>
   Melinder, &#197;ke. 2010. Properties of Secondary Working Fluids (Secondary
   Refrigerants or Coolants, Heat Transfer Fluids) for Indirect Systems. Paris:
   IIR/IIF.
   </p>
   
   <ul>
   <li>
   May 2, 2018 by Massimo Cimmino:<br/>
   First implementation.
   This function is used by
   <a href=\"modelica://AixLib.Media.Antifreeze.PropyleneGlycolWater\">
   AixLib.Media.Antifreeze.PropyleneGlycolWater</a>.
   </li>
   </ul>
   
 <p>
 Dynamic viscosity of antifreeze-water mixture at specified mass fraction and
 temperature, based on Melinder (2010).
 </p>
 <h4>References</h4>
 <p>
 Melinder, &#197;ke. 2010. Properties of Secondary Working Fluids (Secondary
 Refrigerants or Coolants, Heat Transfer Fluids) for Indirect Systems. Paris:
 IIR/IIF.
 </p>
 
 <ul>
 <li>
 May 2, 2018 by Massimo Cimmino:<br/>
 First implementation.
 This function is used by
 <a href=\"modelica://AixLib.Media.Antifreeze.PropyleneGlycolWater\">
 AixLib.Media.Antifreeze.PropyleneGlycolWater</a>.
 </li>
 </ul>
 
 <p>
 Fusion temperature of antifreeze-water mixture at specified mass fraction and
 temperature, based on Melinder (2010).
 </p>
 <h4>References</h4>
 <p>
 Melinder, &#197;ke. 2010. Properties of Secondary Working Fluids (Secondary
 Refrigerants or Coolants, Heat Transfer Fluids) for Indirect Systems. Paris:
 IIR/IIF.
 </p>
 
 <ul>
 <li>
 May 2, 2018 by Massimo Cimmino:<br/>
 First implementation.
 This function is used by
 <a href=\"modelica://AixLib.Media.Antifreeze.PropyleneGlycolWater\">
 AixLib.Media.Antifreeze.PropyleneGlycolWater</a>.
 </li>
 </ul>
 
 <p>
 Evaluates a thermophysical property of a mixture, based on correlations proposed
 by Melinder (2010).
 </p>
 <p>
 The polynomial has the form
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 f = a<sub>1</sub> (x-xm)<sup>0</sup>(y-ym)<sup>0</sup>
 + a<sub>2</sub> (x-xm)<sup>0</sup>(y-ym)<sup>1</sup>
 + ... +
 a<sub>ny[1]</sub> (x-xm)<sup>0</sup>(y-ym)<sup>ny[1]-1</sup>
 + ... +
 a<sub>ny[1])+1</sub> (x-xm)<sup>1</sup>(y-ym)<sup>0</sup>
 + ... +
 a<sub>ny[1]+ny[2]</sub> (x-xm)<sup>1</sup>(y-ym)<sup>ny[2]-1</sup>
 + ...
 </p>
 <h4>References</h4>
 <p>
 Melinder, &#197;ke. 2010. Properties of Secondary Working Fluids (Secondary
 Refrigerants or Coolants, Heat Transfer Fluids) for Indirect Systems. Paris:
 IIR/IIF.
 </p>
 
 <ul>
 <li>
 March 16, 2018 by Massimo Cimmino:<br/>
 First implementation.
 This function is used models in
 <a href=\"modelica://AixLib.Media.Antifreeze\">
 AixLib.Media.Antifreeze</a>.
 </li>
 </ul>
 
 <p>
 Specific heat capacity of antifreeze-water mixture at specified mass fraction
 and temperature, based on Melinder (2010).
 </p>
 <h4>References</h4>
 <p>
 Melinder, &#197;ke. 2010. Properties of Secondary Working Fluids (Secondary
 Refrigerants or Coolants, Heat Transfer Fluids) for Indirect Systems. Paris:
 IIR/IIF.
 </p>
 
 <ul>
 <li>
 March 16, 2018 by Massimo Cimmino:<br/>
 First implementation.
 This function is used by
 <a href=\"modelica://AixLib.Media.Antifreeze.PropyleneGlycolWater\">
 AixLib.Media.Antifreeze.PropyleneGlycolWater</a>.
 </li>
 </ul>
 
 <p>
 Thermal conductivity of antifreeze-water mixture at specified mass fraction and
 temperature, based on Melinder (2010).
 </p>
 <h4>References</h4>
 <p>
 Melinder, &#197;ke. 2010. Properties of Secondary Working Fluids (Secondary
 Refrigerants or Coolants, Heat Transfer Fluids) for Indirect Systems. Paris:
 IIR/IIF.
 </p>
 
 <ul>
 <li>
 March 16, 2018 by Massimo Cimmino:<br/>
 First implementation.
 This function is used by
 <a href=\"modelica://AixLib.Media.Antifreeze.PropyleneGlycolWater\">
 AixLib.Media.Antifreeze.PropyleneGlycolWater</a>.
 </li>
 </ul>
 
 <p>
 This medium package models propylene glycol - water mixtures.
 </p>
 <p>
 The mass density, specific heat capacity, thermal conductivity and viscosity
 are assumed constant and evaluated at a set temperature and mass fraction of
 propylene glycol within the mixture. The dependence of the four properties
 are shown on the figure below.
 </p>
 <p align=\"center\">
 <img src=\"modelica://AixLib/Resources/Images/Media/Antifreeze/PropyleneGlycolWaterProperties.png\" border=\"1\"
 alt=\"Relative variation of specific heat capacity with temperature\"/>
 </p>
 <p>
 The accuracy of the thermophysical properties is dependent on the temperature
 variations encountered during simulations.
 The figure below shows the relative error of the the four properties over a
 <i>10</i> &deg;C range around the temperature used to evaluate the constant
 properties. The maximum errors are <i>0.8</i> % for mass density, <i>1.5</i> %
 for specific heat capacity, <i>3.2</i> % for thermal conductivity and <i>250</i>
 % for dynamic viscosity.
 </p>
 <p align=\"center\">
 <img src=\"modelica://AixLib/Resources/Images/Media/Antifreeze/PropyleneGlycolWaterError10degC.png\" border=\"1\"
 alt=\"Relative variation of specific heat capacity with temperature\"/>
 </p>
 <p>
 The figure below shows the relative error of the the four properties over a
 <i>20</i> &deg;C range around the temperature used to evaluate the constant
 proepties. The maximum errors are <i>1.6</i> % for mass density, <i>3.0</i> %
 for specific heat capacity, <i>6.2</i> % for thermal conductivity and <i>950</i>
 % for dynamic viscosity.
 </p>
 <p align=\"center\">
 <img src=\"modelica://AixLib/Resources/Images/Media/Antifreeze/PropyleneGlycolWaterError20degC.png\" border=\"1\"
 alt=\"Relative variation of specific heat capacity with temperature\"/>
 </p>
 <p>
 The enthalpy is computed using the convention that <i>h=0</i>
 if <i>T=0</i> &deg;C.
 </p>
 <h4>Limitations</h4>
 <p>
 Density, specific heat capacity, thermal conductivity and viscosity are constant.
 The propylene glycol/water mixture is modeled as an incompressible liquid.
 There are no phase changes. The medium is limited to temperatures below
 <i>100</i> &deg;C and mass fractions below <i>0.60</i>.
 As is the case for <a href=\"modelica://AixLib.Media.Water\">AixLib.Media.Water</a>,
 this medium package should not be used if
 the simulation relies on the dynamic viscosity.
 </p>
 <h4>Typical use and important parameters</h4>
 <p>
 The temperature and mass fraction must be specified for the evaluation of the
 constant thermophysical properties. A typical use of the package is (e.g. for
 a temperature of <i>20</i> &deg;C and a mass fraction of <i>0.40</i>):
 </p>
 <p>
 <code>Medium = AixLib.Media.Antifreeze.PropyleneGlycolWater(property_T=293.15, X_a=0.40)</code>
 </p>
 
 <ul>
 <li>
 October 26, 2018, by Filip Jorissen and Michael Wetter:<br/>
 Now printing different messages if temperature or mass fraction is above or below its limit,
 and adding instance name as JModelica does not print the full instance name in the assertion.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1045\">#1045</a>.
 </li>
 <li>
 March 16, 2018, by Massimo Cimmino:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This base properties model is identical to <a href=
  \"modelica://Modelica.Media.Water.ConstantPropertyLiquidWater\">Modelica.Media.Water.ConstantPropertyLiquidWater</a>,
  except that the equation <code>u = cv_const*(T - reference_T)</code>
  has been replaced by <code>u=h</code> because
  <code>cp_const=cv_const</code>. Also, the model checks if the mass
  fraction of the mixture is within the allowed limits.
</p>
<p>
  Density of propylene antifreeze-water mixture at specified mass
  fraction and temperature, based on Melinder (2010).
</p>
<h4>
  References
</h4>
<p>
  Melinder, Åke. 2010. Properties of Secondary Working Fluids
  (Secondary Refrigerants or Coolants, Heat Transfer Fluids) for
  Indirect Systems. Paris: IIR/IIF.
</p>
<ul>
  <li>May 2, 2018 by Massimo Cimmino:<br/>
    First implementation. This function is used by <a href=
    \"modelica://AixLib.Media.Antifreeze.PropyleneGlycolWater\">AixLib.Media.Antifreeze.PropyleneGlycolWater</a>.
  </li>
</ul>
<p>
  Dynamic viscosity of antifreeze-water mixture at specified mass
  fraction and temperature, based on Melinder (2010).
</p>
<h4>
  References
</h4>
<p>
  Melinder, Åke. 2010. Properties of Secondary Working Fluids
  (Secondary Refrigerants or Coolants, Heat Transfer Fluids) for
  Indirect Systems. Paris: IIR/IIF.
</p>
<ul>
  <li>May 2, 2018 by Massimo Cimmino:<br/>
    First implementation. This function is used by <a href=
    \"modelica://AixLib.Media.Antifreeze.PropyleneGlycolWater\">AixLib.Media.Antifreeze.PropyleneGlycolWater</a>.
  </li>
</ul>
<p>
  Fusion temperature of antifreeze-water mixture at specified mass
  fraction and temperature, based on Melinder (2010).
</p>
<h4>
  References
</h4>
<p>
  Melinder, Åke. 2010. Properties of Secondary Working Fluids
  (Secondary Refrigerants or Coolants, Heat Transfer Fluids) for
  Indirect Systems. Paris: IIR/IIF.
</p>
<ul>
  <li>May 2, 2018 by Massimo Cimmino:<br/>
    First implementation. This function is used by <a href=
    \"modelica://AixLib.Media.Antifreeze.PropyleneGlycolWater\">AixLib.Media.Antifreeze.PropyleneGlycolWater</a>.
  </li>
</ul>
<p>
  Evaluates a thermophysical property of a mixture, based on
  correlations proposed by Melinder (2010).
</p>
<p>
  The polynomial has the form
</p>
<p align=\"center\" style=\"font-style:italic;\">
  f = a<sub>1</sub> (x-xm)<sup>0</sup>(y-ym)<sup>0</sup> +
  a<sub>2</sub> (x-xm)<sup>0</sup>(y-ym)<sup>1</sup> + ... +
  a<sub>ny[1]</sub> (x-xm)<sup>0</sup>(y-ym)<sup>ny[1]-1</sup> + ... +
  a<sub>ny[1])+1</sub> (x-xm)<sup>1</sup>(y-ym)<sup>0</sup> + ... +
  a<sub>ny[1]+ny[2]</sub> (x-xm)<sup>1</sup>(y-ym)<sup>ny[2]-1</sup> +
  ...
</p>
<h4>
  References
</h4>
<p>
  Melinder, Åke. 2010. Properties of Secondary Working Fluids
  (Secondary Refrigerants or Coolants, Heat Transfer Fluids) for
  Indirect Systems. Paris: IIR/IIF.
</p>
<ul>
  <li>March 16, 2018 by Massimo Cimmino:<br/>
    First implementation. This function is used models in <a href=
    \"modelica://AixLib.Media.Antifreeze\">AixLib.Media.Antifreeze</a>.
  </li>
</ul>
<p>
  Specific heat capacity of antifreeze-water mixture at specified mass
  fraction and temperature, based on Melinder (2010).
</p>
<h4>
  References
</h4>
<p>
  Melinder, Åke. 2010. Properties of Secondary Working Fluids
  (Secondary Refrigerants or Coolants, Heat Transfer Fluids) for
  Indirect Systems. Paris: IIR/IIF.
</p>
<ul>
  <li>March 16, 2018 by Massimo Cimmino:<br/>
    First implementation. This function is used by <a href=
    \"modelica://AixLib.Media.Antifreeze.PropyleneGlycolWater\">AixLib.Media.Antifreeze.PropyleneGlycolWater</a>.
  </li>
</ul>
<p>
  Thermal conductivity of antifreeze-water mixture at specified mass
  fraction and temperature, based on Melinder (2010).
</p>
<h4>
  References
</h4>
<p>
  Melinder, Åke. 2010. Properties of Secondary Working Fluids
  (Secondary Refrigerants or Coolants, Heat Transfer Fluids) for
  Indirect Systems. Paris: IIR/IIF.
</p>
<ul>
  <li>March 16, 2018 by Massimo Cimmino:<br/>
    First implementation. This function is used by <a href=
    \"modelica://AixLib.Media.Antifreeze.PropyleneGlycolWater\">AixLib.Media.Antifreeze.PropyleneGlycolWater</a>.
  </li>
</ul>
<p>
  This medium package models propylene glycol - water mixtures.
</p>
<p>
  The mass density, specific heat capacity, thermal conductivity and
  viscosity are assumed constant and evaluated at a set temperature and
  mass fraction of propylene glycol within the mixture. The dependence
  of the four properties are shown on the figure below.
</p>
<p align=\"center\">
  <img src=
  \"modelica://AixLib/Resources/Images/Media/Antifreeze/PropyleneGlycolWaterProperties.png\"
  border=\"1\" alt=
  \"Relative variation of specific heat capacity with temperature\">
</p>
<p>
  The accuracy of the thermophysical properties is dependent on the
  temperature variations encountered during simulations. The figure
  below shows the relative error of the the four properties over a
  <i>10</i> °C range around the temperature used to evaluate the
  constant properties. The maximum errors are <i>0.8</i> % for mass
  density, <i>1.5</i> % for specific heat capacity, <i>3.2</i> % for
  thermal conductivity and <i>250</i> % for dynamic viscosity.
</p>
<p align=\"center\">
  <img src=
  \"modelica://AixLib/Resources/Images/Media/Antifreeze/PropyleneGlycolWaterError10degC.png\"
  border=\"1\" alt=
  \"Relative variation of specific heat capacity with temperature\">
</p>
<p>
  The figure below shows the relative error of the the four properties
  over a <i>20</i> °C range around the temperature used to evaluate the
  constant proepties. The maximum errors are <i>1.6</i> % for mass
  density, <i>3.0</i> % for specific heat capacity, <i>6.2</i> % for
  thermal conductivity and <i>950</i> % for dynamic viscosity.
</p>
<p align=\"center\">
  <img src=
  \"modelica://AixLib/Resources/Images/Media/Antifreeze/PropyleneGlycolWaterError20degC.png\"
  border=\"1\" alt=
  \"Relative variation of specific heat capacity with temperature\">
</p>
<p>
  The enthalpy is computed using the convention that <i>h=0</i> if
  <i>T=0</i> °C.
</p>
<h4>
  Limitations
</h4>
<p>
  Density, specific heat capacity, thermal conductivity and viscosity
  are constant. The propylene glycol/water mixture is modeled as an
  incompressible liquid. There are no phase changes. The medium is
  limited to temperatures below <i>100</i> °C and mass fractions below
  <i>0.60</i>. As is the case for <a href=
  \"modelica://AixLib.Media.Water\">AixLib.Media.Water</a>, this medium
  package should not be used if the simulation relies on the dynamic
  viscosity.
</p>
<h4>
  Typical use and important parameters
</h4>
<p>
  The temperature and mass fraction must be specified for the
  evaluation of the constant thermophysical properties. A typical use
  of the package is (e.g. for a temperature of <i>20</i> °C and a mass
  fraction of <i>0.40</i>):
</p>
<p>
  <code>Medium =
  AixLib.Media.Antifreeze.PropyleneGlycolWater(property_T=293.15,
  X_a=0.40)</code>
</p>
<ul>
  <li>October 26, 2018, by Filip Jorissen and Michael Wetter:<br/>
    Now printing different messages if temperature or mass fraction is
    above or below its limit, and adding instance name as JModelica
    does not print the full instance name in the assertion. This is for
    <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1045\">#1045</a>.
  </li>
  <li>March 16, 2018, by Massimo Cimmino:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 9 column 2 - Warning: <p> attribute "align" not allowed for HTML5


line 11 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 24 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 35 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Geothermal/Borefields/BaseClasses/HeatTransfer/ThermalResponseFactors/timeGeometric.mo ----
-------- HTML Code --------

 <p>
 This function attemps to build a vector of length <code>nTim</code> with a geometric
 expansion of the time variable between <code>dt</code> and <code>t_max</code>.
 </p>
 <p>
 If <code>t_max &gt; nTim*dt</code>, then a geometrically expanding vector is built as
 </p>
 <p align=\"center\">
 <i>t = [dt, dt*(1-r<sup>2</sup>)/(1-r), ... , dt*(1-r<sup>n</sup>)/(1-r), ... , t<sub>max</sub>],</i>
 </p>
 <p>
 where <i>r</i> is the geometric expansion factor.
 </p>
 <p>
 If <code>t_max &lt; nTim*dt</code>, then a linearly expanding vector is built as
 </p>
 <p align=\"center\">
 <i>t = [dt, 2*dt, ... , n*dt, ... , <code>nTim</code>*dt]</i>
 </p>
 
 <ul>
 <li>
 June 28, 2018 by Massimo Cimmino:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This function attemps to build a vector of length <code>nTim</code>
  with a geometric expansion of the time variable between
  <code>dt</code> and <code>t_max</code>.
</p>
<p>
  If <code>t_max &gt; nTim*dt</code>, then a geometrically expanding
  vector is built as
</p>
<p align=\"center\">
  <i>t = [dt, dt*(1-r<sup>2</sup>)/(1-r), ... ,
  dt*(1-r<sup>n</sup>)/(1-r), ... , t<sub>max</sub>],</i>
</p>
<p>
  where <i>r</i> is the geometric expansion factor.
</p>
<p>
  If <code>t_max &lt; nTim*dt</code>, then a linearly expanding vector
  is built as
</p>
<p align=\"center\">
  <i>t = [dt, 2*dt, ... , n*dt, ... , <code>nTim</code>*dt]</i>
</p>
<ul>
  <li>June 28, 2018 by Massimo Cimmino:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 9 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 18 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Controls/SetPoints/Examples/SupplyReturnTemperatureReset.mo ----
-------- HTML Code --------

 <p>
 Example that demonstrates the use of the hot water temperature reset
 for a heating system.
 The parameters of the block <code>heaCur</code>
 are for a heating system with
 <i>60</i>&deg;C supply water temperature and
 <i>40</i>&deg;C return water temperature at
 an outside temperature of
 <i>-10</i>&deg;C and a room temperature of
 <i>20</i>&deg;C. The offset for the temperature reset is
 <i>8</i> Kelvin, i.e., above
 <i>12</i>&deg;C outside temperature, there is no heating load.
 The figure below shows the computed supply and return water temperatures.
 </p>
 <p align=\"center\">
 <img src=\"modelica://AixLib/Resources/Images/Controls/SetPoints/Examples/SupplyReturnTemperatureReset.png\" border=\"1\" alt=\"Supply and return water temperatures.\"/>
 </p>
 
 <ul>
 <li>
 November 21, 2011, by Michael Wetter:<br/>
 Added documentation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Example that demonstrates the use of the hot water temperature reset
  for a heating system. The parameters of the block <code>heaCur</code>
  are for a heating system with <i>60</i>°C supply water temperature
  and <i>40</i>°C return water temperature at an outside temperature of
  <i>-10</i>°C and a room temperature of <i>20</i>°C. The offset for
  the temperature reset is <i>8</i> Kelvin, i.e., above <i>12</i>°C
  outside temperature, there is no heating load. The figure below shows
  the computed supply and return water temperatures.
</p>
<p align=\"center\">
  <img src=
  \"modelica://AixLib/Resources/Images/Controls/SetPoints/Examples/SupplyReturnTemperatureReset.png\"
  border=\"1\" alt=\"Supply and return water temperatures.\">
</p>
<ul>
  <li>November 21, 2011, by Michael Wetter:<br/>
    Added documentation.
  </li>
</ul>

-------- Errors --------
line 16 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Controls/Continuous/NumberOfRequests.mo ----
-------- HTML Code --------

 <p>
 Block that outputs the number of inputs that exceed a threshold.
 The parameter <code>kind</code> is used to determine the kind of the
 inequality. The table below shows the allowed settings.
 </p>
 <table border=\"1\" cellspacing=\"0\" cellpadding=\"2\" style=\"border-collapse:collapse;\" summary=\"Allowed parameter settings.\">
 <tr>
 <th>Value of parameter <code>kind</code></th>
 <th>Output signal incremented by 1 for each <i>i &isin; {1, ..., nin}</i> if</th>
 </tr>
 <tr>
 <td>0</td>
 <td><code>u[i] &gt; threShold</code></td>
 </tr>
 <tr>
 <td>1</td>
 <td><code>u[i] &ge; threShold</code></td>
 </tr>
 <tr>
 <td>2</td>
 <td><code>u[i] &le; threShold</code></td>
 </tr>
 <tr>
 <td>3</td>
 <td><code>u[i] &lt; threShold</code></td>
 </tr>
 </table>
 <p>
 This model may be used to check how many rooms
 exceed a temperature threshold.
 </p>
 
 <ul>
 <li>
 November 21, 2011, by Michael Wetter:<br/>
 Improved documentation.
 </li>
 <li>
 November 25, 2008, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Block that outputs the number of inputs that exceed a threshold. The
  parameter <code>kind</code> is used to determine the kind of the
  inequality. The table below shows the allowed settings.
</p>
<table border=\"1\" cellspacing=\"0\" cellpadding=\"2\" style=
\"border-collapse:collapse;\" summary=\"Allowed parameter settings.\">
  <tr>
    <th>
      Value of parameter <code>kind</code>
    </th>
    <th>
      Output signal incremented by 1 for each <i>i ∈ {1, ..., nin}</i>
      if
    </th>
  </tr>
  <tr>
    <td>
      0
    </td>
    <td>
      <code>u[i] &gt; threShold</code>
    </td>
  </tr>
  <tr>
    <td>
      1
    </td>
    <td>
      <code>u[i] ≥ threShold</code>
    </td>
  </tr>
  <tr>
    <td>
      2
    </td>
    <td>
      <code>u[i] ≤ threShold</code>
    </td>
  </tr>
  <tr>
    <td>
      3
    </td>
    <td>
      <code>u[i] &lt; threShold</code>
    </td>
  </tr>
</table>
<p>
  This model may be used to check how many rooms exceed a temperature
  threshold.
</p>
<ul>
  <li>November 21, 2011, by Michael Wetter:<br/>
    Improved documentation.
  </li>
  <li>November 25, 2008, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 7 column 2 - Warning: The summary attribute on the <table> element is obsolete in HTML5


---- AixLib/Utilities/Math/Biquadratic.mo ----
-------- HTML Code --------

 <p>
 This block computes
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   y =   a<sub>1</sub> + a<sub>2</sub>  x<sub>1</sub>
         + a<sub>3</sub>  x<sub>1</sub><sup>2</sup>
         + a<sub>4</sub>  x<sub>2</sub> + a<sub>5</sub>  x<sub>2</sub><sup>2</sup>
         + a<sub>6</sub>  x<sub>1</sub>  x<sub>2</sub>
 </p>
 
 <ul>
 <li>
 Sep. 8, 2010, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This block computes
</p>
<p align=\"center\" style=\"font-style:italic;\">
  y = a<sub>1</sub> + a<sub>2</sub> x<sub>1</sub> + a<sub>3</sub>
  x<sub>1</sub><sup>2</sup> + a<sub>4</sub> x<sub>2</sub> +
  a<sub>5</sub> x<sub>2</sub><sup>2</sup> + a<sub>6</sub> x<sub>1</sub>
  x<sub>2</sub>
</p>
<ul>
  <li>Sep. 8, 2010, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 5 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/FMI/UsersGuide.mo ----
-------- HTML Code --------

<p>
This user's guide describes the FMI package (Wetter et al., 2015).
The FMI package has been implemented to facilitate the export
of thermofluid flow models such as HVAC components, HVAC systems
and thermal zones as Functional Mockup Units (FMUs).
This allows to export thermofluid flow models as FMUs so that they can be
imported in other simulators.
To export thermofluid flow components, a Modelica block is needed
in order for the model to only have input and output signals
rather than fluid connectors, as fluid connectors do not impose any causality
on the signal flow.
This package implements such blocks and its connectors.
</p>
<p>
The main packages are as follows:
</p>
<table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\" style=\"border-collapse:collapse;\">
<tr>
  <th>Package</th><th>Description</th>
</tr>
<tr>
  <td>
  <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers\">
  AixLib.Fluid.FMI.ExportContainers</a>
  </td>
  <td>
  <p>
  Package with blocks to export thermofluid flow components and systems.
  </p>
  <p>
  To export an HVAC component or system with a single inlet and outlet port, instantiate
  <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.ReplaceableTwoPort\">
  AixLib.Fluid.FMI.ExportContainers.ReplaceableTwoPort</a>
  with a replaceable model,
  or extend from
  <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.PartialTwoPort\">
  AixLib.Fluid.FMI.ExportContainers.PartialTwoPort</a>
  and add components.<br/>
  See
  <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.Fan\">
  AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.Fan</a>
  and
  <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ResistanceVolume\">
  AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ResistanceVolume</a>.
  </p>
  <p>
  To export an HVAC system that serves a single thermal zone, extend from
  <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.HVACZone\">
  AixLib.Fluid.FMI.ExportContainers.HVACZone</a>
  and add the HVAC system.<br/>
  See
  <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.HVACZone\">
  AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.HVACZone</a>.
  </p>
  <p>
  To export an HVAC system that serves multiple thermal zones, extend from
  <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.HVACZones\">
  AixLib.Fluid.FMI.ExportContainers.HVACZones</a>
  and add the HVAC system.<br/>
  See
  <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.HVACZones\">
  AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.HVACZones</a>.
  </p>
  <p>
  To export a single thermal zone, extend from
  <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.ThermalZone\">
  AixLib.Fluid.FMI.ExportContainers.ThermalZone</a>
  and add the thermal zone.<br/>
  See
  <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZone\">
  AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZone</a>.
  </p>
  <p>
  To export multiple thermal zones, extend from
  <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.ThermalZones\">
  AixLib.Fluid.FMI.ExportContainers.ThermalZones</a>
  and add the thermal zone models.<br/>
  See
  <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZones\">
  AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZones</a>.
  </p>
  </td>
</tr>
<tr>
  <td>
  <a href=\"modelica://AixLib.Fluid.FMI.Adaptors\">
  AixLib.Fluid.FMI.Adaptors</a>
  </td>
  <td>
  <p>
  Package with adaptors to connect models with fluid ports to blocks that
  have input and output signals.
  </p>
</td>
</tr>
<tr>
<td>
  <p>
  <a href=\"modelica://AixLib.Fluid.FMI.Conversion\">
  AixLib.Fluid.FMI.Conversion</a>
  </p>
</td>
<td>
  <p>
  Package with blocks that convert between the signal connectors of
  <a href=\"modelica://AixLib.Fluid.FMI.Interfaces\">
  AixLib.Fluid.FMI.Interfaces</a>
  and the real input and output signal connectors of the Modelica Standard Library.
  </p>
</td>
</tr>
<tr>
<td>
  <a href=\"modelica://AixLib.Fluid.FMI.Interfaces\">
  AixLib.Fluid.FMI.Interfaces</a>
</td>
<td>
  <p>
  Package with composite connectors that have different input and output
  signals. These connectors are used to export FMUs, and they contain
  quantities such as mass flow rate, temperature, optional pressure, etc.
  </p>
</td>
</tr>
</table>
<p>
The package
<a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs\">
AixLib.Fluid.FMI.ExportContainers.Examples.FMUs</a>
contains various examples in which HVAC components, HVAC systems
and thermal zones are exported as an FMU.
</p>
<h4>Typical use</h4>
<p>
Users who want to export a single thermofluid flow component, or a
subsystem of thermofluid flow components, can use the block
<a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.ReplaceableTwoPort\">
AixLib.Fluid.FMI.ExportContainers.ReplaceableTwoPort</a>.
This block has a fluid inlet, a fluid outlet, and a replaceable
component that can be replaced with an HVAC component or system that
has an inlet and outlet fluid port.
</p>
<p>
Users who want to export a whole HVAC system that serves a single thermal zone
can do so by extending the partial block
<a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.HVACZone\">
AixLib.Fluid.FMI.ExportContainers.HVACZone</a>.
The example
<a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.HVACZone\">
AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.HVACZone</a>
illustrates how this can be accomplished.<br/>
Similar export containers and examples are implemented for HVAC systems that serve multiple thermal zones.
</p>
<p>
Conversely, to export a thermal zone, users can extend the partial block
<a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.ThermalZone\">
AixLib.Fluid.FMI.ExportContainers.ThermalZone</a>.
The example
<a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZone\">
AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZone</a>
illustrates how this can be accomplished.<br/>
Similar export containers and examples are implemented for models of multiple thermal zones.
</p>
<p>
Each example and validation model has a Dymola script that
either simulates the model, or exports the model as an FMU.
The script can be invoked from the pull
down menu <code>Commands -&gt; Export FMU</code>.
</p>
<h4>Options</h4>
<p>
In the
<a href=\"modelica://AixLib.Fluid\">AixLib.Fluid</a> package,
most models have a boolean parameter called <code>allowFlowReversal</code>.
If set to <code>true</code>, then the flow can be in either direction,
otherwise it needs to be from the inlet to the outlet port.
This parameter is also used in the
<a href=\"modelica://AixLib.Fluid.FMI\">AixLib.Fluid.FMI</a> package.
The package was designed in such a way that an FMU,
if exported with <code>allowFlowReversal=false</code>
has as input the mass flow rate,
pressure and fluid properties of the inflowing fluid. The outputs
are the outlet mass flow rate, outlet pressure and the fluid
properties of the outflowing medium. This allows simulators
such as Ptolemy II
to evaluate the FMUs in the direction of the mass flow by first
setting all inputs, then evaluating the model equations,
and finally retrieving the
outputs before proceeding the simulation with the next downstream
component.
If <code>allowFlowReversal=true</code>, then the connectors have additional
signals for the properties of the fluid if it flows backwards.
</p>
<p>
Most components have a boolean parameter <code>use_p_in</code>.
If <code>use_p_in=true</code>, then the pressure is used from the
connector, and based on the mass flow rate, the outlet pressure
is computed and assigned to the outlet connectors.
If <code>use_p_in=false</code>, then the pressure as declared
by the constant <code>p_default</code> of the medium model is
used, and the component computes no pressure drop.
Setting <code>use_p_in=false</code> therefore leads to fewer
equations, but it requires a component that specifies the mass
flow rate, such as
<a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.IdealSource_m_flow\">
AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.IdealSource_m_flow</a>.
</p>
<h4>Notes</h4>
<p>
Note the following when exporting HVAC component models as an FMU:
</p>
<ol>
<li>
<p>
For models with control volumes,
the mass balance must be configured using
<code>massDynamics=Modelica.Fluid.Types.Dynamics.SteadyState</code>
when used with the media
<a href=\"modelica://AixLib.Media.Air\">
AixLib.Media.Air</a>.
Otherwise, the translation stops with the error
</p>
<pre>
The model requires derivatives of some inputs as listed below:
1 inlet.p
</pre>
<p>
The reason is that for
<a href=\"modelica://AixLib.Media.Air\">
AixLib.Media.Air</a>,
mass is proportional to pressure and pressure is proportional
to density. Hence, <i>dm/dt</i> requires <i>dp/dt</i>,
but the time derivative of the pressure is not an input to the model.
</p>
<p>
For <a href=\"modelica://AixLib.Media.Water\">
AixLib.Media.Water</a>, this setting is not needed
as the mass is independent of pressure.
</p>
</li>
<li>
<p>
The model
<a href=\"modelica://AixLib.Fluid.Movers.FlowControlled_m_flow\">
AixLib.Fluid.Movers.FlowControlled_m_flow</a>
cannot be exported as an FMU.
This is because it assignes the mass flow rate.
However, the input connector
<a href=\"modelica://AixLib.Fluid.FMI.Interfaces.Inlet\">
AixLib.Fluid.FMI.Interfaces.Inlet</a>
already declares the mass flow rate as an input.
Therefore, the mass flow rate is overdetermined.
As a fall back, if a user needs to set the mass flow rate, he/she can
do so by using
<a href=\"modelica://AixLib.Fluid.FMI.Source_T\">
AixLib.Fluid.FMI.Source_T</a>,
which takes as an input signal the mass flow rate.
</p>
</li>
</ol>
<p>
When connecting fluid flow components in a loop,
be careful to avoid circular assignments for example for the temperature,
as these can of course not be simulated.
An example of such an ill-posed problem is to connect the outlet of
<a href=\"modelica://AixLib.Fluid.FixedResistances.PressureDrop\">
AixLib.Fluid.FixedResistances.PressureDrop</a>
to its inlet. In this situation, neither pressure, nor mass flow rate or temperature
can be computed. To model such loops, a control volume with a dynamic energy
balance must be presented, and the medium needs to be compressible.
</p>
<h4>References</h4>
<p>
Michael Wetter, Marcus Fuchs and Thierry Stephane Nouidui.<br/>
<a href=\"modelica://AixLib/Resources/Images/Fluid/FMI/UsersGuide/2015-WetterFuchsNouidui.pdf\">
Design choices for thermofluid flow components and systems that are exported as Functional Mockup Units</a>.<br/>
<i>Proc. of the 11th International Modelica Conference</i>,
   p. 31-41,
   Versailles, France, September 2015.
</p>

-------- Corrected Code --------
<p>
  This user's guide describes the FMI package (Wetter et al., 2015).
  The FMI package has been implemented to facilitate the export of
  thermofluid flow models such as HVAC components, HVAC systems and
  thermal zones as Functional Mockup Units (FMUs). This allows to
  export thermofluid flow models as FMUs so that they can be imported
  in other simulators. To export thermofluid flow components, a
  Modelica block is needed in order for the model to only have input
  and output signals rather than fluid connectors, as fluid connectors
  do not impose any causality on the signal flow. This package
  implements such blocks and its connectors.
</p>
<p>
  The main packages are as follows:
</p>
<table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\"
style=\"border-collapse:collapse;\">
  <tr>
    <th>
      Package
    </th>
    <th>
      Description
    </th>
  </tr>
  <tr>
    <td>
      <a href=
      \"modelica://AixLib.Fluid.FMI.ExportContainers\">AixLib.Fluid.FMI.ExportContainers</a>
    </td>
    <td>
      <p>
        Package with blocks to export thermofluid flow components and
        systems.
      </p>
      <p>
        To export an HVAC component or system with a single inlet and
        outlet port, instantiate <a href=
        \"modelica://AixLib.Fluid.FMI.ExportContainers.ReplaceableTwoPort\">
        AixLib.Fluid.FMI.ExportContainers.ReplaceableTwoPort</a> with a
        replaceable model, or extend from <a href=
        \"modelica://AixLib.Fluid.FMI.ExportContainers.PartialTwoPort\">AixLib.Fluid.FMI.ExportContainers.PartialTwoPort</a>
        and add components.<br/>
        See <a href=
        \"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.Fan\">
        AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.Fan</a> and
        <a href=
        \"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ResistanceVolume\">
        AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ResistanceVolume</a>.
      </p>
      <p>
        To export an HVAC system that serves a single thermal zone,
        extend from <a href=
        \"modelica://AixLib.Fluid.FMI.ExportContainers.HVACZone\">AixLib.Fluid.FMI.ExportContainers.HVACZone</a>
        and add the HVAC system.<br/>
        See <a href=
        \"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.HVACZone\">
        AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.HVACZone</a>.
      </p>
      <p>
        To export an HVAC system that serves multiple thermal zones,
        extend from <a href=
        \"modelica://AixLib.Fluid.FMI.ExportContainers.HVACZones\">AixLib.Fluid.FMI.ExportContainers.HVACZones</a>
        and add the HVAC system.<br/>
        See <a href=
        \"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.HVACZones\">
        AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.HVACZones</a>.
      </p>
      <p>
        To export a single thermal zone, extend from <a href=
        \"modelica://AixLib.Fluid.FMI.ExportContainers.ThermalZone\">AixLib.Fluid.FMI.ExportContainers.ThermalZone</a>
        and add the thermal zone.<br/>
        See <a href=
        \"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZone\">
        AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZone</a>.
      </p>
      <p>
        To export multiple thermal zones, extend from <a href=
        \"modelica://AixLib.Fluid.FMI.ExportContainers.ThermalZones\">AixLib.Fluid.FMI.ExportContainers.ThermalZones</a>
        and add the thermal zone models.<br/>
        See <a href=
        \"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZones\">
        AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZones</a>.
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <a href=
      \"modelica://AixLib.Fluid.FMI.Adaptors\">AixLib.Fluid.FMI.Adaptors</a>
    </td>
    <td>
      <p>
        Package with adaptors to connect models with fluid ports to
        blocks that have input and output signals.
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        <a href=
        \"modelica://AixLib.Fluid.FMI.Conversion\">AixLib.Fluid.FMI.Conversion</a>
      </p>
    </td>
    <td>
      <p>
        Package with blocks that convert between the signal connectors
        of <a href=
        \"modelica://AixLib.Fluid.FMI.Interfaces\">AixLib.Fluid.FMI.Interfaces</a>
        and the real input and output signal connectors of the Modelica
        Standard Library.
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <a href=
      \"modelica://AixLib.Fluid.FMI.Interfaces\">AixLib.Fluid.FMI.Interfaces</a>
    </td>
    <td>
      <p>
        Package with composite connectors that have different input and
        output signals. These connectors are used to export FMUs, and
        they contain quantities such as mass flow rate, temperature,
        optional pressure, etc.
      </p>
    </td>
  </tr>
</table>
<p>
  The package <a href=
  \"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs\">AixLib.Fluid.FMI.ExportContainers.Examples.FMUs</a>
  contains various examples in which HVAC components, HVAC systems and
  thermal zones are exported as an FMU.
</p>
<h4>
  Typical use
</h4>
<p>
  Users who want to export a single thermofluid flow component, or a
  subsystem of thermofluid flow components, can use the block <a href=
  \"modelica://AixLib.Fluid.FMI.ExportContainers.ReplaceableTwoPort\">AixLib.Fluid.FMI.ExportContainers.ReplaceableTwoPort</a>.
  This block has a fluid inlet, a fluid outlet, and a replaceable
  component that can be replaced with an HVAC component or system that
  has an inlet and outlet fluid port.
</p>
<p>
  Users who want to export a whole HVAC system that serves a single
  thermal zone can do so by extending the partial block <a href=
  \"modelica://AixLib.Fluid.FMI.ExportContainers.HVACZone\">AixLib.Fluid.FMI.ExportContainers.HVACZone</a>.
  The example <a href=
  \"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.HVACZone\">
  AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.HVACZone</a>
  illustrates how this can be accomplished.<br/>
  Similar export containers and examples are implemented for HVAC
  systems that serve multiple thermal zones.
</p>
<p>
  Conversely, to export a thermal zone, users can extend the partial
  block <a href=
  \"modelica://AixLib.Fluid.FMI.ExportContainers.ThermalZone\">AixLib.Fluid.FMI.ExportContainers.ThermalZone</a>.
  The example <a href=
  \"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZone\">
  AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZone</a>
  illustrates how this can be accomplished.<br/>
  Similar export containers and examples are implemented for models of
  multiple thermal zones.
</p>
<p>
  Each example and validation model has a Dymola script that either
  simulates the model, or exports the model as an FMU. The script can
  be invoked from the pull down menu <code>Commands -&gt; Export
  FMU</code>.
</p>
<h4>
  Options
</h4>
<p>
  In the <a href=\"modelica://AixLib.Fluid\">AixLib.Fluid</a> package,
  most models have a boolean parameter called
  <code>allowFlowReversal</code>. If set to <code>true</code>, then the
  flow can be in either direction, otherwise it needs to be from the
  inlet to the outlet port. This parameter is also used in the <a href=
  \"modelica://AixLib.Fluid.FMI\">AixLib.Fluid.FMI</a> package. The
  package was designed in such a way that an FMU, if exported with
  <code>allowFlowReversal=false</code> has as input the mass flow rate,
  pressure and fluid properties of the inflowing fluid. The outputs are
  the outlet mass flow rate, outlet pressure and the fluid properties
  of the outflowing medium. This allows simulators such as Ptolemy II
  to evaluate the FMUs in the direction of the mass flow by first
  setting all inputs, then evaluating the model equations, and finally
  retrieving the outputs before proceeding the simulation with the next
  downstream component. If <code>allowFlowReversal=true</code>, then
  the connectors have additional signals for the properties of the
  fluid if it flows backwards.
</p>
<p>
  Most components have a boolean parameter <code>use_p_in</code>. If
  <code>use_p_in=true</code>, then the pressure is used from the
  connector, and based on the mass flow rate, the outlet pressure is
  computed and assigned to the outlet connectors. If
  <code>use_p_in=false</code>, then the pressure as declared by the
  constant <code>p_default</code> of the medium model is used, and the
  component computes no pressure drop. Setting
  <code>use_p_in=false</code> therefore leads to fewer equations, but
  it requires a component that specifies the mass flow rate, such as
  <a href=
  \"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.IdealSource_m_flow\">
  AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.IdealSource_m_flow</a>.
</p>
<h4>
  Notes
</h4>
<p>
  Note the following when exporting HVAC component models as an FMU:
</p>
<ol>
  <li>
    <p>
      For models with control volumes, the mass balance must be
      configured using
      <code>massDynamics=Modelica.Fluid.Types.Dynamics.SteadyState</code>
      when used with the media <a href=
      \"modelica://AixLib.Media.Air\">AixLib.Media.Air</a>. Otherwise,
      the translation stops with the error
    </p>
    <pre>
The model requires derivatives of some inputs as listed below:
1 inlet.p
</pre>
    <p>
      The reason is that for <a href=
      \"modelica://AixLib.Media.Air\">AixLib.Media.Air</a>, mass is
      proportional to pressure and pressure is proportional to density.
      Hence, <i>dm/dt</i> requires <i>dp/dt</i>, but the time
      derivative of the pressure is not an input to the model.
    </p>
    <p>
      For <a href=
      \"modelica://AixLib.Media.Water\">AixLib.Media.Water</a>, this
      setting is not needed as the mass is independent of pressure.
    </p>
  </li>
  <li>
    <p>
      The model <a href=
      \"modelica://AixLib.Fluid.Movers.FlowControlled_m_flow\">AixLib.Fluid.Movers.FlowControlled_m_flow</a>
      cannot be exported as an FMU. This is because it assignes the
      mass flow rate. However, the input connector <a href=
      \"modelica://AixLib.Fluid.FMI.Interfaces.Inlet\">AixLib.Fluid.FMI.Interfaces.Inlet</a>
      already declares the mass flow rate as an input. Therefore, the
      mass flow rate is overdetermined. As a fall back, if a user needs
      to set the mass flow rate, he/she can do so by using <a href=
      \"modelica://AixLib.Fluid.FMI.Source_T\">AixLib.Fluid.FMI.Source_T</a>,
      which takes as an input signal the mass flow rate.
    </p>
  </li>
</ol>
<p>
  When connecting fluid flow components in a loop, be careful to avoid
  circular assignments for example for the temperature, as these can of
  course not be simulated. An example of such an ill-posed problem is
  to connect the outlet of <a href=
  \"modelica://AixLib.Fluid.FixedResistances.PressureDrop\">AixLib.Fluid.FixedResistances.PressureDrop</a>
  to its inlet. In this situation, neither pressure, nor mass flow rate
  or temperature can be computed. To model such loops, a control volume
  with a dynamic energy balance must be presented, and the medium needs
  to be compressible.
</p>
<h4>
  References
</h4>
<p>
  Michael Wetter, Marcus Fuchs and Thierry Stephane Nouidui.<br/>
  <a href=
  \"modelica://AixLib/Resources/Images/Fluid/FMI/UsersGuide/2015-WetterFuchsNouidui.pdf\">
  Design choices for thermofluid flow components and systems that are
  exported as Functional Mockup Units</a>.<br/>
  <i>Proc. of the 11th International Modelica Conference</i>, p. 31-41,
  Versailles, France, September 2015.
</p>

-------- Errors --------
line 18 column 1 - Warning: The summary attribute on the <table> element is obsolete in HTML5


---- AixLib/Fluid/FMI/ExportContainers/ThermalZones.mo ----
-------- HTML Code --------

     <p>
 Model that is used as a container for a multiple thermal zones
 that are to be exported as an FMU.
 </p>
 <h4>Typical use and important parameters</h4>
 <p>
 To use this model as a container for an FMU, extend
 from this model, rather than instantiate it,
 add your thermal zones. For each thermal zone,
 add a vector of mass flow rate sensors.
 By extending from this model, the top-level
 signal connectors on the left stay at the top-level, and hence
 will be visible at the FMI interface.
 </p>
 
 Note that
 <ul>
 <li>
 A vector of mass flow rate sensors is used to connect
 one element of the thermal zone adapter with one thermal zone.
 </li>
 <li>
 The size of the thermal zone adapter must be the same as the number
 of vectors of mass flow rate sensors.
 </li>
 <li>
 The vector of mass flow rate sensors must have the size <code>nPorts</code>.
 </li>
 <li>
 All fluid ports of the mass flow rate sensor must be connected.
 </li>
 <li>
 If mass flow rate sensors are not used, and your themal zone
 has fluid ports which are autosized, then a direct connection between
 an element of the thermal zone adpater <code>theZonAda</code> and your thermal
 zone will be rejected. The reason is because autosized fluid ports
 can only be connected to vector of ports whose sizes are literal.
 </li>
 </ul>
 
 <p>
 The example
 <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZones\">
 AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZones</a>
 shows how multiple simple thermal zones can be implemented and exported as
 an FMU.
 <!-- @include_Buildings
 The example
 <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.Validation.RoomHVAC\">
 AixLib.Fluid.FMI.ExportContainers.Validation.RoomHVAC</a>
 shows how such an FMU can be connected
 to an HVAC system that has signal flow.
 -->
 </p>
 
 <p>
 The conversion between the fluid ports and signal ports is done
 in the thermal zone adapter <code>theZonAda[nZon]</code>.
 This adapter has a vector of fluid ports called <code>ports[nPorts]</code>
 which needs to be connected to the air volume of the thermal zones.
 At this port, air exchanged between the thermal zones, the HVAC system
 and any infiltration flow paths.
 </p>
 <p>
 This model has input signals <code>fluPor[nZon, nPorts]</code> which carry
 the mass flow rate for each flow that is connected to <code>ports[1:nPorts]</code>
 for the respective zone, together with its
 temperature, water vapor mass fraction per total mass of the air (not per kg dry
 air), and trace substances. These quantities are always as if the flow
 enters the respective room, even if the flow is zero or negative.
 If a medium has no moisture, e.g., if <code>Medium.nXi=0</code>, or
 if it has no trace substances, e.g., if <code>Medium.nC=0</code>, then
 the output signal for these properties are removed.
 Thus, a thermal zone model that uses these signals to compute the
 heat added by the HVAC system need to implement an equation such as
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 Q<sub>sen</sub> = max(0, &#7745;<sub>sup</sub>) &nbsp; c<sub>p</sub> &nbsp; (T<sub>sup</sub> - T<sub>air,zon</sub>),
 </p>
 <p>
 where
 <i>Q<sub>sen</sub></i> is the sensible heat flow rate added to the thermal zone,
 <i>&#7745;<sub>sup</sub></i> is the supply air mass flow rate from
 the port <code>fluPor</code> (which is negative if it is an exhaust),
 <i>c<sub>p</sub></i> is the specific heat capacity at constant pressure,
 <i>T<sub>sup</sub></i> is the supply air temperature and
 <i>T<sub>air,zon</sub></i> is the zone air temperature.
 Note that without the <i>max(&middot;, &middot;)</i>, the energy
 balance would be wrong.
 For example,
 <!-- @include_Buildings
 models in the package
 <a href=\"modelica://AixLib.ThermalZones.Detailed\">
 AixLib.ThermalZones.Detailed</a> as well as
 -->
 the control volumes in
 <a href=\"modelica://AixLib.Fluid.MixingVolumes\">
 AixLib.Fluid.MixingVolumes</a>
 implement such a <i>max(&middot;, &middot;)</i> function.
 </p>
 <p>
 For each zone, its air temperature,
 water vapor mass fraction per total mass of the air (unless <code>Medium.nXi=0</code>)
 and trace substances (unless <code>Medium.nC=0</code>)
 can be obtained from the outupt connector
 <code>fluPor[1:nZon].backward</code>.
 These signals are the same as the inflowing fluid stream(s)
 at the port <code>theAdaZon[1:nZon].ports[1:nPorts]</code>.
 The fluid connector <code>ports[nPorts]</code> has a prescribed mass flow rate, but
 it does not set any pressure.
 </p>
 <p>
 This model has a user-defined parameter <code>nPorts</code>
 which sets the number of fluid ports, which in turn is used
 for the ports <code>fluPor</code> and <code>ports</code>.
 All zones must have the same number of fluid ports <code>nPorts</code>.
 All <code>nPorts</code>
 <code>ports[1:nPorts]</code> need to be connected as demonstrated in the example
 <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZones\">
 AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZones</a>.
 </p>
 <p>
 <!-- @include_Buildings
 The example
 <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.Validation.RoomHVAC\">
 AixLib.Fluid.FMI.ExportContainers.Validation.RoomHVAC</a>
 shows conceptually how such an FMU can then be connected to a HVAC system
 that has signal flow.
 -->
 </p>
 
 <ul>
 <li>
 January 18, 2019, by Jianjun Hu:<br/>
 Limited the media choice to moist air.
 See <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1050\">#1050</a>.
 </li>
 <li>
 September 20, 2016, by Thierry S. Nouidui:<br/>
 Revised documentation to explain the rationale
 of needing mass flow rate sensors.
 </li>
 <li>
 June 29, 2016, by Michael Wetter:<br/>
 Revised implementation and documentation.
 </li>
 <li>
 April 27, 2016, by Thierry S. Nouidui:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Model that is used as a container for a multiple thermal zones that
  are to be exported as an FMU.
</p>
<h4>
  Typical use and important parameters
</h4>
<p>
  To use this model as a container for an FMU, extend from this model,
  rather than instantiate it, add your thermal zones. For each thermal
  zone, add a vector of mass flow rate sensors. By extending from this
  model, the top-level signal connectors on the left stay at the
  top-level, and hence will be visible at the FMI interface.
</p>Note that
<ul>
  <li>A vector of mass flow rate sensors is used to connect one element
  of the thermal zone adapter with one thermal zone.
  </li>
  <li>The size of the thermal zone adapter must be the same as the
  number of vectors of mass flow rate sensors.
  </li>
  <li>The vector of mass flow rate sensors must have the size
  <code>nPorts</code>.
  </li>
  <li>All fluid ports of the mass flow rate sensor must be connected.
  </li>
  <li>If mass flow rate sensors are not used, and your themal zone has
  fluid ports which are autosized, then a direct connection between an
  element of the thermal zone adpater <code>theZonAda</code> and your
  thermal zone will be rejected. The reason is because autosized fluid
  ports can only be connected to vector of ports whose sizes are
  literal.
  </li>
</ul>
<p>
  The example <a href=
  \"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZones\">
  AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZones</a>
  shows how multiple simple thermal zones can be implemented and
  exported as an FMU. <!-- @include_Buildings
 The example
 <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.Validation.RoomHVAC\">
 AixLib.Fluid.FMI.ExportContainers.Validation.RoomHVAC</a>
 shows how such an FMU can be connected
 to an HVAC system that has signal flow.
 -->
</p>
<p>
  The conversion between the fluid ports and signal ports is done in
  the thermal zone adapter <code>theZonAda[nZon]</code>. This adapter
  has a vector of fluid ports called <code>ports[nPorts]</code> which
  needs to be connected to the air volume of the thermal zones. At this
  port, air exchanged between the thermal zones, the HVAC system and
  any infiltration flow paths.
</p>
<p>
  This model has input signals <code>fluPor[nZon, nPorts]</code> which
  carry the mass flow rate for each flow that is connected to
  <code>ports[1:nPorts]</code> for the respective zone, together with
  its temperature, water vapor mass fraction per total mass of the air
  (not per kg dry air), and trace substances. These quantities are
  always as if the flow enters the respective room, even if the flow is
  zero or negative. If a medium has no moisture, e.g., if
  <code>Medium.nXi=0</code>, or if it has no trace substances, e.g., if
  <code>Medium.nC=0</code>, then the output signal for these properties
  are removed. Thus, a thermal zone model that uses these signals to
  compute the heat added by the HVAC system need to implement an
  equation such as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  Q<sub>sen</sub> = max(0, ṁ<sub>sup</sub>) &#160; c<sub>p</sub> &#160;
  (T<sub>sup</sub> - T<sub>air,zon</sub>),
</p>
<p>
  where <i>Q<sub>sen</sub></i> is the sensible heat flow rate added to
  the thermal zone, <i>ṁ<sub>sup</sub></i> is the supply air mass flow
  rate from the port <code>fluPor</code> (which is negative if it is an
  exhaust), <i>c<sub>p</sub></i> is the specific heat capacity at
  constant pressure, <i>T<sub>sup</sub></i> is the supply air
  temperature and <i>T<sub>air,zon</sub></i> is the zone air
  temperature. Note that without the <i>max(·, ·)</i>, the energy
  balance would be wrong. For example, <!-- @include_Buildings
 models in the package
 <a href=\"modelica://AixLib.ThermalZones.Detailed\">
 AixLib.ThermalZones.Detailed</a> as well as
 -->
   the control volumes in <a href=
  \"modelica://AixLib.Fluid.MixingVolumes\">AixLib.Fluid.MixingVolumes</a>
  implement such a <i>max(·, ·)</i> function.
</p>
<p>
  For each zone, its air temperature, water vapor mass fraction per
  total mass of the air (unless <code>Medium.nXi=0</code>) and trace
  substances (unless <code>Medium.nC=0</code>) can be obtained from the
  outupt connector <code>fluPor[1:nZon].backward</code>. These signals
  are the same as the inflowing fluid stream(s) at the port
  <code>theAdaZon[1:nZon].ports[1:nPorts]</code>. The fluid connector
  <code>ports[nPorts]</code> has a prescribed mass flow rate, but it
  does not set any pressure.
</p>
<p>
  This model has a user-defined parameter <code>nPorts</code> which
  sets the number of fluid ports, which in turn is used for the ports
  <code>fluPor</code> and <code>ports</code>. All zones must have the
  same number of fluid ports <code>nPorts</code>. All
  <code>nPorts</code> <code>ports[1:nPorts]</code> need to be connected
  as demonstrated in the example <a href=
  \"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZones\">
  AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZones</a>.
</p>
<p>
  <!-- @include_Buildings
 The example
 <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.Validation.RoomHVAC\">
 AixLib.Fluid.FMI.ExportContainers.Validation.RoomHVAC</a>
 shows conceptually how such an FMU can then be connected to a HVAC system
 that has signal flow.
 -->
</p>
<ul>
  <li>January 18, 2019, by Jianjun Hu:<br/>
    Limited the media choice to moist air. See <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1050\">#1050</a>.
  </li>
  <li>September 20, 2016, by Thierry S. Nouidui:<br/>
    Revised documentation to explain the rationale of needing mass flow
    rate sensors.
  </li>
  <li>June 29, 2016, by Michael Wetter:<br/>
    Revised implementation and documentation.
  </li>
  <li>April 27, 2016, by Thierry S. Nouidui:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 78 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/ThermalZones/ReducedOrder/RC/TwoElements.mo ----
-------- HTML Code --------

 <ul>
 <li>
 March 7, 2022, by Michael Wetter:<br/>
 Removed <code>massDynamics</code>.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1542\">#1542</a>.
 </li>
 <li>
 July 11, 2019, by Katharina Brinkmann:<br/>
 Renamed <code>alphaInt</code> to <code>hConInt</code>,
 <code>alphaIntWall</code> to <code>hConIntWall</code>
 </li>
 <li>
 January 25, 2019, by Michael Wetter:<br/>
 Added start value to avoid warning in JModelica.
 </li>
 <li>
 April 18, 2015, by Moritz Lauster:<br/>
 First implementation.
 </li>
 </ul>
 
   <p>This model distinguishes between internal
   thermal masses and exterior walls. While exterior walls contribute to heat
   transfer to the ambient, adiabatic conditions apply to internal masses.
   Parameters for the internal wall element are the length of the RC-chain
   <code>nInt</code>, the vector of the capacities
   <code>CInt[nInt]</code> and the vector of the resistances <code>RInt[nInt]</code>.
   This approach allows considering the dynamic behaviour induced by internal
   heat storage.
   </p>
   <p>
   The image below shows the RC-network of this model.
   </p>
   <p align=\"center\">
   <img src=\"modelica://AixLib/Resources/Images/ThermalZones/ReducedOrder/RC/TwoElements.png\" alt=\"image\"/>
   </p>
   
-------- Corrected Code --------
<ul>
  <li>March 7, 2022, by Michael Wetter:<br/>
    Removed <code>massDynamics</code>.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1542\">#1542</a>.
  </li>
  <li>July 11, 2019, by Katharina Brinkmann:<br/>
    Renamed <code>alphaInt</code> to <code>hConInt</code>,
    <code>alphaIntWall</code> to <code>hConIntWall</code>
  </li>
  <li>January 25, 2019, by Michael Wetter:<br/>
    Added start value to avoid warning in JModelica.
  </li>
  <li>April 18, 2015, by Moritz Lauster:<br/>
    First implementation.
  </li>
</ul>
<p>
  This model distinguishes between internal thermal masses and exterior
  walls. While exterior walls contribute to heat transfer to the
  ambient, adiabatic conditions apply to internal masses. Parameters
  for the internal wall element are the length of the RC-chain
  <code>nInt</code>, the vector of the capacities
  <code>CInt[nInt]</code> and the vector of the resistances
  <code>RInt[nInt]</code>. This approach allows considering the dynamic
  behaviour induced by internal heat storage.
</p>
<p>
  The image below shows the RC-network of this model.
</p>
<p align=\"center\">
  <img src=
  \"modelica://AixLib/Resources/Images/ThermalZones/ReducedOrder/RC/TwoElements.png\"
  alt=\"image\">
</p>

-------- Errors --------
line 14 column 4 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Utilities/Math/Polynomial.mo ----
-------- HTML Code --------

 <p>This block computes a polynomial of arbitrary order. The polynomial has the form </p>
 <p align=\"center\"><i>y = a1 + a2 x + a3 x2 + ... </i></p>
 
 <ul>
 <li>
 September 21, 2021, by Michael Wetter:<br/>
 Renamed class to correct typo in class name.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1524\">IBPSA, #1524</a>.
 </li>
 <li>
 November 28, 2013, by Marcus Fuchs:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This block computes a polynomial of arbitrary order. The polynomial
  has the form
</p>
<p align=\"center\">
  <i>y = a1 + a2 x + a3 x2 + ...</i>
</p>
<ul>
  <li>September 21, 2021, by Michael Wetter:<br/>
    Renamed class to correct typo in class name.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1524\">IBPSA,
    #1524</a>.
  </li>
  <li>November 28, 2013, by Marcus Fuchs:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 3 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Humidifiers/SprayAirWasher_X.mo ----
-------- HTML Code --------

 <p>
 Model for a spray air washer with a prescribed outlet water vapor mass fraction
 in kg/kg total air.
 </p>
 <p>
 This model forces the outlet water mass fraction at <code>port_b</code> to be
 no lower than the
 input signal <code>X_wSet</code>, subject to optional limits on the
 maximum water vapor mass flow rate that is added, as
 described by the parameter <code>mWatMax_flow</code>.
 By default, the model has unlimited capacity.
 </p>
 <p>
 The output signal <code>mWat_flow &ge; 0</code> is the moisture added
 to the medium if the flow rate is from <code>port_a</code> to <code>port_b</code>.
 If the flow is reversed, then <code>mWat_flow = 0</code>.
 The outlet specific enthalpy at <code>port_b</code> is increased by
 the enthalpy of liquid water at <i>10</i>&deg;C times the mass of water that was added.
 Therefore, the temperature of the leaving fluid is below the inlet temperature.
 </p>
 <p>
 The outlet conditions at <code>port_a</code> are not affected by this model,
 other than for a possible pressure difference due to flow friction.
 </p>
 <p>
 If the parameter <code>energyDynamics</code> is different from
 <code>Modelica.Fluid.Types.Dynamics.SteadyState</code>,
 the component models the dynamic response using a first order differential equation.
 The time constant of the component is equal to the parameter <code>tau</code>.
 This time constant is adjusted based on the mass flow rate using
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 &tau;<sub>eff</sub> = &tau; |m&#775;| &frasl; m&#775;<sub>nom</sub>
 </p>
 <p>
 where
 <i>&tau;<sub>eff</sub></i> is the effective time constant for the given mass flow rate
 <i>m&#775;</i> and
 <i>&tau;</i> is the time constant at the nominal mass flow rate
 <i>m&#775;<sub>nom</sub></i>.
 This type of dynamics is equal to the dynamics that a completely mixed
 control volume would have.
 </p>
 <p>
 Optionally, this model can have a flow resistance.
 Set <code>dp_nominal = 0</code> to disable the flow friction calculation.
 </p>
 <p>
 For a model that uses a control signal <i>u &isin; [0, 1]</i> and multiplies
 this with the nominal water mass flow rate, use
 <a href=\"modelica://AixLib.Fluid.Humidifiers.Humidifier_u\">
 AixLib.Fluid.Humidifiers.Humidifier_u</a>
 
 </p>
 <h4>Limitations</h4>
 <p>
 This model only adds water vapor for the flow from
 <code>port_a</code> to <code>port_b</code>.
 The water vapor of the reverse flow is not affected by this model.
 </p>
 <p>
 This model does not affect the enthalpy of the air. Therefore,
 if water is added, the temperature will decrease, e.g., the humidification
 is adiabatic.
 </p>
 
 <ul>
 <li>
 March 8, 2022, by Michael Wetter:<br/>
 Renamed parameter <code>massDynamics</code> to <code>energyDynamics</code> for consistency with other models.
 </li>
 <li>
 December 14, 2018, by Michael Wetter:<br/>
 Restricted base class for medium to one that implements
 the function <code>enthalpyOfLiquid</code>.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1057\">#1057</a>.
 </li>
 <li>
 May 3, 2017, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Model for a spray air washer with a prescribed outlet water vapor
  mass fraction in kg/kg total air.
</p>
<p>
  This model forces the outlet water mass fraction at
  <code>port_b</code> to be no lower than the input signal
  <code>X_wSet</code>, subject to optional limits on the maximum water
  vapor mass flow rate that is added, as described by the parameter
  <code>mWatMax_flow</code>. By default, the model has unlimited
  capacity.
</p>
<p>
  The output signal <code>mWat_flow ≥ 0</code> is the moisture added to
  the medium if the flow rate is from <code>port_a</code> to
  <code>port_b</code>. If the flow is reversed, then <code>mWat_flow =
  0</code>. The outlet specific enthalpy at <code>port_b</code> is
  increased by the enthalpy of liquid water at <i>10</i>°C times the
  mass of water that was added. Therefore, the temperature of the
  leaving fluid is below the inlet temperature.
</p>
<p>
  The outlet conditions at <code>port_a</code> are not affected by this
  model, other than for a possible pressure difference due to flow
  friction.
</p>
<p>
  If the parameter <code>energyDynamics</code> is different from
  <code>Modelica.Fluid.Types.Dynamics.SteadyState</code>, the component
  models the dynamic response using a first order differential
  equation. The time constant of the component is equal to the
  parameter <code>tau</code>. This time constant is adjusted based on
  the mass flow rate using
</p>
<p align=\"center\" style=\"font-style:italic;\">
  τ<sub>eff</sub> = τ |ṁ| ⁄ ṁ<sub>nom</sub>
</p>
<p>
  where <i>τ<sub>eff</sub></i> is the effective time constant for the
  given mass flow rate <i>ṁ</i> and <i>τ</i> is the time constant at
  the nominal mass flow rate <i>ṁ<sub>nom</sub></i>. This type of
  dynamics is equal to the dynamics that a completely mixed control
  volume would have.
</p>
<p>
  Optionally, this model can have a flow resistance. Set
  <code>dp_nominal = 0</code> to disable the flow friction calculation.
</p>
<p>
  For a model that uses a control signal <i>u ∈ [0, 1]</i> and
  multiplies this with the nominal water mass flow rate, use <a href=
  \"modelica://AixLib.Fluid.Humidifiers.Humidifier_u\">AixLib.Fluid.Humidifiers.Humidifier_u</a>
</p>
<h4>
  Limitations
</h4>
<p>
  This model only adds water vapor for the flow from
  <code>port_a</code> to <code>port_b</code>. The water vapor of the
  reverse flow is not affected by this model.
</p>
<p>
  This model does not affect the enthalpy of the air. Therefore, if
  water is added, the temperature will decrease, e.g., the
  humidification is adiabatic.
</p>
<ul>
  <li>March 8, 2022, by Michael Wetter:<br/>
    Renamed parameter <code>massDynamics</code> to
    <code>energyDynamics</code> for consistency with other models.
  </li>
  <li>December 14, 2018, by Michael Wetter:<br/>
    Restricted base class for medium to one that implements the
    function <code>enthalpyOfLiquid</code>.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1057\">#1057</a>.
  </li>
  <li>May 3, 2017, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 33 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Movers/BaseClasses/Characteristics/pressure.mo ----
-------- HTML Code --------

 <p>
 This function computes the fan static
 pressure raise as a function of volume flow rate and revolution in the form
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   &Delta;p = r<sub>N</sub><sup>2</sup> &nbsp; s(V&#775;/r<sub>N</sub>, d),
 </p>
 <p>
 where
 <i>&Delta;p</i> is the pressure rise,
 <i>r<sub>N</sub></i> is the normalized fan speed,
 <i>V&#775;</i> is the volume flow rate and
 <i>d</i> are performance data for fan or pump power consumption at <i>r<sub>N</sub>=1</i>.
 </p>
 <h4>Implementation</h4>
 <p>
 The function <i>s(&middot;, &middot;)</i> is a cubic hermite spline.
 If the data <i>d</i> define a monotone decreasing sequence, then
 <i>s(&middot;, d)</i> is a monotone decreasing function.
 </p>
 <p>
 The function allows <i>r<sub>N</sub></i> to be zero.
 </p>
 
 <ul>
 <li>
 September 8, 2016, by Michael Wetter and Filip Jorissen:<br/>
 Changed implementation to allow <code>r_N = 0</code>.<br/>
 This is
 for <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/458\">#458</a>.
 </li>
 <li>
 September 7, 2016, by Michael Wetter:<br/>
 Moved function which was a protected function to make it public, as it
 is now called by
 <a href=\"modelica://AixLib.Fluid.Movers.BaseClasses.FlowMachineInterface\">
 AixLib.Fluid.Movers.BaseClasses.FlowMachineInterface</a>.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This function computes the fan static pressure raise as a function of
  volume flow rate and revolution in the form
</p>
<p align=\"center\" style=\"font-style:italic;\">
  Δp = r<sub>N</sub><sup>2</sup> &#160; s(V̇/r<sub>N</sub>, d),
</p>
<p>
  where <i>Δp</i> is the pressure rise, <i>r<sub>N</sub></i> is the
  normalized fan speed, <i>V̇</i> is the volume flow rate and <i>d</i>
  are performance data for fan or pump power consumption at
  <i>r<sub>N</sub>=1</i>.
</p>
<h4>
  Implementation
</h4>
<p>
  The function <i>s(·, ·)</i> is a cubic hermite spline. If the data
  <i>d</i> define a monotone decreasing sequence, then <i>s(·, d)</i>
  is a monotone decreasing function.
</p>
<p>
  The function allows <i>r<sub>N</sub></i> to be zero.
</p>
<ul>
  <li>September 8, 2016, by Michael Wetter and Filip Jorissen:<br/>
    Changed implementation to allow <code>r_N = 0</code>.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/458\">#458</a>.
  </li>
  <li>September 7, 2016, by Michael Wetter:<br/>
    Moved function which was a protected function to make it public, as
    it is now called by <a href=
    \"modelica://AixLib.Fluid.Movers.BaseClasses.FlowMachineInterface\">AixLib.Fluid.Movers.BaseClasses.FlowMachineInterface</a>.
  </li>
</ul>

-------- Errors --------
line 6 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/BoundaryConditions/Validation/BESTEST/WD300.mo ----
-------- HTML Code --------

 <ul>
 <li>
 September 6, 2021, by Ettore Zanetti:<br/>
 Removed parameter <code>lat</code> as it is now obtained from the weather data bus.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1477\">IBPSA, #1477</a>.
 </li>
 <li>
 March 11, 2020, by Ettore Zanetti:<br/>
 First implementation.
 </li>
 <li>
 April 14, 2020, by Ettore Zanetti:<br/>
 Rework after comments from pull request
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/pull/1339\">#1339</a>.
 </li>
 <li>
 May 2, 2021, by Ettore Zanetti:<br/>
 Updated weather file as explained in <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1478\">#1478</a>.
 </li>
 </ul>
 
 <h4>WD300: Southern Hemisphere Case</h4>
 <p>Weather data file : WD300.epw</p>
 <p><i>Table 1: Site Data for Weather file WD300.epw</i></p>
 <table summary=\"Site Data for Weather file WD300.epw\" cellspacing=\"2\" cellpadding=\"0\" border=\"1\"><tr>
 <td><p>Latitude</p></td>
 <td><p>33.393&deg; south</p></td>
 </tr>
 <tr>
 <td><p>Longitude</p></td>
 <td><p>70.786&deg; west</p></td>
 </tr>
 <tr>
 <td><p>Altitude</p></td>
 <td><p>474 m</p></td>
 </tr>
 <tr>
 <td><p>Time Zone</p></td>
 <td><p>-4</p></td>
 </tr>
 </table>
 
-------- Corrected Code --------
<ul>
  <li>September 6, 2021, by Ettore Zanetti:<br/>
    Removed parameter <code>lat</code> as it is now obtained from the
    weather data bus.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1477\">IBPSA,
    #1477</a>.
  </li>
  <li>March 11, 2020, by Ettore Zanetti:<br/>
    First implementation.
  </li>
  <li>April 14, 2020, by Ettore Zanetti:<br/>
    Rework after comments from pull request <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/pull/1339\">#1339</a>.
  </li>
  <li>May 2, 2021, by Ettore Zanetti:<br/>
    Updated weather file as explained in <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1478\">#1478</a>.
  </li>
</ul>
<h4>
  WD300: Southern Hemisphere Case
</h4>
<p>
  Weather data file : WD300.epw
</p>
<p>
  <i>Table 1: Site Data for Weather file WD300.epw</i>
</p>
<table summary=\"Site Data for Weather file WD300.epw\" cellspacing=\"2\"
cellpadding=\"0\" border=\"1\">
  <tr>
    <td>
      <p>
        Latitude
      </p>
    </td>
    <td>
      <p>
        33.393° south
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        Longitude
      </p>
    </td>
    <td>
      <p>
        70.786° west
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        Altitude
      </p>
    </td>
    <td>
      <p>
        474 m
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        Time Zone
      </p>
    </td>
    <td>
      <p>
        -4
      </p>
    </td>
  </tr>
</table>

-------- Errors --------
line 5 column 2 - Warning: The summary attribute on the <table> element is obsolete in HTML5


---- AixLib/Fluid/Geothermal/Borefields/BaseClasses/HeatTransfer/ThermalResponseFactors/gFunction.mo ----
-------- HTML Code --------

 <p>
 This function implements the <i>g</i>-function evaluation method introduced by
 Cimmino and Bernier (see: Cimmino and Bernier (2014), and Cimmino (2018)) based
 on the <i>g</i>-function function concept first introduced by Eskilson (1987).
 The <i>g</i>-function gives the relation between the variation of the borehole
 wall temperature at a time <i>t</i> and the heat extraction and injection rates
 at all times preceding time <i>t</i> as
 </p>
 <p align=\"center\">
 <img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/GFunction_01.png\" />
 </p>
 <p>
 where <i>T<sub>b</sub></i> is the borehole wall temperature,
 <i>T<sub>g</sub></i> is the undisturbed ground temperature, <i>Q</i> is the
 heat injection rate into the ground through the borehole wall per unit borehole
 length, <i>k<sub>s</sub></i> is the soil thermal conductivity and <i>g</i> is
 the <i>g</i>-function.
 </p>
 <p>
 The <i>g</i>-function is constructed from the combination of the combination of
 the finite line source (FLS) solution (see
 <a href=\"modelica://AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.ThermalResponseFactors.finiteLineSource\">
 AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.ThermalResponseFactors.finiteLineSource</a>),
 the cylindrical heat source (CHS) solution (see
 <a href=\"modelica://AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.ThermalResponseFactors.cylindricalHeatSource\">
 AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.ThermalResponseFactors.cylindricalHeatSource</a>),
 and the infinite line source (ILS) solution (see
 <a href=\"modelica://AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.ThermalResponseFactors.infiniteLineSource\">
 AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.ThermalResponseFactors.infiniteLineSource</a>).
 To obtain the <i>g</i>-function of a bore field, each borehole is divided into a
 series of <code>nSeg</code> segments of equal length, each modeled as a line
 source of finite length. The finite line source solution is superimposed in
 space to obtain a system of equations that gives the relation between the heat
 injection rate at each of the segments and the borehole wall temperature at each
 of the segments. The system is solved to obtain the uniform borehole wall
 temperature required at any time to maintain a constant total heat injection
 rate (<i>Q<sub>tot</sub> = 2&pi;k<sub>s</sub>H<sub>tot</sub>)</i> into the bore
 field. The uniform borehole wall temperature is then equal to the finite line
 source based <i>g</i>-function.
 </p>
 <p>
 Since this <i>g</i>-function is based on line sources of heat, rather than
 cylinders, the <i>g</i>-function is corrected to consider the cylindrical
 geometry. The correction factor is then the difference between the cylindrical
 heat source solution and the infinite line source solution, as proposed by
 Li et al. (2014) as
 </p>
 <p align=\"center\">
 <i>g(t) = g<sub>FLS</sub> + (g<sub>CHS</sub> - g<sub>ILS</sub>)</i>
 </p>
 <h4>Implementation</h4>
 <p>
 The calculation of the <i>g</i>-function is separated into two regions: the
 short-time region and the long-time region. In the short-time region,
 corresponding to times <i>t</i> &lt; 1 hour, heat interaction between boreholes
 and axial variations of heat injection rate are not considered. The
 <i>g</i>-function is calculated using only one borehole and one segment. In the
 long-time region, corresponding to times <i>t</i> &gt; 1 hour, all boreholes
 are represented as series of <code>nSeg</code> line segments and the
 <i>g</i>-function is evaluated as described above.
 </p>
 <h4>References</h4>
 <p>
 Cimmino, M. and Bernier, M. 2014. <i>A semi-analytical method to generate
 g-functions for geothermal bore fields</i>. International Journal of Heat and
 Mass Transfer 70: 641-650.
 </p>
 <p>
 Cimmino, M. 2018. <i>Fast calculation of the g-functions of geothermal borehole
 fields using similarities in the evaluation of the finite line source
 solution</i>. Journal of Building Performance Simulation. DOI:
 10.1080/19401493.2017.1423390.
 </p>
 <p>
 Eskilson, P. 1987. <i>Thermal analysis of heat extraction boreholes</i>. Ph.D.
 Thesis. Department of Mathematical Physics. University of Lund. Sweden.
 </p>
 <p>
 Li, M., Li, P., Chan, V. and Lai, A.C.K. 2014. <i>Full-scale temperature
 response function (G-function) for heat transfer by borehole heat exchangers
 (GHEs) from sub-hour to decades</i>. Applied Energy 136: 197-205.
 </p>
 
 <ul>
 <li>
 March 22, 2018 by Massimo Cimmino:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This function implements the <i>g</i>-function evaluation method
  introduced by Cimmino and Bernier (see: Cimmino and Bernier (2014),
  and Cimmino (2018)) based on the <i>g</i>-function function concept
  first introduced by Eskilson (1987). The <i>g</i>-function gives the
  relation between the variation of the borehole wall temperature at a
  time <i>t</i> and the heat extraction and injection rates at all
  times preceding time <i>t</i> as
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/GFunction_01.png\">
</p>
<p>
  where <i>T<sub>b</sub></i> is the borehole wall temperature,
  <i>T<sub>g</sub></i> is the undisturbed ground temperature, <i>Q</i>
  is the heat injection rate into the ground through the borehole wall
  per unit borehole length, <i>k<sub>s</sub></i> is the soil thermal
  conductivity and <i>g</i> is the <i>g</i>-function.
</p>
<p>
  The <i>g</i>-function is constructed from the combination of the
  combination of the finite line source (FLS) solution (see <a href=
  \"modelica://AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.ThermalResponseFactors.finiteLineSource\">
  AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.ThermalResponseFactors.finiteLineSource</a>),
  the cylindrical heat source (CHS) solution (see <a href=
  \"modelica://AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.ThermalResponseFactors.cylindricalHeatSource\">
  AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.ThermalResponseFactors.cylindricalHeatSource</a>),
  and the infinite line source (ILS) solution (see <a href=
  \"modelica://AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.ThermalResponseFactors.infiniteLineSource\">
  AixLib.Fluid.Geothermal.Borefields.BaseClasses.HeatTransfer.ThermalResponseFactors.infiniteLineSource</a>).
  To obtain the <i>g</i>-function of a bore field, each borehole is
  divided into a series of <code>nSeg</code> segments of equal length,
  each modeled as a line source of finite length. The finite line
  source solution is superimposed in space to obtain a system of
  equations that gives the relation between the heat injection rate at
  each of the segments and the borehole wall temperature at each of the
  segments. The system is solved to obtain the uniform borehole wall
  temperature required at any time to maintain a constant total heat
  injection rate (<i>Q<sub>tot</sub> =
  2πk<sub>s</sub>H<sub>tot</sub>)</i> into the bore field. The uniform
  borehole wall temperature is then equal to the finite line source
  based <i>g</i>-function.
</p>
<p>
  Since this <i>g</i>-function is based on line sources of heat, rather
  than cylinders, the <i>g</i>-function is corrected to consider the
  cylindrical geometry. The correction factor is then the difference
  between the cylindrical heat source solution and the infinite line
  source solution, as proposed by Li et al. (2014) as
</p>
<p align=\"center\">
  <i>g(t) = g<sub>FLS</sub> + (g<sub>CHS</sub> - g<sub>ILS</sub>)</i>
</p>
<h4>
  Implementation
</h4>
<p>
  The calculation of the <i>g</i>-function is separated into two
  regions: the short-time region and the long-time region. In the
  short-time region, corresponding to times <i>t</i> &lt; 1 hour, heat
  interaction between boreholes and axial variations of heat injection
  rate are not considered. The <i>g</i>-function is calculated using
  only one borehole and one segment. In the long-time region,
  corresponding to times <i>t</i> &gt; 1 hour, all boreholes are
  represented as series of <code>nSeg</code> line segments and the
  <i>g</i>-function is evaluated as described above.
</p>
<h4>
  References
</h4>
<p>
  Cimmino, M. and Bernier, M. 2014. <i>A semi-analytical method to
  generate g-functions for geothermal bore fields</i>. International
  Journal of Heat and Mass Transfer 70: 641-650.
</p>
<p>
  Cimmino, M. 2018. <i>Fast calculation of the g-functions of
  geothermal borehole fields using similarities in the evaluation of
  the finite line source solution</i>. Journal of Building Performance
  Simulation. DOI: 10.1080/19401493.2017.1423390.
</p>
<p>
  Eskilson, P. 1987. <i>Thermal analysis of heat extraction
  boreholes</i>. Ph.D. Thesis. Department of Mathematical Physics.
  University of Lund. Sweden.
</p>
<p>
  Li, M., Li, P., Chan, V. and Lai, A.C.K. 2014. <i>Full-scale
  temperature response function (G-function) for heat transfer by
  borehole heat exchangers (GHEs) from sub-hour to decades</i>. Applied
  Energy 136: 197-205.
</p>
<ul>
  <li>March 22, 2018 by Massimo Cimmino:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 10 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 49 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/BoundaryConditions/Validation/BESTEST/WD200.mo ----
-------- HTML Code --------

 <ul>
 <li>
 September 6, 2021, by Ettore Zanetti:<br/>
 Removed parameter <code>lat</code> as it is now obtained from the weather data bus.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1477\">IBPSA, #1477</a>.
 </li>
 <li>
 March 11, 2020, by Ettore Zanetti:<br/>
 First implementation.
 </li>
 <li>
 April 14, 2020, by Ettore Zanetti:<br/>
 Rework after comments from pull request
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/pull/1339\">#1339</a>.
 </li>
 <li>
 May 2, 2021, by Ettore Zanetti:<br/>
 Updated weather file as explained in <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1478\">#1478</a>.
 </li>
 </ul>
 
 <h4>WD200: Low Elevation, Hot and Humid Case.</h4>
 <p>Weather data file : WD200.epw</p>
 <p><i>Table 1: Site Data for Weather file WD200.epw</i></p>
 <table summary=\"Site Data for Weather file WD200.epw\"cellspacing=\"2\" cellpadding=\"0\" border=\"1\"><tr>
 <td><p>Latitude</p></td>
 <td><p>33.633&deg; north</p></td>
 </tr>
 <tr>
 <td><p>Longitude</p></td>
 <td><p>84.433&deg; west</p></td>
 </tr>
 <tr>
 <td><p>Altitude</p></td>
 <td><p>308 m</p></td>
 </tr>
 <tr>
 <td><p>Time Zone</p></td>
 <td><p>-5</p></td>
 </tr>
 </table>
 
-------- Corrected Code --------
<ul>
  <li>September 6, 2021, by Ettore Zanetti:<br/>
    Removed parameter <code>lat</code> as it is now obtained from the
    weather data bus.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1477\">IBPSA,
    #1477</a>.
  </li>
  <li>March 11, 2020, by Ettore Zanetti:<br/>
    First implementation.
  </li>
  <li>April 14, 2020, by Ettore Zanetti:<br/>
    Rework after comments from pull request <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/pull/1339\">#1339</a>.
  </li>
  <li>May 2, 2021, by Ettore Zanetti:<br/>
    Updated weather file as explained in <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1478\">#1478</a>.
  </li>
</ul>
<h4>
  WD200: Low Elevation, Hot and Humid Case.
</h4>
<p>
  Weather data file : WD200.epw
</p>
<p>
  <i>Table 1: Site Data for Weather file WD200.epw</i>
</p>
<table summary=\"Site Data for Weather file WD200.epw\" cellspacing=\"2\"
cellpadding=\"0\" border=\"1\">
  <tr>
    <td>
      <p>
        Latitude
      </p>
    </td>
    <td>
      <p>
        33.633° north
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        Longitude
      </p>
    </td>
    <td>
      <p>
        84.433° west
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        Altitude
      </p>
    </td>
    <td>
      <p>
        308 m
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <p>
        Time Zone
      </p>
    </td>
    <td>
      <p>
        -5
      </p>
    </td>
  </tr>
</table>

-------- Errors --------
line 5 column 2 - Warning: The summary attribute on the <table> element is obsolete in HTML5


---- AixLib/Fluid/HeatPumps/Compressors/ReciprocatingCompressor.mo ----
-------- HTML Code --------

 <p>
 Model for a reciprocating processor, as detailed in Jin (2002). The rate of heat transferred to the evaporator is given by:
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 Q&#775;<sub>Eva</sub> = m&#775;<sub>ref</sub> ( h<sub>Vap</sub>(T<sub>Eva</sub>) - h<sub>Liq</sub>(T<sub>Con</sub>) ).
 </p>
 <p>
 The power consumed by the compressor is given by a linear efficiency relation:
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 P = P<sub>Theoretical</sub> / &eta; + P<sub>Loss,constant</sub>.
 </p>
 <p>
 Variable speed is acheived by multiplying the full load piston displacement
 by the normalized compressor speed. The power and heat transfer rates are forced
 to zero if the resulting heat pump state has higher evaporating pressure than
 condensing pressure.
 </p>
 <h4>Assumptions and limitations</h4>
 <p>
 The compression process is assumed isentropic. The thermal energy
 of superheating is ignored in the evaluation of the heat transferred to the refrigerant
 in the evaporator. There is no supercooling.
 </p>
 <h4>References</h4>
 <p>
 H. Jin.
 <i>
 Parameter estimation based models of water source heat pumps.
 </i>
 PhD Thesis. Oklahoma State University. Stillwater, Oklahoma, USA. 2002.
 </p>
 
 <ul>
 <li>
 January 25, 2019, by Michael Wetter:<br/>
 Added start value to avoid warning in JModelica.
 </li>
 <li>
 May 30, 2017, by Filip Jorissen:<br/>
 Removed <code>pressure_error</code> as
 this is replaced by
 <a href=\"modelica://AixLib.Fluid.HeatPumps.Compressors.BaseClasses.TemperatureProtection\">
 AixLib.Fluid.HeatPumps.Compressors.BaseClasses.TemperatureProtection</a>.
 See <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/769\">#769</a>.
 </li>
 <li>
 November 14, 2016, by Massimo Cimmino:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Model for a reciprocating processor, as detailed in Jin (2002). The
  rate of heat transferred to the evaporator is given by:
</p>
<p align=\"center\" style=\"font-style:italic;\">
  Q̇<sub>Eva</sub> = ṁ<sub>ref</sub> (
  h<sub>Vap</sub>(T<sub>Eva</sub>) - h<sub>Liq</sub>(T<sub>Con</sub>)
  ).
</p>
<p>
  The power consumed by the compressor is given by a linear efficiency
  relation:
</p>
<p align=\"center\" style=\"font-style:italic;\">
  P = P<sub>Theoretical</sub> / η + P<sub>Loss,constant</sub>.
</p>
<p>
  Variable speed is acheived by multiplying the full load piston
  displacement by the normalized compressor speed. The power and heat
  transfer rates are forced to zero if the resulting heat pump state
  has higher evaporating pressure than condensing pressure.
</p>
<h4>
  Assumptions and limitations
</h4>
<p>
  The compression process is assumed isentropic. The thermal energy of
  superheating is ignored in the evaluation of the heat transferred to
  the refrigerant in the evaporator. There is no supercooling.
</p>
<h4>
  References
</h4>
<p>
  H. Jin. <i>Parameter estimation based models of water source heat
  pumps.</i> PhD Thesis. Oklahoma State University. Stillwater,
  Oklahoma, USA. 2002.
</p>
<ul>
  <li>January 25, 2019, by Michael Wetter:<br/>
    Added start value to avoid warning in JModelica.
  </li>
  <li>May 30, 2017, by Filip Jorissen:<br/>
    Removed <code>pressure_error</code> as this is replaced by <a href=
    \"modelica://AixLib.Fluid.HeatPumps.Compressors.BaseClasses.TemperatureProtection\">
    AixLib.Fluid.HeatPumps.Compressors.BaseClasses.TemperatureProtection</a>.
    See <a href=
    \"https://github.com/lbl-srg/modelica-buildings/issues/769\">#769</a>.
  </li>
  <li>November 14, 2016, by Massimo Cimmino:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 5 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 11 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Geothermal/Borefields/BaseClasses/HeatTransfer/ThermalResponseFactors/infiniteLineSource.mo ----
-------- HTML Code --------

 <p>
 This function evaluates the infinite line source solution. This solution gives
 the relation between the constant heat transfer rate (per unit length) injected
 by a line heat source of infinite length and the temperature raise in the
 medium. The infinite line source solution is defined by
 </p>
 <p align=\"center\">
 <img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/InfiniteLineSource_01.png\" />
 </p>
 <p>
 where <i>&Delta;T(t,r)</i> is the temperature raise after a time <i>t</i> of
 constant heat injection and at a distance <i>r</i> from the line source,
 <i>Q'</i> is the heat injection rate per unit length, <i>k<sub>s</sub></i> is
 the soil thermal conductivity and <i>h<sub>ILS</sub></i> is the infinite line
 source solution.
 </p>
 <p>
 The infinite line source solution is given by the exponential integral
 </p>
 <p align=\"center\">
 <img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/InfiniteLineSource_02.png\" />
 </p>
 <p>
 where <i>&alpha;<sub>s</sub></i> is the ground thermal diffusivity. The
 exponential integral is implemented in
 <a href=\"modelica://AixLib.Utilities.Math.Functions.exponentialIntegralE1\">AixLib.Utilities.Math.Functions.exponentialIntegralE1</a>.
 </p>
 
 <ul>
 <li>
 March 22, 2018 by Massimo Cimmino:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This function evaluates the infinite line source solution. This
  solution gives the relation between the constant heat transfer rate
  (per unit length) injected by a line heat source of infinite length
  and the temperature raise in the medium. The infinite line source
  solution is defined by
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/InfiniteLineSource_01.png\">
</p>
<p>
  where <i>ΔT(t,r)</i> is the temperature raise after a time <i>t</i>
  of constant heat injection and at a distance <i>r</i> from the line
  source, <i>Q'</i> is the heat injection rate per unit length,
  <i>k<sub>s</sub></i> is the soil thermal conductivity and
  <i>h<sub>ILS</sub></i> is the infinite line source solution.
</p>
<p>
  The infinite line source solution is given by the exponential
  integral
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/Geothermal/Borefields/InfiniteLineSource_02.png\">
</p>
<p>
  where <i>α<sub>s</sub></i> is the ground thermal diffusivity. The
  exponential integral is implemented in <a href=
  \"modelica://AixLib.Utilities.Math.Functions.exponentialIntegralE1\">AixLib.Utilities.Math.Functions.exponentialIntegralE1</a>.
</p>
<ul>
  <li>March 22, 2018 by Massimo Cimmino:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 8 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 21 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Interfaces/PrescribedOutlet.mo ----
-------- HTML Code --------

 <p>
 This model sets the temperature or the water vapor mass fraction
 of the medium that leaves <code>port_a</code>
 to the value given by the input <code>TSet</code> or <code>X_wSet</code>,
 subject to optional limitations on the capacity
 for heating and cooling, or limitations on the humidification or dehumidification
 moisture mass flow rate.
 Also, optionally the model allows to take into account first order dynamics.
 </p>
 <p>
 If the parameters <code>energyDynamics</code> is not equal to
 <code>Modelica.Fluid.Types.Dynamics.SteadyState</code>,
 the component models the dynamic response using a first order differential equation.
 The time constant of the component is equal to the parameter <code>tau</code>.
 This time constant is adjusted based on the mass flow rate using
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 &tau;<sub>eff</sub> = &tau; |m&#775;| &frasl; m&#775;<sub>nom</sub>
 </p>
 <p>
 where
 <i>&tau;<sub>eff</sub></i> is the effective time constant for the given mass flow rate
 <i>m&#775;</i> and
 <i>&tau;</i> is the time constant at the nominal mass flow rate
 <i>m&#775;<sub>nom</sub></i>.
 This type of dynamics is equal to the dynamics that a completely mixed
 control volume would have.
 </p>
 <p>
 This model has no pressure drop.
 See <a href=\"modelica://AixLib.Fluid.HeatExchangers.PrescribedOutlet\">
 AixLib.Fluid.HeatExchangers.PrescribedOutlet</a>
 for a model that instantiates this model and that has a pressure drop.
 </p>
 <p>
 In case of reverse flow,
 the fluid that leaves <code>port_a</code> has the same
 properties as the fluid that enters <code>port_b</code>.
 </p>
 
 <ul>
 <li>
 March 3, 2022, by Michael Wetter:<br/>
 Removed <code>massDynamics</code>.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1542\">issue 1542</a>.
 </li>
 <li>
 April 29, 2021, by Michael Wetter:<br/>
 Removed duplicate declaration of <code>m_flow_nominal</code> which is already
 declared in the base class.<br/>
 </li>
 <li>
 March 19, 2018, by Michael Wetter:<br/>
 Added bugfix as the old model did not track <code>TSet</code> and <code>X_wSet</code>
 simultaneously.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/893\">#893</a>.
 </li>
 <li>
 May 3, 2017, by Michael Wetter:<br/>
 Refactored model to allow <code>X_wSet</code> as an input.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/763\">#763</a>.
 </li>
 <li>
 January 26, 2016, by Michael Wetter:<br/>
 Removed inequality comparison of real numbers in <code>restrictCool</code>
 and in <code>restrictHeat</code> as this is not allowed in Modelica.
 </li>
 <li>
 November 10, 2014, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This model sets the temperature or the water vapor mass fraction of
  the medium that leaves <code>port_a</code> to the value given by the
  input <code>TSet</code> or <code>X_wSet</code>, subject to optional
  limitations on the capacity for heating and cooling, or limitations
  on the humidification or dehumidification moisture mass flow rate.
  Also, optionally the model allows to take into account first order
  dynamics.
</p>
<p>
  If the parameters <code>energyDynamics</code> is not equal to
  <code>Modelica.Fluid.Types.Dynamics.SteadyState</code>, the component
  models the dynamic response using a first order differential
  equation. The time constant of the component is equal to the
  parameter <code>tau</code>. This time constant is adjusted based on
  the mass flow rate using
</p>
<p align=\"center\" style=\"font-style:italic;\">
  τ<sub>eff</sub> = τ |ṁ| ⁄ ṁ<sub>nom</sub>
</p>
<p>
  where <i>τ<sub>eff</sub></i> is the effective time constant for the
  given mass flow rate <i>ṁ</i> and <i>τ</i> is the time constant at
  the nominal mass flow rate <i>ṁ<sub>nom</sub></i>. This type of
  dynamics is equal to the dynamics that a completely mixed control
  volume would have.
</p>
<p>
  This model has no pressure drop. See <a href=
  \"modelica://AixLib.Fluid.HeatExchangers.PrescribedOutlet\">AixLib.Fluid.HeatExchangers.PrescribedOutlet</a>
  for a model that instantiates this model and that has a pressure
  drop.
</p>
<p>
  In case of reverse flow, the fluid that leaves <code>port_a</code>
  has the same properties as the fluid that enters <code>port_b</code>.
</p>
<ul>
  <li>March 3, 2022, by Michael Wetter:<br/>
    Removed <code>massDynamics</code>.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1542\">issue
    1542</a>.
  </li>
  <li>April 29, 2021, by Michael Wetter:<br/>
    Removed duplicate declaration of <code>m_flow_nominal</code> which
    is already declared in the base class.<br/>
  </li>
  <li>March 19, 2018, by Michael Wetter:<br/>
    Added bugfix as the old model did not track <code>TSet</code> and
    <code>X_wSet</code> simultaneously.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/893\">#893</a>.
  </li>
  <li>May 3, 2017, by Michael Wetter:<br/>
    Refactored model to allow <code>X_wSet</code> as an input.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/763\">#763</a>.
  </li>
  <li>January 26, 2016, by Michael Wetter:<br/>
    Removed inequality comparison of real numbers in
    <code>restrictCool</code> and in <code>restrictHeat</code> as this
    is not allowed in Modelica.
  </li>
  <li>November 10, 2014, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 18 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Sensors/LatentEnthalpyFlowRate.mo ----
-------- HTML Code --------

 <p>
 This model outputs the <i>latent</i> enthalphy flow rate of the medium in the flow
 between its fluid ports. In particular, if the total enthalpy flow rate is
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   H&#775;<sub>tot</sub> = H&#775;<sub>sen</sub> + H&#775;<sub>lat</sub>,
 </p>
 <p>
 where
 <i>H&#775;<sub>sen</sub> = m&#775; (1-X<sub>w</sub>) c<sub>p,air</sub></i>,
 then this sensor outputs <i>H&#775; = H&#775;<sub>lat</sub></i>.
 </p>
 <p>
 If the parameter <code>tau</code> is non-zero, then the measured
 specific latent enthalpy <i>h<sub>out</sub></i> that is used to
 compute the latent enthalpy flow rate
 <i>H&#775;<sub>lat</sub> = m&#775; h<sub>out</sub></i>
 is computed using a first order differential equation.
 See <a href=\"modelica://AixLib.Fluid.Sensors.UsersGuide\">
 AixLib.Fluid.Sensors.UsersGuide</a> for an explanation.
 </p>
 <p>
 For a sensor that measures
 <i>H&#775;<sub>tot</sub></i>, use
 <a href=\"modelica://AixLib.Fluid.Sensors.EnthalpyFlowRate\">
 AixLib.Fluid.Sensors.EnthalpyFlowRate</a>.<br/>
 For a sensor that measures
 <i>H&#775;<sub>sen</sub></i>, use
 <a href=\"modelica://AixLib.Fluid.Sensors.SensibleEnthalpyFlowRate\">
 AixLib.Fluid.Sensors.SensibleEnthalpyFlowRate</a>.
 </p>
 <p>
 The sensor is ideal, i.e., it does not influence the fluid.
 The sensor can only be used with medium models that implement the function
 <code>enthalpyOfNonCondensingGas(T)</code>.
 </p>
 
 <ul>
 <li>
 October 19, 2020, by Antoine Gautier:<br/>
 Changed default value for <code>tau</code> from <code>1</code> to <code>0</code>.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1406\">#1406</a>.
 </li>
 <li>
 February 25, 2020, by Michael Wetter:<br/>
 Changed icon to display its operating state.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1294\">#1294</a>.
 </li>
 <li>
 January 18, 2016 by Filip Jorissen:<br/>
 Using parameter <code>tauInv</code>
 since this now exists in
 <a href=\"modelica://AixLib.Fluid.Sensors.BaseClasses.PartialDynamicFlowSensor\">AixLib.Fluid.Sensors.BaseClasses.PartialDynamicFlowSensor</a>.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/372\">#372</a>.
 </li>
 <li>
 September 10, 2013, by Michael Wetter:<br/>
 Changed medium declaration in the <code>extends</code> statement
 to <code>replaceable</code> to avoid a translation error in
 OpenModelica.
 </li>
 <li>
 August 31, 2013, by Michael Wetter:<br/>
 Removed default value <code>tau=0</code> as the base class
 already sets <code>tau=1</code>.
 This change was made so that all sensors use the same default value.
 </li>
 <li>
 December 18, 2012, by Michael Wetter:<br/>
 Moved computation of <code>i_w</code> to new base class
 <a href=\"modelica://AixLib.Fluid.BaseClasses.IndexWater\">
 AixLib.Fluid.BaseClasses.IndexWater</a>.
 The value of this parameter is now assigned dynamically and does not require to be specified
 by the user.
 </li>
 <li>
 November 3, 2011, by Michael Wetter:<br/>
 Moved <code>der(h_out) := 0;</code> from the initial algorithm section to
 the initial equation section
 as this assignment does not conform to the Modelica specification.
 </li>
 <li>
 August 10, 2011 by Michael Wetter:<br/>
 Added parameter <code>i_w</code> and an assert statement to
 make sure it is set correctly. Without this change, Dymola
 cannot differentiate the model when reducing the index of the DAE.
 </li>
 <li>
 June 3, 2011 by Michael Wetter:<br/>
 Revised implementation to add dynamics in such a way that
 the time constant increases as the mass flow rate tends to zero.
 This can improve the numerics.
 </li>
 <li>
 February 22, by Michael Wetter:<br/>
 Improved code that searches for index of 'water' in medium model.
 </li>
 <li>
 September 9, 2009 by Michael Wetter:<br/>
 First implementation.
 Implementation is based on enthalpy sensor of <code>Modelica.Fluid</code>.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This model outputs the <i>latent</i> enthalphy flow rate of the
  medium in the flow between its fluid ports. In particular, if the
  total enthalpy flow rate is
</p>
<p align=\"center\" style=\"font-style:italic;\">
  Ḣ<sub>tot</sub> = Ḣ<sub>sen</sub> + Ḣ<sub>lat</sub>,
</p>
<p>
  where <i>Ḣ<sub>sen</sub> = ṁ (1-X<sub>w</sub>)
  c<sub>p,air</sub></i>, then this sensor outputs <i>Ḣ =
  Ḣ<sub>lat</sub></i>.
</p>
<p>
  If the parameter <code>tau</code> is non-zero, then the measured
  specific latent enthalpy <i>h<sub>out</sub></i> that is used to
  compute the latent enthalpy flow rate <i>Ḣ<sub>lat</sub> = ṁ
  h<sub>out</sub></i> is computed using a first order differential
  equation. See <a href=
  \"modelica://AixLib.Fluid.Sensors.UsersGuide\">AixLib.Fluid.Sensors.UsersGuide</a>
  for an explanation.
</p>
<p>
  For a sensor that measures <i>Ḣ<sub>tot</sub></i>, use <a href=
  \"modelica://AixLib.Fluid.Sensors.EnthalpyFlowRate\">AixLib.Fluid.Sensors.EnthalpyFlowRate</a>.<br/>

  For a sensor that measures <i>Ḣ<sub>sen</sub></i>, use <a href=
  \"modelica://AixLib.Fluid.Sensors.SensibleEnthalpyFlowRate\">AixLib.Fluid.Sensors.SensibleEnthalpyFlowRate</a>.
</p>
<p>
  The sensor is ideal, i.e., it does not influence the fluid. The
  sensor can only be used with medium models that implement the
  function <code>enthalpyOfNonCondensingGas(T)</code>.
</p>
<ul>
  <li>October 19, 2020, by Antoine Gautier:<br/>
    Changed default value for <code>tau</code> from <code>1</code> to
    <code>0</code>.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1406\">#1406</a>.
  </li>
  <li>February 25, 2020, by Michael Wetter:<br/>
    Changed icon to display its operating state.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1294\">#1294</a>.
  </li>
  <li>January 18, 2016 by Filip Jorissen:<br/>
    Using parameter <code>tauInv</code> since this now exists in
    <a href=
    \"modelica://AixLib.Fluid.Sensors.BaseClasses.PartialDynamicFlowSensor\">
    AixLib.Fluid.Sensors.BaseClasses.PartialDynamicFlowSensor</a>. This
    is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/372\">#372</a>.
  </li>
  <li>September 10, 2013, by Michael Wetter:<br/>
    Changed medium declaration in the <code>extends</code> statement to
    <code>replaceable</code> to avoid a translation error in
    OpenModelica.
  </li>
  <li>August 31, 2013, by Michael Wetter:<br/>
    Removed default value <code>tau=0</code> as the base class already
    sets <code>tau=1</code>. This change was made so that all sensors
    use the same default value.
  </li>
  <li>December 18, 2012, by Michael Wetter:<br/>
    Moved computation of <code>i_w</code> to new base class <a href=
    \"modelica://AixLib.Fluid.BaseClasses.IndexWater\">AixLib.Fluid.BaseClasses.IndexWater</a>.
    The value of this parameter is now assigned dynamically and does
    not require to be specified by the user.
  </li>
  <li>November 3, 2011, by Michael Wetter:<br/>
    Moved <code>der(h_out) := 0;</code> from the initial algorithm
    section to the initial equation section as this assignment does not
    conform to the Modelica specification.
  </li>
  <li>August 10, 2011 by Michael Wetter:<br/>
    Added parameter <code>i_w</code> and an assert statement to make
    sure it is set correctly. Without this change, Dymola cannot
    differentiate the model when reducing the index of the DAE.
  </li>
  <li>June 3, 2011 by Michael Wetter:<br/>
    Revised implementation to add dynamics in such a way that the time
    constant increases as the mass flow rate tends to zero. This can
    improve the numerics.
  </li>
  <li>February 22, by Michael Wetter:<br/>
    Improved code that searches for index of 'water' in medium model.
  </li>
  <li>September 9, 2009 by Michael Wetter:<br/>
    First implementation. Implementation is based on enthalpy sensor of
    <code>Modelica.Fluid</code>.
  </li>
</ul>

-------- Errors --------
line 6 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/BoundaryConditions/WeatherData/ReaderTMY3.mo ----
-------- HTML Code --------

 <p>
 Block to output the latitude of the location.
 This block is added so that the latitude is displayed
 with a comment in the GUI of the weather bus connector.
 </p>
 <h4>Implementation</h4>
 <p>
 If
 <a href=\"modelica://Modelica.Blocks.Sources.Constant\">
 Modelica.Blocks.Sources.Constant</a> where used, then
 the comment for the latitude would be \"Connector of Real output signal\".
 As this documentation string cannot be overwritten, a new block
 was implemented.
 </p>
 
 <ul>
 <li>
 January 4, 2016, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 Block to output the longitude of the location.
 This block is added so that the longitude is displayed
 with a comment in the GUI of the weather bus connector.
 </p>
 <h4>Implementation</h4>
 <p>
 If
 <a href=\"modelica://Modelica.Blocks.Sources.Constant\">
 Modelica.Blocks.Sources.Constant</a> where used, then
 the comment for the longitude would be \"Connector of Real output signal\".
 As this documentation string cannot be overwritten, a new block
 was implemented.
 </p>
 
 <ul>
 <li>
 January 4, 2016, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 Block to output the altitude of the location.
 This block is added so that the altitude is displayed
 with a comment in the GUI of the weather bus connector.
 </p>
 <h4>Implementation</h4>
 <p>
 If
 <a href=\"modelica://Modelica.Blocks.Sources.Constant\">
 Modelica.Blocks.Sources.Constant</a> where used, then
 the comment for the Altitude would be \"Connector of Real output signal\".
 As this documentation string cannot be overwritten, a new block
 was implemented.
 </p>
 
 <ul>
 <li>
 May 2, 2021, by Ettore Zanetti:<br/>
 First implementation.
 </li>
 </ul>
 
 <p>
 This component reads TMY3 weather data (Wilcox and Marion, 2008) or user specified weather data.
 The Modelica built-in variable <code>time</code> determines what row
 of the weather file is read.
 The value of <code>time</code> is the number of seconds
 that have passed since January 1st at midnight (00:00) in the local time zone.
 The local time zone value, longitude and latitute are also read from the weather data,
 such that the solar position computations are consistent with the weather data.
 </p>
 <p>
 The weather data format is the Typical Meteorological Year (TMY3)
 as obtained from the EnergyPlus web site at
 <a href=\"http://energyplus.net/weather\">
 http://energyplus.net/weather</a>. These
 data, which are in the EnergyPlus format, need to be converted as described
 below.
 </p>
 <!-- ============================================== -->
 <h4>Output to weaBus</h4>
 <p>
 The following variables serve as output and are accessible via <code>weaBus</code>:
 </p>
 <table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\" style=\"border-collapse:collapse;\">
 <!-- ============================================== -->
 <tr>
   <th>Name
   </th>
   <th>Unit
   </th>
   <th>Description
   </th>
 </tr>
 <!-- ============================================== -->
 <tr>
   <td>
     <code>HDifHor</code>
   </td>
   <td>
     W/m2
   </td>
   <td>
     Horizontal diffuse solar radiation.
   </td>
 </tr>
 <!-- ============================================== -->
 <tr>
   <td>
     <code>HDifNor</code>
   </td>
   <td>
     W/m2
   </td>
   <td>
     Direct normal radiation.
   </td>
 </tr>
 <!-- ============================================== -->
 <tr>
   <td>
     <code>HGloHor</code>
   </td>
   <td>
     W/m2
   </td>
   <td>
     Horizontal global radiation.
   </td>
 </tr>
 <!-- ============================================== -->
 <tr>
   <td>
     <code>HHorIR</code>
   </td>
   <td>
     W/m2
   </td>
   <td>
     Horizontal infrared irradiation.
   </td>
 </tr>
 <!-- ============================================== -->
 <tr>
   <td>
     <code>TBlaSky</code>
   </td>
   <td>
     K
   </td>
   <td>
     Output temperature.
   </td>
 </tr>
 <!-- ============================================== -->
 <tr>
   <td>
     <code>TDewPoi</code>
   </td>
   <td>
     K
   </td>
   <td>
     Dew point temperature.
   </td>
 </tr>
 <!-- ============================================== -->
 <tr>
   <td>
     <code>TDryBul</code>
   </td>
   <td>
     K
   </td>
   <td>
     Dry bulb temperature at ground level.
   </td>
 </tr>
 <!-- ============================================== -->
 <tr>
   <td>
     <code>TWetBul</code>
   </td>
   <td>
     K
   </td>
   <td>
     Wet bulb temperature.
   </td>
 </tr>
 <!-- ============================================== -->
 <tr>
   <td>
     <code>celHei</code>
   </td>
   <td>
     m
   </td>
   <td>
     Ceiling height.
   </td>
 </tr>
 <!-- ============================================== -->
 <tr>
   <td>
     <code>cloTim</code>
   </td>
   <td>
     s
   </td>
   <td>
     One-based day number in seconds.
   </td>
 </tr>
 <!-- ============================================== -->
 <tr>
   <td>
     <code>lat</code>
   </td>
   <td>
     rad
   </td>
   <td>
   Latitude of the location.
   </td>
 </tr>
 <!-- ============================================== -->
 <tr>
   <td>
     <code>lon</code>
   </td>
   <td>
     rad
   </td>
   <td>
   Longitude of the location.
   </td>
 </tr>
 <!-- ============================================== -->
 <tr>
   <td>
     <code>nOpa</code>
   </td>
   <td>
     1
   </td>
   <td>
   Opaque sky cover [0, 1].
   </td>
 </tr>
 <!-- ============================================== -->
 <tr>
   <td>
     <code>nTot</code>
   </td>
   <td>
     1
   </td>
   <td>
    Total sky Cover [0, 1].
   </td>
 </tr>
 <!-- ============================================== -->
 <tr>
   <td>
     <code>pAtm</code>
   </td>
   <td>
     Pa
   </td>
   <td>
     Atmospheric pressure.
   </td>
 </tr>
 <!-- ============================================== -->
 <tr>
   <td>
     <code>relHum</code>
   </td>
   <td>
     1
   </td>
   <td>
     Relative humidity.
   </td>
 </tr>
 <!-- ============================================== -->
 <tr>
   <td>
     <code>solAlt</code>
   </td>
   <td>
     rad
   </td>
   <td>
     Altitude angle.
   </td>
 </tr>
 <!-- ============================================== -->
 <tr>
   <td>
     <code>solDec</code>
   </td>
   <td>
     rad
   </td>
   <td>
     Declination angle.
   </td>
 </tr>
 <!-- ============================================== -->
 <tr>
   <td>
     <code>solHouAng</code>
   </td>
   <td>
     rad
   </td>
   <td>
     Solar hour angle.
   </td>
 </tr>
 <!-- ============================================== -->
 <tr>
   <td>
     <code>solTim</code>
   </td>
   <td>
     s
   </td>
   <td>
     Solar time.
   </td>
 </tr>
 <!-- ============================================== -->
 <tr>
   <td>
     <code>solZen</code>
   </td>
   <td>
     rad
   </td>
   <td>
     Zenith angle.
   </td>
 </tr>
 <!-- ============================================== -->
 <tr>
   <td>
     <code>winDir</code>
   </td>
   <td>
     rad
   </td>
   <td>
     Wind direction.
   </td>
 </tr>
 <!-- ============================================== -->
 <tr>
   <td>
     <code>winSpe</code>
   </td>
   <td>
     m/s
   </td>
   <td>
     Wind speed.
   </td>
 </tr>
 </table>
 <!-- ============================================== -->
 <h4>Adding new weather data</h4>
 <p>
 To add new weather data, proceed as follows:
 </p>
 <ol>
 <li>
 Download the weather data file with the <code>epw</code> extension from
 <a href=\"http://energyplus.net/weather\">
 http://energyplus.net/weather</a>.
 </li>
 <li>
 Add the file to <code>AixLib/Resources/weatherdata</code> (or to any directory
 for which you have write permission).
 </li>
 <li>
 On a console window, type<pre>
   cd AixLib/Resources/weatherdata
   java -jar ../bin/ConvertWeatherData.jar inputFile.epw
 </pre>
   if inputFile contains space in the name:
 <pre>
   java -jar ../bin/ConvertWeatherData.jar \"inputFile .epw\"
 </pre>
 This will generate the weather data file <code>inputFile.mos</code>, which can be read
 by the model
 <a href=\"modelica://AixLib.BoundaryConditions.WeatherData.ReaderTMY3\">
 AixLib.BoundaryConditions.WeatherData.ReaderTMY3</a>.
 </li>
 </ol>
 <!-- ============================================== -->
 <h4>Location data that are read automatically from the weather data file</h4>
 <p>
 The following location data are automatically read from the weather file:
 </p>
 <ul>
 <li>
 The latitude of the weather station, <code>lat</code>,
 </li>
 <li>
 the longitude of the weather station, <code>lon</code>, and
 </li>
 <li>
 the time zone relative to Greenwich Mean Time, <code>timZone</code>.
 </li>
 </ul>
 <!-- ============================================== -->
 <h4>Wet bulb temperature</h4>
 <p>
 By default, the data bus contains the wet bulb temperature.
 This introduces a nonlinear equation.
 However, we have not observed an increase in computing time because
 of this equation.
 To disable the computation of the wet bulb temperature, set
 <code>computeWetBulbTemperature=false</code>.
 </p>
 <!-- ============================================== -->
 <h4>Using constant or user-defined input signals for weather data</h4>
 <p>
 This model has the option of using a constant value, using the data from the weather file,
 or using data from an input connector for the following variables:
 </p>
 <ul>
 <li>
 The atmospheric pressure,
 </li>
 <li>
 the ceiling height,
 </li>
 <li>
 the total sky cover,
 </li>
 <li>
 the opaque sky cover,
 </li>
 <li>
 the dry bulb temperature,
 </li>
 <li>
 the dew point temperature,
 </li>
 <li>
 the sky black body temperature,
 </li>
 <li>
 the relative humidity,
 </li>
 <li>
 the wind direction,
 </li>
 <li>
 the wind speed,
 </li>
 <li>
 the global horizontal radiation, direct normal and diffuse horizontal radiation,
 and
 </li>
 <li>
 the infrared horizontal radiation.
 </li>
 </ul>
 <p>
 By default, all data are obtained from the weather data file,
 except for the atmospheric pressure, which is set to the
 parameter <code>pAtm=101325</code> Pascals.
 </p>
 <p>
 The parameter <code>*Sou</code> configures the source of the data.
 For the atmospheric pressure, temperatures, relative humidity, wind speed and wind direction,
 the enumeration
 <a href=\"modelica://AixLib.BoundaryConditions.Types.DataSource\">
 AixLib.BoundaryConditions.Types.DataSource</a>
 is used as follows:
 </p>
 <table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\" style=\"border-collapse:collapse;\">
 <!-- ============================================== -->
 <tr>
   <th>Parameter <code>*Sou</code>
   </th>
   <th>Data used to compute weather data.
   </th>
 </tr>
 <!-- ============================================== -->
 <tr>
   <td>
     File
   </td>
   <td>
     Use data from file.
   </td>
 </tr>
 <!-- ============================================== -->
 <tr>
   <td>
     Parameter
   </td>
   <td>
     Use value specified by the parameter.
   </td>
 </tr>
 <!-- ============================================== -->
 <tr>
   <td>
     Input
   </td>
   <td>
     Use value from the input connector.
   </td>
 </tr>
 </table>
 <p>
 Because global, diffuse and direct radiation are related to each other, the parameter
 <code>HSou</code> is treated differently.
 It is set to a value of the enumeration
 <a href=\"modelica://AixLib.BoundaryConditions.Types.RadiationDataSource\">
 AixLib.BoundaryConditions.Types.RadiationDataSource</a>,
 and allows the following configurations:
 </p>
 <table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\" style=\"border-collapse:collapse;\">
 <!-- ============================================== -->
 <tr>
   <th>Parameter <code>HSou</code>
   </th>
   <th>Data used to compute weather data.
   </th>
 </tr>
 <!-- ============================================== -->
 <tr>
   <td>
     File
   </td>
   <td>
     Use data from file.
   </td>
 </tr>
 <!-- ============================================== -->
 <tr>
   <td>
     Input_HGloHor_HDifHor
   </td>
   <td>
     Use global horizontal and diffuse horizontal radiation from input connector.
   </td>
 </tr>
 <tr>
   <td>
     Input_HDirNor_HDifHor
   </td>
   <td>
     Use direct normal and diffuse horizontal radiation from input connector.
   </td>
 </tr>
 <tr>
   <td>
     Input_HDirNor_HGloHor
   </td>
   <td>
     Use direct normal and global horizontal radiation from input connector.
   </td>
 </tr>
 </table>
 <!-- ============================================== -->
 <h4>Length of weather data and simulation period</h4>
 <p>
 If weather data span a year, which is the default for TMY3 data, or multiple years,
 then this model can be used for simulations that span multiple years. The simulation
 start time needs to be set to the clock time of the respective start time. For example,
 to start at January 2 at 10am, set start time to <code>t=(24+10)*3600</code> seconds.
 For this computation, the used date and time (here January 2, 10 am) must be expressed in the same time zone
 as the one that is used to define the TMY3 file. This is usually the local (winter) time zone.
 The parameter `timZon` represents the TMY3 file time zone, expressed in seconds compared to UTC.
 </p>
 <p>
 Moreover, weather data need not span a whole year, or it can span across New Year.
 In this case, the simulation cannot exceed the time of the weather data file. Otherwise,
 the simulation stops with an error.
 </p>
 <p>
 As weather data have one entry at the start of the time interval, the end time of the weather
 data file is computed as the last time entry plus the average time increment of the file.
 For example, an hourly weather data file has 8760 entries, starting on January 1 at 0:00.
 The last entry in the file will be for December 31 at 23:00. As the time increment is 1 hour,
 the model assumes the weather file to end at December 31 at 23:00 plus 1 hour, e.g., at January 1 at 0:00.
 </p>
 <!-- ============================================== -->
 <h4>Notes</h4>
 <ol>
 <li>
 <p>
 In HVAC systems, when the fan is off, changes in atmospheric pressure can cause small air flow rates
 in the duct system due to change in pressure and hence in the mass of air that is stored
 in air volumes (such as in fluid junctions or in the room model).
 This may increase computing time. Therefore, the default value for the atmospheric pressure is set to a constant.
 Furthermore, if the initial pressure of air volumes are different
 from the atmospheric pressure, then fast pressure transients can happen in the first few seconds of the simulation.
 This can cause numerical problems for the solver. To avoid this problem, set the atmospheric pressure to the
 same value as the medium default pressure, which is typically set to the parameter <code>Medium.p_default</code>.
 For medium models for moist air and dry air, the default is
 <code>Medium.p_default=101325</code> Pascals.
 </p>
 </li>
 <li>
 <p>
 Different units apply depending on whether data are obtained from a file, or
 from a parameter or an input connector:
 </p>
 <ul>
 <li>
 When using TMY3 data from a file (e.g. <code>USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.mos</code>), the units must be the same as the original TMY3 file used by EnergyPlus (e.g.
 <code>USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.epw</code>).
 The TMY3 data used by EnergyPlus are in both SI units and non-SI units.
 If <code>Resources/bin/ConvertWeatherData.jar</code> is used to convert the <code>.epw</code> file to an <code>.mos</code> file, the units of the TMY3 data are preserved and the file can be directly
 used by this data reader.
 The data reader will automatically convert units to the SI units used by Modelica.
 For example, the dry bulb temperature <code>TDryBul</code> in TMY3 is in degree Celsius.
 The data reader will automatically convert the data to Kelvin.
 The wind direction <code>winDir</code> in TMY3 is degrees and will be automatically converted to radians.
 </li>
 <li>
 When using data from a parameter or from an input connector,
 the data must be in the SI units used by Modelica.
 For instance, the unit must be
 <code>Pa</code> for pressure,
 <code>K</code> for temperature,
 <code>W/m2</code> for solar radiations and
 <code>rad</code> for wind direction.
 </li>
 </ul>
 </li>
 <li>
 <p>
 Hourly and subhourly timestamp are handled in a different way in <code>.epw</code> files.
 From the EnergyPlus Auxiliary Programs Document (v9.3.0, p. 63):
 In hourly data the minute field can be <code>00</code> or <code>60</code>. In this case as mentioned in the previous section, the weather data
 is reported at the hourly value and the minute field has to be ignored, writing <code>1, 60</code> or <code>1, 00</code> is equivalent.
 If the minute field is between <code>00</code> and <code>60</code>, the file becomes subhourly, in this case the timestamp corresponds to the
 minute field in the considered hour. For example: <code>1, 30</code> is equivalent to <i>00:30</i> and <code>3, 45</code> is equivalent to <i>02:45</i>.<br/>
 (Note the offset in the hour digit.)
 </p>
 </li>
 <li>
 The ReaderTMY3 should only be used with TMY3 data. It contains a time shift for solar radiation data
 that is explained below. This time shift needs to be removed if the user may want to
 use the ReaderTMY3 for other weather data types.
 </li>
 </ol>
 <h4>Implementation</h4>
 <h5>Start and end data for annual weather data files</h5>
 <p>
 The TMY3 weather data, as well as the EnergyPlus weather data, start at 1:00 AM
 on January 1, and provide hourly data until midnight on December 31.
 Thus, the first entry for temperatures, humidity, wind speed etc. are values
 at 1:00 AM and not at midnight. Furthermore, the TMY3 weather data files can have
 values at midnight of December 31 that may be significantly different from the values
 at 1:00 AM on January 1.
 Since annual simulations require weather data that start at 0:00 on January 1,
 data need to be provided for this hour. Due to the possibly large change in
 weatherdata between 1:00 AM on January 1 and midnight at December 31,
 the weather data files in the AixLib library do not use the data entry from
 midnight at December 31 as the value for <i>t=0</i>. Rather, the
 value from 1:00 AM on January 1 is duplicated and used for 0:00 on January 1.
 To maintain a data record with <i>8760</i> hours, the weather data record from
 midnight at December 31 is deleted.
 These changes in the weather data file are done in the Java program
 <code>AixLib/Resources/bin/ConvertWeatherData.jar</code> that converts
 EnergyPlus weather data file to Modelica weather data files, and which is described
 above.
 The length of the weather data is calculated as the
 end time stamp minus start time stamp plus average increment, where the
 average increment is equal to the end time stamp minus start time stamp divided
 by the number of rows minus 1.
 This only works correctly for weather files with equidistant time stamps.
 </p>
 <h5>Time shift for solar radiation data</h5>
 <p>
 To read weather data from the TMY3 weather data file, there are
 two data readers in this model. One data reader obtains all data
 except solar radiation, and the other data reader reads only the
 solar radiation data, shifted by <i>30</i> minutes.
 The reason for this time shift is as follows:
 The TMY3 weather data file contains for solar radiation the
 \"...radiation received
 on a horizontal surface during
 the 60-minute period ending at
 the timestamp.\"
 
 Thus, as the figure below shows, a more accurate interpolation is obtained if
 time is shifted by <i>30</i> minutes prior to reading the weather data.
 </p>
 <p align=\"center\">
 <img alt=\"image\" src=\"modelica://AixLib/Resources/Images/BoundaryConditions/WeatherData/RadiationTimeShift.png\"
 border=\"1\" />
 </p>
 <h4>References</h4>
 <ul>
 <li>
 Wilcox S. and W. Marion. <i>Users Manual for TMY3 Data Sets</i>.
 Technical Report, NREL/TP-581-43156, revised May 2008.
 </li>
 </ul>
 
 <ul>
 <li>
 September 6, 2021, by Ettore Zanetti:<br/>
 Changed alt and lat to real inputs.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1477\">IBPSA, #1477</a>.
 </li>
 <li>
 May 2, 2021, by Ettore Zanetti:<br/>
 Added altitude to parameters.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1477\">IBPSA, #1477</a>.
 </li>
 <li>
 October 4, 2020, by Ettore Zanetti:<br/>
 Updated documentation for Java weather file generator.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1396\">#1396</a>.
 </li>
 <li>
 August 20, 2019, by Filip Jorissen:<br/>
 Better clarified the meaning of <code>time</code> in the documentation.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1192\">#1192</a>.
 </li>
 <li>
 March 5, 2019, by Michael Wetter:<br/>
 Updated documentation.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/842\">#842</a>.
 </li>
 <li>
 September 20, 2018, by Michael Wetter:<br/>
 Corrected documentation.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1022\">#1022</a>.
 </li>
 <li>
 December 4, 2017, by Michael Wetter:<br/>
 Removed function call to <code>getAbsolutePath</code>, as this causes in Dymola 2018FD01
 the error
 \"A call of loadResource with a non-literal string remains in the generated code; it will not work for an URI.\"
 when exporting <a href=\"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZone\">
 AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZone</a>
 as an FMU. Instead, if the weather file is specified as a Modelica, URI, syntax such as
 <code>Modelica.Utilities.Files.loadResource(\"modelica://AixLib/Resources/weatherdata/USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.mos\")</code>
 should be used.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/867\">#867</a>.
 </li>
 <li>
 February 18, 2017, by Filip Jorissen:<br/>
 Infrared radiation on horizontal surface is now delayed by 30 minutes
 such that the results in
 <a href=\"modelica://AixLib.BoundaryConditions.SkyTemperature.Examples.BlackBody\">TBlaSky</a>
 are consistent.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/648\">#648</a>.
 </li>
 <li>
 December 06, 2016, by Thierry S. Nouidui:<br/>
 Constrained the direct normal radiation to not be bigger than the solar constant when using
 global and diffuse solar radiation data provided via the inputs connectors.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/608\">#608</a>.
 </li>
 <li>
 April 21, 2016, by Michael Wetter:<br/>
 Introduced <code>absFilNam</code> to avoid multiple calls to
 <a href=\"modelica://AixLib.BoundaryConditions.WeatherData.BaseClasses.getAbsolutePath\">
 AixLib.BoundaryConditions.WeatherData.BaseClasses.getAbsolutePath</a>.
 This is for
 <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/506\">Buildings, #506</a>.
 </li>
 <li>
 January 6, 2016, by Moritz Lauster:<br/>
 Changed output <code>radHorIR</code> to <code>HHorIR</code>.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/376\">#376</a>.
 </li>
 <li>
 January 4, 2016, by Moritz Lauster:<br/>
 Added a table in documentation with output variables accessible via <code>weaBus</code>.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/376\">#376</a>.
 </li>
 <li>
 December 15, 2015, by Michael Wetter:<br/>
 Added the block <code>cheTemBlaSky</code>. This also allows to graphically
 connect the black body sky temperature to the weather bus, which is required
 in Dymola 2016 for the variable <code>weaBus.TBlaSky</code> to appear
 in the graphical editor.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/377\">#377</a>.
 </li>
 <li>
 September 24, 2015, by Marcus Fuchs:<br/>
 Replace Dymola specific annotation by <code>loadSelector</code>
 for MSL compliancy as reported by @tbeu at
 <a href=\"https://github.com/RWTH-EBC/AixLib/pull/107\">RWTH-EBC/AixLib#107</a>
 </li>
 <li>
 June 6, 2015, by Michael Wetter:<br/>
 Removed redundant but consistent
 <code>connect(TBlaSkyCom.TBlaSky, weaBus.TBlaSky)</code>
 statement.
 This avoids a warning if
 <a href=\"modelica://AixLib.BoundaryConditions.SolarIrradiation.BaseClasses.Examples.SkyClearness\">
 AixLib.BoundaryConditions.SolarIrradiation.BaseClasses.Examples.SkyClearness</a>
 is translated in pedantic mode in Dymola 2016.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/266\">#266</a>.
 </li>
 <li>
 March 26, 2015, by Michael Wetter:<br/>
 Added option to obtain the black body sky temperature
 from a parameter or an input signal.
 </li>
 <li>
 October 17, 2014, by Michael Wetter:<br/>
 Corrected error that led the total and opaque sky cover to be ten times
 too low if its value was obtained from the parameter or the input connector.
 For the standard configuration in which the sky cover is obtained from
 the weather data file, the model was correct. This error only affected
 the other two possible configurations.
 </li>
 <li>
 September 12, 2014, by Michael Wetter:<br/>
 Removed redundant connection <code>connect(conHorRad.HOut, cheHorRad.HIn);</code>.
 </li>
 <li>
 May 30, 2014, by Michael Wetter:<br/>
 Removed undesirable annotation <code>Evaluate=true</code>.
 </li>
 <li>
 May 5, 2013, by Thierry S. Nouidui:<br/>
 Added the option to use a constant, an input signal or the weather file as the source
 for the ceiling height, the total sky cover, the opaque sky cover, the dew point temperature,
 and the infrared horizontal radiation <code>HInfHor</code>.
 </li>
 <li>
 October 8, 2013, by Michael Wetter:<br/>
 Improved the algorithm that determines the absolute path of the file.
 Now weather files are searched in the path specified, and if not found, the urls
 <code>file://</code>, <code>modelica://</code> and <code>modelica://AixLib</code>
 are added in this order to search for the weather file.
 This allows using the data reader without having to specify an absolute path,
 as long as the <code>AixLib</code> library
 is on the <code>MODELICAPATH</code>.
 This change was implemented in
 <a href=\"modelica://AixLib.BoundaryConditions.WeatherData.BaseClasses.getAbsolutePath\">
 AixLib.BoundaryConditions.WeatherData.BaseClasses.getAbsolutePath</a>
 and improves this weather data reader.
 </li>
 <li>
 May 2, 2013, by Michael Wetter:<br/>
 Added function call to <code>getAbsolutePath</code>.
 </li>
 <li>
 October 16, 2012, by Michael Wetter:<br/>
 Added computation of the wet bulb temperature.
 Computing the wet bulb temperature introduces a nonlinear
 equation. As we have not observed an increase in computing time
 because of computing the wet bulb temperature, it is computed
 by default. By setting the parameter
 <code>computeWetBulbTemperature=false</code>, the computation of the
 wet bulb temperature can be removed.
 Revised documentation.
 </li>
 <li>
 August 11, 2012, by Wangda Zuo:<br/>
 Renamed <code>radHor</code> to <code>radHorIR</code> and
 improved the optional inputs for radiation data.
 </li>
 <li>
 July 24, 2012, by Wangda Zuo:<br/>
 Corrected the notes of SI unit requirements for input files.
 </li>
 <li>
 July 13, 2012, by Michael Wetter:<br/>
 Removed assignment of <code>HGloHor_in</code> in its declaration,
 because this gives an overdetermined system if the input connector
 is used.
 Removed non-required assignments of attribute <code>displayUnit</code>.
 </li>
 <li>
 February 25, 2012, by Michael Wetter:<br/>
 Added subbus for solar position, which is needed by irradition and
 shading model.
 </li>
 <li>
 November 29, 2011, by Michael Wetter:<br/>
 Fixed wrong display unit for <code>pAtm_in_internal</code> and
 made propagation of parameter final.
 </li>
 <li>
 October 27, 2011, by Wangda Zuo:<br/>
 <ol>
 <li>
 Added optional connectors for dry bulb temperature, relative humidity, wind speed, wind direction, global horizontal radiation, diffuse horizontal radiation.<br/>
 </li>
 <li>
 Separate the unit conversion for TMY3 data and data validity check.
 </li>
 </ol>
 </li>
 <li>
 October 3, 2011, by Michael Wetter:<br/>
 Propagated value for sky temperature calculation to make it accessible as a parameter.
 </li>
 <li>
 July 20, 2011, by Michael Wetter:<br/>
 Added the option to use a constant, an input signal or the weather file as the source
 for the atmospheric pressure.
 </li><li>
 March 15, 2011, by Wangda Zuo:<br/>
 Delete the wet bulb temperature since it may cause numerical problem.
 </li>
 <li>
 March 7, 2011, by Wangda Zuo:<br/>
 Added wet bulb temperature. Changed reader to read only needed columns.
 Added explanation for 30 minutes shift for radiation data.
 </li>
 <li>
 March 5, 2011, by Michael Wetter:<br/>
 Changed implementation to obtain longitude and time zone directly
 from weather file.
 </li>
 <li>
 June 25, 2010, by Wangda Zuo:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Block to output the latitude of the location. This block is added so
  that the latitude is displayed with a comment in the GUI of the
  weather bus connector.
</p>
<h4>
  Implementation
</h4>
<p>
  If <a href=
  \"modelica://Modelica.Blocks.Sources.Constant\">Modelica.Blocks.Sources.Constant</a>
  where used, then the comment for the latitude would be \"Connector of
  Real output signal\". As this documentation string cannot be
  overwritten, a new block was implemented.
</p>
<ul>
  <li>January 4, 2016, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  Block to output the longitude of the location. This block is added so
  that the longitude is displayed with a comment in the GUI of the
  weather bus connector.
</p>
<h4>
  Implementation
</h4>
<p>
  If <a href=
  \"modelica://Modelica.Blocks.Sources.Constant\">Modelica.Blocks.Sources.Constant</a>
  where used, then the comment for the longitude would be \"Connector of
  Real output signal\". As this documentation string cannot be
  overwritten, a new block was implemented.
</p>
<ul>
  <li>January 4, 2016, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>
<p>
  Block to output the altitude of the location. This block is added so
  that the altitude is displayed with a comment in the GUI of the
  weather bus connector.
</p>
<h4>
  Implementation
</h4>
<p>
  If <a href=
  \"modelica://Modelica.Blocks.Sources.Constant\">Modelica.Blocks.Sources.Constant</a>
  where used, then the comment for the Altitude would be \"Connector of
  Real output signal\". As this documentation string cannot be
  overwritten, a new block was implemented.
</p>
<ul>
  <li>May 2, 2021, by Ettore Zanetti:<br/>
    First implementation.
  </li>
</ul>
<p>
  This component reads TMY3 weather data (Wilcox and Marion, 2008) or
  user specified weather data. The Modelica built-in variable
  <code>time</code> determines what row of the weather file is read.
  The value of <code>time</code> is the number of seconds that have
  passed since January 1st at midnight (00:00) in the local time zone.
  The local time zone value, longitude and latitute are also read from
  the weather data, such that the solar position computations are
  consistent with the weather data.
</p>
<p>
  The weather data format is the Typical Meteorological Year (TMY3) as
  obtained from the EnergyPlus web site at <a href=
  \"http://energyplus.net/weather\">http://energyplus.net/weather</a>.
  These data, which are in the EnergyPlus format, need to be converted
  as described below.
</p><!-- ============================================== -->
<h4>
  Output to weaBus
</h4>
<p>
  The following variables serve as output and are accessible via
  <code>weaBus</code>:
</p>
<table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\"
style=\"border-collapse:collapse;\">
  <!-- ============================================== -->
  <tr>
    <th>
      Name
    </th>
    <th>
      Unit
    </th>
    <th>
      Description
    </th>
  </tr><!-- ============================================== -->
  <tr>
    <td>
      <code>HDifHor</code>
    </td>
    <td>
      W/m2
    </td>
    <td>
      Horizontal diffuse solar radiation.
    </td>
  </tr><!-- ============================================== -->
  <tr>
    <td>
      <code>HDifNor</code>
    </td>
    <td>
      W/m2
    </td>
    <td>
      Direct normal radiation.
    </td>
  </tr><!-- ============================================== -->
  <tr>
    <td>
      <code>HGloHor</code>
    </td>
    <td>
      W/m2
    </td>
    <td>
      Horizontal global radiation.
    </td>
  </tr><!-- ============================================== -->
  <tr>
    <td>
      <code>HHorIR</code>
    </td>
    <td>
      W/m2
    </td>
    <td>
      Horizontal infrared irradiation.
    </td>
  </tr><!-- ============================================== -->
  <tr>
    <td>
      <code>TBlaSky</code>
    </td>
    <td>
      K
    </td>
    <td>
      Output temperature.
    </td>
  </tr><!-- ============================================== -->
  <tr>
    <td>
      <code>TDewPoi</code>
    </td>
    <td>
      K
    </td>
    <td>
      Dew point temperature.
    </td>
  </tr><!-- ============================================== -->
  <tr>
    <td>
      <code>TDryBul</code>
    </td>
    <td>
      K
    </td>
    <td>
      Dry bulb temperature at ground level.
    </td>
  </tr><!-- ============================================== -->
  <tr>
    <td>
      <code>TWetBul</code>
    </td>
    <td>
      K
    </td>
    <td>
      Wet bulb temperature.
    </td>
  </tr><!-- ============================================== -->
  <tr>
    <td>
      <code>celHei</code>
    </td>
    <td>
      m
    </td>
    <td>
      Ceiling height.
    </td>
  </tr><!-- ============================================== -->
  <tr>
    <td>
      <code>cloTim</code>
    </td>
    <td>
      s
    </td>
    <td>
      One-based day number in seconds.
    </td>
  </tr><!-- ============================================== -->
  <tr>
    <td>
      <code>lat</code>
    </td>
    <td>
      rad
    </td>
    <td>
      Latitude of the location.
    </td>
  </tr><!-- ============================================== -->
  <tr>
    <td>
      <code>lon</code>
    </td>
    <td>
      rad
    </td>
    <td>
      Longitude of the location.
    </td>
  </tr><!-- ============================================== -->
  <tr>
    <td>
      <code>nOpa</code>
    </td>
    <td>
      1
    </td>
    <td>
      Opaque sky cover [0, 1].
    </td>
  </tr><!-- ============================================== -->
  <tr>
    <td>
      <code>nTot</code>
    </td>
    <td>
      1
    </td>
    <td>
      Total sky Cover [0, 1].
    </td>
  </tr><!-- ============================================== -->
  <tr>
    <td>
      <code>pAtm</code>
    </td>
    <td>
      Pa
    </td>
    <td>
      Atmospheric pressure.
    </td>
  </tr><!-- ============================================== -->
  <tr>
    <td>
      <code>relHum</code>
    </td>
    <td>
      1
    </td>
    <td>
      Relative humidity.
    </td>
  </tr><!-- ============================================== -->
  <tr>
    <td>
      <code>solAlt</code>
    </td>
    <td>
      rad
    </td>
    <td>
      Altitude angle.
    </td>
  </tr><!-- ============================================== -->
  <tr>
    <td>
      <code>solDec</code>
    </td>
    <td>
      rad
    </td>
    <td>
      Declination angle.
    </td>
  </tr><!-- ============================================== -->
  <tr>
    <td>
      <code>solHouAng</code>
    </td>
    <td>
      rad
    </td>
    <td>
      Solar hour angle.
    </td>
  </tr><!-- ============================================== -->
  <tr>
    <td>
      <code>solTim</code>
    </td>
    <td>
      s
    </td>
    <td>
      Solar time.
    </td>
  </tr><!-- ============================================== -->
  <tr>
    <td>
      <code>solZen</code>
    </td>
    <td>
      rad
    </td>
    <td>
      Zenith angle.
    </td>
  </tr><!-- ============================================== -->
  <tr>
    <td>
      <code>winDir</code>
    </td>
    <td>
      rad
    </td>
    <td>
      Wind direction.
    </td>
  </tr><!-- ============================================== -->
  <tr>
    <td>
      <code>winSpe</code>
    </td>
    <td>
      m/s
    </td>
    <td>
      Wind speed.
    </td>
  </tr>
</table><!-- ============================================== -->
<h4>
  Adding new weather data
</h4>
<p>
  To add new weather data, proceed as follows:
</p>
<ol>
  <li>Download the weather data file with the <code>epw</code>
  extension from <a href=
  \"http://energyplus.net/weather\">http://energyplus.net/weather</a>.
  </li>
  <li>Add the file to <code>AixLib/Resources/weatherdata</code> (or to
  any directory for which you have write permission).
  </li>
  <li>On a console window, type
    <pre>
   cd AixLib/Resources/weatherdata
   java -jar ../bin/ConvertWeatherData.jar inputFile.epw
 </pre>if inputFile contains space in the name:
    <pre>
   java -jar ../bin/ConvertWeatherData.jar \"inputFile .epw\"
 </pre>This will generate the weather data file
<code>inputFile.mos</code>, which can be read by the model <a href=
\"modelica://AixLib.BoundaryConditions.WeatherData.ReaderTMY3\">AixLib.BoundaryConditions.WeatherData.ReaderTMY3</a>.
  </li>
</ol><!-- ============================================== -->
<h4>
  Location data that are read automatically from the weather data file
</h4>
<p>
  The following location data are automatically read from the weather
  file:
</p>
<ul>
  <li>The latitude of the weather station, <code>lat</code>,
  </li>
  <li>the longitude of the weather station, <code>lon</code>, and
  </li>
  <li>the time zone relative to Greenwich Mean Time,
  <code>timZone</code>.
  </li>
</ul><!-- ============================================== -->
<h4>
  Wet bulb temperature
</h4>
<p>
  By default, the data bus contains the wet bulb temperature. This
  introduces a nonlinear equation. However, we have not observed an
  increase in computing time because of this equation. To disable the
  computation of the wet bulb temperature, set
  <code>computeWetBulbTemperature=false</code>.
</p><!-- ============================================== -->
<h4>
  Using constant or user-defined input signals for weather data
</h4>
<p>
  This model has the option of using a constant value, using the data
  from the weather file, or using data from an input connector for the
  following variables:
</p>
<ul>
  <li>The atmospheric pressure,
  </li>
  <li>the ceiling height,
  </li>
  <li>the total sky cover,
  </li>
  <li>the opaque sky cover,
  </li>
  <li>the dry bulb temperature,
  </li>
  <li>the dew point temperature,
  </li>
  <li>the sky black body temperature,
  </li>
  <li>the relative humidity,
  </li>
  <li>the wind direction,
  </li>
  <li>the wind speed,
  </li>
  <li>the global horizontal radiation, direct normal and diffuse
  horizontal radiation, and
  </li>
  <li>the infrared horizontal radiation.
  </li>
</ul>
<p>
  By default, all data are obtained from the weather data file, except
  for the atmospheric pressure, which is set to the parameter
  <code>pAtm=101325</code> Pascals.
</p>
<p>
  The parameter <code>*Sou</code> configures the source of the data.
  For the atmospheric pressure, temperatures, relative humidity, wind
  speed and wind direction, the enumeration <a href=
  \"modelica://AixLib.BoundaryConditions.Types.DataSource\">AixLib.BoundaryConditions.Types.DataSource</a>
  is used as follows:
</p>
<table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\"
style=\"border-collapse:collapse;\">
  <!-- ============================================== -->
  <tr>
    <th>
      Parameter <code>*Sou</code>
    </th>
    <th>
      Data used to compute weather data.
    </th>
  </tr><!-- ============================================== -->
  <tr>
    <td>
      File
    </td>
    <td>
      Use data from file.
    </td>
  </tr><!-- ============================================== -->
  <tr>
    <td>
      Parameter
    </td>
    <td>
      Use value specified by the parameter.
    </td>
  </tr><!-- ============================================== -->
  <tr>
    <td>
      Input
    </td>
    <td>
      Use value from the input connector.
    </td>
  </tr>
</table>
<p>
  Because global, diffuse and direct radiation are related to each
  other, the parameter <code>HSou</code> is treated differently. It is
  set to a value of the enumeration <a href=
  \"modelica://AixLib.BoundaryConditions.Types.RadiationDataSource\">AixLib.BoundaryConditions.Types.RadiationDataSource</a>,
  and allows the following configurations:
</p>
<table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\"
style=\"border-collapse:collapse;\">
  <!-- ============================================== -->
  <tr>
    <th>
      Parameter <code>HSou</code>
    </th>
    <th>
      Data used to compute weather data.
    </th>
  </tr><!-- ============================================== -->
  <tr>
    <td>
      File
    </td>
    <td>
      Use data from file.
    </td>
  </tr><!-- ============================================== -->
  <tr>
    <td>
      Input_HGloHor_HDifHor
    </td>
    <td>
      Use global horizontal and diffuse horizontal radiation from input
      connector.
    </td>
  </tr>
  <tr>
    <td>
      Input_HDirNor_HDifHor
    </td>
    <td>
      Use direct normal and diffuse horizontal radiation from input
      connector.
    </td>
  </tr>
  <tr>
    <td>
      Input_HDirNor_HGloHor
    </td>
    <td>
      Use direct normal and global horizontal radiation from input
      connector.
    </td>
  </tr>
</table><!-- ============================================== -->
<h4>
  Length of weather data and simulation period
</h4>
<p>
  If weather data span a year, which is the default for TMY3 data, or
  multiple years, then this model can be used for simulations that span
  multiple years. The simulation start time needs to be set to the
  clock time of the respective start time. For example, to start at
  January 2 at 10am, set start time to <code>t=(24+10)*3600</code>
  seconds. For this computation, the used date and time (here January
  2, 10 am) must be expressed in the same time zone as the one that is
  used to define the TMY3 file. This is usually the local (winter) time
  zone. The parameter `timZon` represents the TMY3 file time zone,
  expressed in seconds compared to UTC.
</p>
<p>
  Moreover, weather data need not span a whole year, or it can span
  across New Year. In this case, the simulation cannot exceed the time
  of the weather data file. Otherwise, the simulation stops with an
  error.
</p>
<p>
  As weather data have one entry at the start of the time interval, the
  end time of the weather data file is computed as the last time entry
  plus the average time increment of the file. For example, an hourly
  weather data file has 8760 entries, starting on January 1 at 0:00.
  The last entry in the file will be for December 31 at 23:00. As the
  time increment is 1 hour, the model assumes the weather file to end
  at December 31 at 23:00 plus 1 hour, e.g., at January 1 at 0:00.
</p><!-- ============================================== -->
<h4>
  Notes
</h4>
<ol>
  <li>
    <p>
      In HVAC systems, when the fan is off, changes in atmospheric
      pressure can cause small air flow rates in the duct system due to
      change in pressure and hence in the mass of air that is stored in
      air volumes (such as in fluid junctions or in the room model).
      This may increase computing time. Therefore, the default value
      for the atmospheric pressure is set to a constant. Furthermore,
      if the initial pressure of air volumes are different from the
      atmospheric pressure, then fast pressure transients can happen in
      the first few seconds of the simulation. This can cause numerical
      problems for the solver. To avoid this problem, set the
      atmospheric pressure to the same value as the medium default
      pressure, which is typically set to the parameter
      <code>Medium.p_default</code>. For medium models for moist air
      and dry air, the default is <code>Medium.p_default=101325</code>
      Pascals.
    </p>
  </li>
  <li>
    <p>
      Different units apply depending on whether data are obtained from
      a file, or from a parameter or an input connector:
    </p>
    <ul>
      <li>When using TMY3 data from a file (e.g.
      <code>USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.mos</code>), the
      units must be the same as the original TMY3 file used by
      EnergyPlus (e.g.
      <code>USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.epw</code>). The
      TMY3 data used by EnergyPlus are in both SI units and non-SI
      units. If <code>Resources/bin/ConvertWeatherData.jar</code> is
      used to convert the <code>.epw</code> file to an
      <code>.mos</code> file, the units of the TMY3 data are preserved
      and the file can be directly used by this data reader. The data
      reader will automatically convert units to the SI units used by
      Modelica. For example, the dry bulb temperature
      <code>TDryBul</code> in TMY3 is in degree Celsius. The data
      reader will automatically convert the data to Kelvin. The wind
      direction <code>winDir</code> in TMY3 is degrees and will be
      automatically converted to radians.
      </li>
      <li>When using data from a parameter or from an input connector,
      the data must be in the SI units used by Modelica. For instance,
      the unit must be <code>Pa</code> for pressure, <code>K</code> for
      temperature, <code>W/m2</code> for solar radiations and
      <code>rad</code> for wind direction.
      </li>
    </ul>
  </li>
  <li>
    <p>
      Hourly and subhourly timestamp are handled in a different way in
      <code>.epw</code> files. From the EnergyPlus Auxiliary Programs
      Document (v9.3.0, p. 63): In hourly data the minute field can be
      <code>00</code> or <code>60</code>. In this case as mentioned in
      the previous section, the weather data is reported at the hourly
      value and the minute field has to be ignored, writing <code>1,
      60</code> or <code>1, 00</code> is equivalent. If the minute
      field is between <code>00</code> and <code>60</code>, the file
      becomes subhourly, in this case the timestamp corresponds to the
      minute field in the considered hour. For example: <code>1,
      30</code> is equivalent to <i>00:30</i> and <code>3, 45</code> is
      equivalent to <i>02:45</i>.<br/>
      (Note the offset in the hour digit.)
    </p>
  </li>
  <li>The ReaderTMY3 should only be used with TMY3 data. It contains a
  time shift for solar radiation data that is explained below. This
  time shift needs to be removed if the user may want to use the
  ReaderTMY3 for other weather data types.
  </li>
</ol>
<h4>
  Implementation
</h4>
<h5>
  Start and end data for annual weather data files
</h5>
<p>
  The TMY3 weather data, as well as the EnergyPlus weather data, start
  at 1:00 AM on January 1, and provide hourly data until midnight on
  December 31. Thus, the first entry for temperatures, humidity, wind
  speed etc. are values at 1:00 AM and not at midnight. Furthermore,
  the TMY3 weather data files can have values at midnight of December
  31 that may be significantly different from the values at 1:00 AM on
  January 1. Since annual simulations require weather data that start
  at 0:00 on January 1, data need to be provided for this hour. Due to
  the possibly large change in weatherdata between 1:00 AM on January 1
  and midnight at December 31, the weather data files in the AixLib
  library do not use the data entry from midnight at December 31 as the
  value for <i>t=0</i>. Rather, the value from 1:00 AM on January 1 is
  duplicated and used for 0:00 on January 1. To maintain a data record
  with <i>8760</i> hours, the weather data record from midnight at
  December 31 is deleted. These changes in the weather data file are
  done in the Java program
  <code>AixLib/Resources/bin/ConvertWeatherData.jar</code> that
  converts EnergyPlus weather data file to Modelica weather data files,
  and which is described above. The length of the weather data is
  calculated as the end time stamp minus start time stamp plus average
  increment, where the average increment is equal to the end time stamp
  minus start time stamp divided by the number of rows minus 1. This
  only works correctly for weather files with equidistant time stamps.
</p>
<h5>
  Time shift for solar radiation data
</h5>
<p>
  To read weather data from the TMY3 weather data file, there are two
  data readers in this model. One data reader obtains all data except
  solar radiation, and the other data reader reads only the solar
  radiation data, shifted by <i>30</i> minutes. The reason for this
  time shift is as follows: The TMY3 weather data file contains for
  solar radiation the \"...radiation received on a horizontal surface
  during the 60-minute period ending at the timestamp.\" Thus, as the
  figure below shows, a more accurate interpolation is obtained if time
  is shifted by <i>30</i> minutes prior to reading the weather data.
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/BoundaryConditions/WeatherData/RadiationTimeShift.png\"
  border=\"1\">
</p>
<h4>
  References
</h4>
<ul>
  <li>Wilcox S. and W. Marion. <i>Users Manual for TMY3 Data Sets</i>.
  Technical Report, NREL/TP-581-43156, revised May 2008.
  </li>
</ul>
<ul>
  <li>September 6, 2021, by Ettore Zanetti:<br/>
    Changed alt and lat to real inputs.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1477\">IBPSA,
    #1477</a>.
  </li>
  <li>May 2, 2021, by Ettore Zanetti:<br/>
    Added altitude to parameters.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1477\">IBPSA,
    #1477</a>.
  </li>
  <li>October 4, 2020, by Ettore Zanetti:<br/>
    Updated documentation for Java weather file generator.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1396\">#1396</a>.
  </li>
  <li>August 20, 2019, by Filip Jorissen:<br/>
    Better clarified the meaning of <code>time</code> in the
    documentation.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1192\">#1192</a>.
  </li>
  <li>March 5, 2019, by Michael Wetter:<br/>
    Updated documentation.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/842\">#842</a>.
  </li>
  <li>September 20, 2018, by Michael Wetter:<br/>
    Corrected documentation.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1022\">#1022</a>.
  </li>
  <li>December 4, 2017, by Michael Wetter:<br/>
    Removed function call to <code>getAbsolutePath</code>, as this
    causes in Dymola 2018FD01 the error \"A call of loadResource with a
    non-literal string remains in the generated code; it will not work
    for an URI.\" when exporting <a href=
    \"modelica://AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZone\">
    AixLib.Fluid.FMI.ExportContainers.Examples.FMUs.ThermalZone</a> as
    an FMU. Instead, if the weather file is specified as a Modelica,
    URI, syntax such as
    <code>Modelica.Utilities.Files.loadResource(\"modelica://AixLib/Resources/weatherdata/USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.mos\")</code>
    should be used.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/867\">#867</a>.
  </li>
  <li>February 18, 2017, by Filip Jorissen:<br/>
    Infrared radiation on horizontal surface is now delayed by 30
    minutes such that the results in <a href=
    \"modelica://AixLib.BoundaryConditions.SkyTemperature.Examples.BlackBody\">
    TBlaSky</a> are consistent. This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/648\">#648</a>.
  </li>
  <li>December 06, 2016, by Thierry S. Nouidui:<br/>
    Constrained the direct normal radiation to not be bigger than the
    solar constant when using global and diffuse solar radiation data
    provided via the inputs connectors. This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/608\">#608</a>.
  </li>
  <li>April 21, 2016, by Michael Wetter:<br/>
    Introduced <code>absFilNam</code> to avoid multiple calls to
    <a href=
    \"modelica://AixLib.BoundaryConditions.WeatherData.BaseClasses.getAbsolutePath\">
    AixLib.BoundaryConditions.WeatherData.BaseClasses.getAbsolutePath</a>.
    This is for <a href=
    \"https://github.com/lbl-srg/modelica-buildings/issues/506\">Buildings,
    #506</a>.
  </li>
  <li>January 6, 2016, by Moritz Lauster:<br/>
    Changed output <code>radHorIR</code> to <code>HHorIR</code>. This
    is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/376\">#376</a>.
  </li>
  <li>January 4, 2016, by Moritz Lauster:<br/>
    Added a table in documentation with output variables accessible via
    <code>weaBus</code>. This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/376\">#376</a>.
  </li>
  <li>December 15, 2015, by Michael Wetter:<br/>
    Added the block <code>cheTemBlaSky</code>. This also allows to
    graphically connect the black body sky temperature to the weather
    bus, which is required in Dymola 2016 for the variable
    <code>weaBus.TBlaSky</code> to appear in the graphical editor. This
    is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/377\">#377</a>.
  </li>
  <li>September 24, 2015, by Marcus Fuchs:<br/>
    Replace Dymola specific annotation by <code>loadSelector</code> for
    MSL compliancy as reported by @tbeu at <a href=
    \"https://github.com/RWTH-EBC/AixLib/pull/107\">RWTH-EBC/AixLib#107</a>
  </li>
  <li>June 6, 2015, by Michael Wetter:<br/>
    Removed redundant but consistent <code>connect(TBlaSkyCom.TBlaSky,
    weaBus.TBlaSky)</code> statement. This avoids a warning if <a href=
    \"modelica://AixLib.BoundaryConditions.SolarIrradiation.BaseClasses.Examples.SkyClearness\">
    AixLib.BoundaryConditions.SolarIrradiation.BaseClasses.Examples.SkyClearness</a>
    is translated in pedantic mode in Dymola 2016. This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/266\">#266</a>.
  </li>
  <li>March 26, 2015, by Michael Wetter:<br/>
    Added option to obtain the black body sky temperature from a
    parameter or an input signal.
  </li>
  <li>October 17, 2014, by Michael Wetter:<br/>
    Corrected error that led the total and opaque sky cover to be ten
    times too low if its value was obtained from the parameter or the
    input connector. For the standard configuration in which the sky
    cover is obtained from the weather data file, the model was
    correct. This error only affected the other two possible
    configurations.
  </li>
  <li>September 12, 2014, by Michael Wetter:<br/>
    Removed redundant connection <code>connect(conHorRad.HOut,
    cheHorRad.HIn);</code>.
  </li>
  <li>May 30, 2014, by Michael Wetter:<br/>
    Removed undesirable annotation <code>Evaluate=true</code>.
  </li>
  <li>May 5, 2013, by Thierry S. Nouidui:<br/>
    Added the option to use a constant, an input signal or the weather
    file as the source for the ceiling height, the total sky cover, the
    opaque sky cover, the dew point temperature, and the infrared
    horizontal radiation <code>HInfHor</code>.
  </li>
  <li>October 8, 2013, by Michael Wetter:<br/>
    Improved the algorithm that determines the absolute path of the
    file. Now weather files are searched in the path specified, and if
    not found, the urls <code>file://</code>, <code>modelica://</code>
    and <code>modelica://AixLib</code> are added in this order to
    search for the weather file. This allows using the data reader
    without having to specify an absolute path, as long as the
    <code>AixLib</code> library is on the <code>MODELICAPATH</code>.
    This change was implemented in <a href=
    \"modelica://AixLib.BoundaryConditions.WeatherData.BaseClasses.getAbsolutePath\">
    AixLib.BoundaryConditions.WeatherData.BaseClasses.getAbsolutePath</a>
    and improves this weather data reader.
  </li>
  <li>May 2, 2013, by Michael Wetter:<br/>
    Added function call to <code>getAbsolutePath</code>.
  </li>
  <li>October 16, 2012, by Michael Wetter:<br/>
    Added computation of the wet bulb temperature. Computing the wet
    bulb temperature introduces a nonlinear equation. As we have not
    observed an increase in computing time because of computing the wet
    bulb temperature, it is computed by default. By setting the
    parameter <code>computeWetBulbTemperature=false</code>, the
    computation of the wet bulb temperature can be removed. Revised
    documentation.
  </li>
  <li>August 11, 2012, by Wangda Zuo:<br/>
    Renamed <code>radHor</code> to <code>radHorIR</code> and improved
    the optional inputs for radiation data.
  </li>
  <li>July 24, 2012, by Wangda Zuo:<br/>
    Corrected the notes of SI unit requirements for input files.
  </li>
  <li>July 13, 2012, by Michael Wetter:<br/>
    Removed assignment of <code>HGloHor_in</code> in its declaration,
    because this gives an overdetermined system if the input connector
    is used. Removed non-required assignments of attribute
    <code>displayUnit</code>.
  </li>
  <li>February 25, 2012, by Michael Wetter:<br/>
    Added subbus for solar position, which is needed by irradition and
    shading model.
  </li>
  <li>November 29, 2011, by Michael Wetter:<br/>
    Fixed wrong display unit for <code>pAtm_in_internal</code> and made
    propagation of parameter final.
  </li>
  <li>October 27, 2011, by Wangda Zuo:<br/>
    <ol>
      <li>Added optional connectors for dry bulb temperature, relative
      humidity, wind speed, wind direction, global horizontal
      radiation, diffuse horizontal radiation.<br/>
      </li>
      <li>Separate the unit conversion for TMY3 data and data validity
      check.
      </li>
    </ol>
  </li>
  <li>October 3, 2011, by Michael Wetter:<br/>
    Propagated value for sky temperature calculation to make it
    accessible as a parameter.
  </li>
  <li>July 20, 2011, by Michael Wetter:<br/>
    Added the option to use a constant, an input signal or the weather
    file as the source for the atmospheric pressure.
  </li>
  <li>March 15, 2011, by Wangda Zuo:<br/>
    Delete the wet bulb temperature since it may cause numerical
    problem.
  </li>
  <li>March 7, 2011, by Wangda Zuo:<br/>
    Added wet bulb temperature. Changed reader to read only needed
    columns. Added explanation for 30 minutes shift for radiation data.
  </li>
  <li>March 5, 2011, by Michael Wetter:<br/>
    Changed implementation to obtain longitude and time zone directly
    from weather file.
  </li>
  <li>June 25, 2010, by Wangda Zuo:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 24 column 2 - Warning: The summary attribute on the <table> element is obsolete in HTML5
line 425 column 2 - Warning: The summary attribute on the <table> element is obsolete in HTML5
line 469 column 2 - Warning: The summary attribute on the <table> element is obsolete in HTML5
line 640 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Movers/UsersGuide.mo ----
-------- HTML Code --------

<p>
This package contains models for fans and pumps. The same models
are used for fans or pumps.
</p>

<h4>Model description</h4>
<p>A detailed description of the fan and pump models can be
found in
<a href=\"modelica://AixLib/Resources/Images/Fluid/Movers/UsersGuide/2013-IBPSA-Wetter.pdf\">Wetter (2013)</a>.
The models are implemented as described in this paper, except
that equation (20) is no longer used. The reason is that
the transition (24) caused the derivative
</p>
<p align=\"center\" style=\"font-style:italic;\">
 d &Delta;p(r(t), V(t)) &frasl; d r(t)
</p>
<p>
to have an inflection point in the regularization region
<i>r(t) &isin; (&delta;/2, &delta;)</i>.
This caused some models to not converge.
To correct this, for <i>r(t) &lt; &delta;</i>,
the term <i>V(t) &frasl; r(t)</i> in (16)
has been modified so that (16) can be used for any
value of <i>r(t)</i>.
</p>
<p>
Below, the models are briefly described.
</p>
<h5>Performance data</h5>
<p>
The models use
performance curves that compute pressure rise,
electrical power draw and efficiency as a function
of the volume flow rate and the speed.
The following performance curves are implemented:
</p>
<table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\" style=\"border-collapse:collapse;\">
<tr>
<th>Independent variable</th>
<th>Dependent variable</th>
<th>Record for performance data</th>
<th>Function</th>
</tr>
<tr>
<td>Volume flow rate</td>
<td>Pressure</td>
<td><a href=\"modelica://AixLib.Fluid.Movers.BaseClasses.Characteristics.flowParameters\">
flowParameters</a></td>
<td><a href=\"modelica://AixLib.Fluid.Movers.BaseClasses.Characteristics.pressure\">
pressure</a></td>
</tr>
<tr>
<td>Volume flow rate</td>
<td>Efficiency</td>
<td><a href=\"modelica://AixLib.Fluid.Movers.BaseClasses.Characteristics.efficiencyParameters\">
efficiencyParameters</a></td>
<td><a href=\"modelica://AixLib.Fluid.Movers.BaseClasses.Characteristics.efficiency\">
efficiency</a></td>
</tr>
<tr>
<td>Volume flow rate</td>
<td>Power*</td>
<td><a href=\"modelica://AixLib.Fluid.Movers.BaseClasses.Characteristics.powerParameters\">
powerParameters</a></td>
<td><a href=\"modelica://AixLib.Fluid.Movers.BaseClasses.Characteristics.power\">
power</a></td>
</tr>
</table>
<p>*Note: This record should not be used
(i.e. <code>use_powerCharacteristic</code> should be <code>false</code>)
for the movers that take as a control signal
the mass flow rate or the head,
unless also values for the record <code>pressure</code> are provided.
The reason is that for these movers the record <code>pressure</code>
is required to be able to compute the mover speed,
which is required to be able to compute the electrical power
correctly using similarity laws.
If a <code>Pressure</code> record is not provided,
the model will internally override <code>use_powerCharacteristic=false</code>.
In this case the efficiency records will be used.
Note that in this case an error is still introduced,
but it is smaller than when using the power records.
Compare
<a href=\"modelica://AixLib.Fluid.Movers.Validation.PowerSimplified\">
AixLib.Fluid.Movers.Validation.PowerSimplified</a>
with
<a href=\"modelica://AixLib.Fluid.Movers.Validation.PowerExact\">
AixLib.Fluid.Movers.Validation.PowerExact</a>
for an illustration of this error.
</p>
<p>
These performance curves are implemented in
<a href=\"modelica://AixLib.Fluid.Movers.BaseClasses.Characteristics\">
AixLib.Fluid.Movers.BaseClasses.Characteristics</a>,
and are used in the performance records in the package
<a href=\"modelica://AixLib.Fluid.Movers.Data\">
AixLib.Fluid.Movers.Data</a>.
The package
<a href=\"modelica://AixLib.Fluid.Movers.Data\">
AixLib.Fluid.Movers.Data</a>
contains different data records.
</p>
<h5>Models that use performance curves for pressure rise</h5>
<p>
The models
<a href=\"modelica://AixLib.Fluid.Movers.SpeedControlled_y\">
AixLib.Fluid.Movers.SpeedControlled_y</a> and
<a href=\"modelica://AixLib.Fluid.Movers.SpeedControlled_Nrpm\">
AixLib.Fluid.Movers.SpeedControlled_Nrpm</a>
take as an input either a control signal between <i>0</i> and <i>1</i>, or the
rotational speed in units of <i>[1/min]</i>. From this input and the current flow rate,
they compute the pressure rise.
This pressure rise is computed using a user-provided list of operating points that
defines the fan or pump curve at full speed.
For other speeds, similarity laws are used to scale the performance curves, as
described in
<a href=\"modelica://AixLib.Fluid.Movers.BaseClasses.Characteristics.pressure\">
AixLib.Fluid.Movers.BaseClasses.Characteristics.pressure</a>.
</p>

<p>
For example, suppose a pump needs to be modeled whose pressure versus flow relation crosses, at
full speed, the points shown in the table below.
</p>
  <table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\" style=\"border-collapse:collapse;\">
  <tr>
      <th>Volume flow rate [m<sup>3</sup>&frasl;s] </th>
      <th>Head [Pa]</th>
    </tr>
    <tr>
      <td>0.0003</td>
      <td>45000</td>
    </tr>
    <tr>
      <td>0.0006</td>
      <td>35000</td>
    </tr>
    <tr>
      <td>0.0008</td>
      <td>15000</td>
    </tr>
  </table>
<p>
Then, a declaration would be
</p>
<pre>
  AixLib.Fluid.Movers.SpeedControlled_y pum(
    redeclare package Medium = Medium,
    per.pressure(V_flow={0.0003,0.0006,0.0008},
                 dp    ={45,35,15}*1000))
    \"Circulation pump\";
</pre>

<p>
This will model the following pump curve for the pump input signal <code>y=1</code>.
</p>
<p align=\"center\">
<img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/Movers/UsersGuide/pumpCurve.png\"/>
</p>

<h5>Models that directly control the head or the mass flow rate</h5>
<p>
The models <a href=\"modelica://AixLib.Fluid.Movers.FlowControlled_dp\">
AixLib.Fluid.Movers.FlowControlled_dp</a> and
<a href=\"modelica://AixLib.Fluid.Movers.FlowControlled_m_flow\">
AixLib.Fluid.Movers.FlowControlled_m_flow</a>
take as an input the pressure difference or the mass flow rate.
This pressure difference or mass flow rate will be provided by the fan or pump,
i.e., the fan or pump has idealized perfect control and infinite capacity.
Using these models that take as an input the head or the mass flow rate often leads
to smaller system of equations compared to using the models that take
as an input the speed.
</p>
<p>
These models can be configured for three different control inputs.
For
<a href=\"modelica://AixLib.Fluid.Movers.FlowControlled_dp\">
AixLib.Fluid.Movers.FlowControlled_dp</a>,
the head is as follows:
</p>
<ul>
<li>
<p>
If the parameter <code>inputType==AixLib.Fluid.Types.InputType.Continuous</code>,
the head is <code>dp=dp_in</code>, where <code>dp_in</code> is an input connector.
</p>
</li>
<li>
<p>
If the parameter <code>inputType==AixLib.Fluid.Types.InputType.Constant</code>,
the head is <code>dp=constantHead</code>, where <code>constantHead</code> is a parameter.
</p>
</li>
<li>
<p>
If the parameter <code>inputType==AixLib.Fluid.Types.InputType.Stages</code>,
the head is <code>dp=heads</code>, where <code>heads</code> is a
vectorized parameter. For example, if a mover has
two stages and the head of the first stage should be <i>60%</i> of the nominal head
and the second stage equal to <code>dp_nominal</code>, set
<code>heads={0.6, 1}*dp_nominal</code>.
Then, the mover will have the following heads:
</p>
  <table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\" style=\"border-collapse:collapse;\">
  <tr>
      <th>input signal <code>stage</code></th>
      <th>Head [Pa]</th>
    </tr>
    <tr>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0.6*dp_nominal</td>
    </tr>
    <tr>
      <td>2</td>
      <td>dp_nominal</td>
    </tr>
</table>
</li>
</ul>
<p>
Similarly, for
<a href=\"modelica://AixLib.Fluid.Movers.FlowControlled_m_flow\">
AixLib.Fluid.Movers.FlowControlled_m_flow</a>,
the mass flow rate is as follows:
</p>
<ul>
<li>
<p>
If the parameter <code>inputType==AixLib.Fluid.Types.InputType.Continuous</code>,
the mass flow rate is <code>m_flow=m_flow_in</code>, where <code>m_flow_in</code> is an input connector.
</p>
</li>
<li>
<p>
If the parameter <code>inputType==AixLib.Fluid.Types.InputType.Constant</code>,
the mass flow rate is <code>m_flow=constantMassFlowRate</code>, where <code>constantMassFlowRate</code> is a parameter.
</p>
</li>
<li>
<p>
If the parameter <code>inputType==AixLib.Fluid.Types.InputType.Stages</code>,
the mass flow rate is <code>m_flow=massFlowRates</code>, where <code>massFlowRates</code> is a
vectorized parameter. For example, if a mover has
two stages and the mass flow rate of the first stage should be <i>60%</i> of the nominal mass flow rate
and the second stage equal to <code>m_flow_nominal</code>, set
<code>massFlowRates={0.6, 1}*m_flow_nominal</code>.
Then, the mover will have the following mass flow rates:
</p>
  <table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\" style=\"border-collapse:collapse;\">
  <tr>
      <th>input signal <code>stage</code></th>
      <th>Mass flow rates [kg/s]</th>
    </tr>
    <tr>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0.6*m_flow_nominal</td>
    </tr>
    <tr>
      <td>2</td>
      <td>m_flow_nominal</td>
    </tr>
</table>
</li>
</ul>
<p>
These two models do not need to use a performance curve for the flow
characteristics.
The reason is that</p>
<ul>
<li>
for given pressure rise (or mass flow rate), the mass flow rate (or pressure rise)
is computed from the flow resistance of the duct or piping network, and
</li>
<li>
at zero pressure difference, solving for the flow rate and the revolution leads to a singularity.
</li>
</ul>
<p>
However, the computation of the electrical power consumption
requires the mover speed to be known
and the computation of the mover speed requires the performance
curves for the flow and efficiency/power characteristics.
Therefore these performance curves do need to be provided
if the user desires a correct electrical power computation.
If the curves are not provided, a simplified computation is used,
where the efficiency curve is used and assumed to be correct for all speeds.
This loss of accuracy has the advantage that it allows to use the
mover models without requiring flow and efficiency/power characteristics.
</p>
<p>
The model <a href=\"modelica://AixLib.Fluid.Movers.FlowControlled_dp\">
AixLib.Fluid.Movers.FlowControlled_dp</a>
has an option to control the mover such
that the pressure difference set point is obtained
across two remote points in the system.
To use this functionality
parameter <code>prescribeSystemPressure</code> has
to be enabled and a differential pressure measurement
must be connected to
the pump input <code>dpMea</code>.
This functionality is demonstrated in
<a href=\"AixLib.Fluid.Movers.Validation.FlowControlled_dpSystem\">
AixLib.Fluid.Movers.Validation.FlowControlled_dpSystem</a>.
</p>
<p>
The models <a href=\"modelica://AixLib.Fluid.Movers.FlowControlled_dp\">
AixLib.Fluid.Movers.FlowControlled_dp</a> and
<a href=\"modelica://AixLib.Fluid.Movers.FlowControlled_m_flow\">
AixLib.Fluid.Movers.FlowControlled_m_flow</a>
both have a parameter <code>m_flow_nominal</code>. For
<a href=\"modelica://AixLib.Fluid.Movers.FlowControlled_m_flow\">
AixLib.Fluid.Movers.FlowControlled_m_flow</a>, this parameter
is used for convenience to set a default value for the parameters
<code>constantMassFlowRate</code> and
<code>massFlowRates</code>.
For both models, the value is also used for the following:
</p>

<ul>
<li>
To compute the
size of the fluid volume that can be used to approximate the
inertia of the mover if the energy dynamics is selected to be dynamic.
</li>
<li>
To compute a default pressure curve if no pressure curve has been specified
in the record <code>per.pressure</code>.
The default pressure curve is the line that intersects
<code>(dp, V_flow) = (dp_nominal, 0)</code> and
<code>(dp, V_flow) = (m_flow_nominal/rho_default, 0)</code>.
</li>
<li>
To regularize the equations near zero flow rate to ensure a numerically
robust model.
</li>
</ul>
<p>
However, otherwise <code>m_flow_nominal</code> does not affect the mass flow rate of the mover as
the mass flow rate is determined by the input signal or the above explained parameters.
</p>
<h5>Start-up and shut-down transients</h5>
<p>
All models have a parameter <code>use_inputFilter</code>. This
parameter affects the fan output as follows:
</p>
<ol>
<li>
If <code>use_inputFilter=false</code>, then the input signal <code>y</code> (or
<code>Nrpm</code>, <code>m_flow_in</code>, or <code>dp_in</code>)
is equal to the fan speed (or the mass flow rate or pressure rise).
Thus, a step change in the input signal causes a step change in the fan speed (or mass flow rate or pressure rise).
</li>
<li>
If <code>use_inputFilter=true</code>, which is the default,
then the fan speed (or the mass flow rate or the pressure rise)
is equal to the output of a filter. This filter is implemented
as a 2nd order differential equation and can be thought of as
approximating the inertia of the rotor and the fluid.
Thus, a step change in the fan input signal will cause a gradual change
in the fan speed.
The filter has a parameter <code>riseTime</code>, which by default is set to
<i>30</i> seconds.
The rise time is the time required to reach <i>99.6%</i> of the full speed, or,
if the fan is switched off, to reach a fan speed of <i>0.4%</i>.
</li>
</ol>
<p>
The figure below shows for a fan with <code>use_inputFilter=true</code>
and <code>riseTime=30</code> seconds the
speed input signal and the actual speed.</p>
<p align=\"center\">
<img alt=\"image\" src=\"modelica://AixLib/Resources/Images/Fluid/Movers/UsersGuide/fanSpeedFiltered.png\"/>
</p>

<p>
Although many simulations do not require such a detailed model
that approximates the transients of fans or pumps, it turns
out that using this filter can reduce computing time and
can lead to fewer convergence problems in large system models.
With a filter, any sudden change in control signal, such as when
a fan switches on, is damped before it affects the air flow rate.
This continuous change in flow rate turns out to be easier, and in
some cases faster, to simulate compared to a step change.
For most simulations, we therefore recommend to use the default settings
of <code>use_inputFilter=true</code> and <code>riseTime=30</code> seconds.
An exception are situations in which the fan or pump is operated at a fixed speed during
the whole simulation. In this case, set <code>use_inputFilter=false</code>.
</p>
<p>
Note that if the fan is part of a closed loop control, then the filter affects
the transient response of the control.
When changing the value of <code>use_inputFilter</code>, the control gains
may need to be retuned.
We now present values control parameters that seem to work in most cases.
Suppose there is a closed loop control with a PI-controller
<a href=\"modelica://AixLib.Controls.Continuous.LimPID\">
AixLib.Controls.Continuous.LimPID</a>
and a fan or pump, configured with <code>use_inputFilter=true</code> and <code>riseTime=30</code> seconds.
Assume that the transient response of the other dynamic elements in the control loop is fast
compared to the rise time of the filter.
Then, a proportional gain of <code>k=0.5</code> and an integrator time constant of
<code>Ti=15</code> seconds often yields satisfactory closed loop control performance.
These values may need to be changed for different applications as they are also a function
of the loop gain.
If the control loop shows oscillatory behavior, then reduce <code>k</code> and/or increase <code>Ti</code>.
If the control loop reacts too slow, do the opposite.
</p>

<h5>Efficiency and electrical power consumption</h5>
<p>
All models compute the motor power draw <i>P<sub>ele</sub></i>,
the hydraulic power input <i>W<sub>hyd</sub></i>, the flow work
<i>W<sub>flo</sub></i> and the heat dissipated into the medium
<i>Q</i>. Based on the first law, the flow work is
</p>
<p align=\"center\" style=\"font-style:italic;\">
  W<sub>flo</sub> = | V&#775; &Delta;p |,
</p>
<p>
where <i>V&#775;</i> is the volume flow rate and
<i>&Delta;p</i> is the pressure rise.
The heat dissipated into the medium is as follows:
If the motor is cooled by the fluid, as indicated by
<code>per.motorCooledByFluid=true</code>, then the heat dissipated into the medium is
</p>
<p align=\"center\" style=\"font-style:italic;\">
  Q = P<sub>ele</sub> - W<sub>flo</sub>.
</p>

<p>
If <code>per.motorCooledByFluid=false</code>, then the motor is outside the fluid stream,
and only the shaft, or hydraulic, work <i>W<sub>hyd</sub></i> enters the thermodynamic
control volume. Hence,
</p>
<p align=\"center\" style=\"font-style:italic;\">
  Q = W<sub>hyd</sub> - W<sub>flo</sub>.
</p>
<p>The efficiencies are computed as</p>
<p align=\"center\" style=\"font-style:italic;\">
  &eta; = W<sub>flo</sub> &frasl; P<sub>ele</sub> = &eta;<sub>hyd</sub> &nbsp; &eta;<sub>mot</sub> <br/>
  &eta;<sub>hyd</sub> = W<sub>flo</sub> &frasl; W<sub>hyd</sub> <br/>
  &eta;<sub>mot</sub> = W<sub>hyd</sub> &frasl; P<sub>ele</sub> <br/>
</p>
<p>where
<i>&eta;<sub>hyd</sub></i> is the hydraulic efficiency,
<i>&eta;<sub>mot</sub></i> is the motor efficiency and
<i>Q</i> is the heat released by the motor.
</p>
<p>
If <code>per.use_powerCharacteristic=true</code>,
then a set of data points for the power <i>P<sub>ele</sub></i> for different
volume flow rates at full speed needs to be provided by the user.
Using the flow work <i>W<sub>flo</sub></i> and the electrical power input
<i>P<sub>ele</sub></i>, the total efficiency is computed as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  &eta; = W<sub>flo</sub> &frasl; P<sub>ele</sub>, <br/>
</p>
<p>
and the two efficiencies
<i>&eta;<sub>hyd</sub></i>
and <i>&eta;<sub>mot</sub></i> are computed as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  &eta;<sub>hyd</sub> = 1,<br/>
  &eta;<sub>mot</sub> = &eta;.
</p>
<p>
However, if <code>per.use_powerCharacteristic=false</code>, then
performance data for
<i>&eta;<sub>hyd</sub></i> and
 <i>&eta;<sub>mot</sub></i> need to be provided by the user, and hence
the model computes
</p>
<p align=\"center\" style=\"font-style:italic;\">
  &eta; = &eta;<sub>hyd</sub> &nbsp; &eta;<sub>mot</sub><br/>
  P<sub>ele</sub> = W<sub>flo</sub> &frasl; &eta;.
</p>

<p>
The efficiency data for the motor are a list of points
<i>V&#775;</i> and <i>&eta;<sub>mot</sub></i>.
</p>

<h5>Fluid volume of the component</h5>
<p>
All models can be configured to have a fluid volume at the low-pressure side.
Adding such a volume sometimes helps the solver to find a solution during
initialization and time integration of large models.
</p>

<h5>Enthalpy change of the component</h5>
<p>
If <code>per.motorCooledByFluid=true</code>, then
the enthalpy change between the inlet and outlet fluid port is equal
to the electrical power <i>P<sub>ele</sub></i> that is consumed by the component.
Otherwise, it is equal to the hydraulic work <i>W<sub>hyd</sub></i>.
The parameter <code>addPowerToMedium</code>, which is by default set to
<code>true</code>, can be used to simplify the equations.
If <code>addPowerToMedium = false</code>, then no enthalpy change occurs between
inlet and outlet.
This can lead to simpler equations, but the temperature rise across the component
will be zero. In particular for fans, this simplification may not be permissible.
</p>

<h4>Differences to models in Modelica.Fluid.Machines</h4>
<p>
The models in this package differ from
<a href=\"Modelica.Fluid.Machines\">Modelica.Fluid.Machines</a>
primarily in the following points:
</p>
<ul>
<li>
They use a different base class, which allows to have zero mass flow rate.
The models in <code>Modelica.Fluid</code> restrict the number of revolutions, and hence the flow
rate, to be non-zero.
</li>
<li>
For the model with prescribed pressure, the input signal is the
pressure difference between the two ports, and not the absolute
pressure at <code>port_b</code>.
</li>
<li>
The pressure calculations are based on total pressure in Pascals instead of the pump head in meters.
This change was done to avoid ambiguities in the parameterization if the models are used as a fan
with air as the medium. The original formulation in
<a href=\"Modelica.Fluid.Machines\">Modelica.Fluid.Machines</a> converts head
to pressure using the density <code>medium.d</code>. Therefore, for fans,
head would be converted to pressure using the density of air. However, for pumps,
manufacturers typically publish the head in millimeters water (mmH<sub>2</sub>O).
Therefore, to avoid confusion when using these models with media other than water,
we changed the models to use total pressure in Pascals instead of head in meters.
</li>
<li>
The performance data are interpolated using cubic hermite splines instead of polynomials.
These functions are implemented in
<a href=\"modelica://AixLib.Fluid.Movers.BaseClasses.Characteristics\">
AixLib.Fluid.Movers.BaseClasses.Characteristics</a>.
</li>
</ul>
<h4>References</h4>
<p>
Michael Wetter.
<a href=\"modelica://AixLib/Resources/Images/Fluid/Movers/UsersGuide/2013-IBPSA-Wetter.pdf\">
Fan and pump model that has a unique solution for any pressure
boundary condition and control signal.</a>
<i>Proc. of the 13th Conference of the International Building Performance
Simulation Association</i>, p. 3505-3512. Chambery, France. August 2013.
</p>

-------- Corrected Code --------
<p>
  This package contains models for fans and pumps. The same models are
  used for fans or pumps.
</p>
<h4>
  Model description
</h4>
<p>
  A detailed description of the fan and pump models can be found in
  <a href=
  \"modelica://AixLib/Resources/Images/Fluid/Movers/UsersGuide/2013-IBPSA-Wetter.pdf\">
  Wetter (2013)</a>. The models are implemented as described in this
  paper, except that equation (20) is no longer used. The reason is
  that the transition (24) caused the derivative
</p>
<p align=\"center\" style=\"font-style:italic;\">
  d Δp(r(t), V(t)) ⁄ d r(t)
</p>
<p>
  to have an inflection point in the regularization region <i>r(t) ∈
  (δ/2, δ)</i>. This caused some models to not converge. To correct
  this, for <i>r(t) &lt; δ</i>, the term <i>V(t) ⁄ r(t)</i> in (16) has
  been modified so that (16) can be used for any value of <i>r(t)</i>.
</p>
<p>
  Below, the models are briefly described.
</p>
<h5>
  Performance data
</h5>
<p>
  The models use performance curves that compute pressure rise,
  electrical power draw and efficiency as a function of the volume flow
  rate and the speed. The following performance curves are implemented:
</p>
<table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\"
style=\"border-collapse:collapse;\">
  <tr>
    <th>
      Independent variable
    </th>
    <th>
      Dependent variable
    </th>
    <th>
      Record for performance data
    </th>
    <th>
      Function
    </th>
  </tr>
  <tr>
    <td>
      Volume flow rate
    </td>
    <td>
      Pressure
    </td>
    <td>
      <a href=
      \"modelica://AixLib.Fluid.Movers.BaseClasses.Characteristics.flowParameters\">
      flowParameters</a>
    </td>
    <td>
      <a href=
      \"modelica://AixLib.Fluid.Movers.BaseClasses.Characteristics.pressure\">
      pressure</a>
    </td>
  </tr>
  <tr>
    <td>
      Volume flow rate
    </td>
    <td>
      Efficiency
    </td>
    <td>
      <a href=
      \"modelica://AixLib.Fluid.Movers.BaseClasses.Characteristics.efficiencyParameters\">
      efficiencyParameters</a>
    </td>
    <td>
      <a href=
      \"modelica://AixLib.Fluid.Movers.BaseClasses.Characteristics.efficiency\">
      efficiency</a>
    </td>
  </tr>
  <tr>
    <td>
      Volume flow rate
    </td>
    <td>
      Power*
    </td>
    <td>
      <a href=
      \"modelica://AixLib.Fluid.Movers.BaseClasses.Characteristics.powerParameters\">
      powerParameters</a>
    </td>
    <td>
      <a href=
      \"modelica://AixLib.Fluid.Movers.BaseClasses.Characteristics.power\">
      power</a>
    </td>
  </tr>
</table>
<p>
  *Note: This record should not be used (i.e.
  <code>use_powerCharacteristic</code> should be <code>false</code>)
  for the movers that take as a control signal the mass flow rate or
  the head, unless also values for the record <code>pressure</code> are
  provided. The reason is that for these movers the record
  <code>pressure</code> is required to be able to compute the mover
  speed, which is required to be able to compute the electrical power
  correctly using similarity laws. If a <code>Pressure</code> record is
  not provided, the model will internally override
  <code>use_powerCharacteristic=false</code>. In this case the
  efficiency records will be used. Note that in this case an error is
  still introduced, but it is smaller than when using the power
  records. Compare <a href=
  \"modelica://AixLib.Fluid.Movers.Validation.PowerSimplified\">AixLib.Fluid.Movers.Validation.PowerSimplified</a>
  with <a href=
  \"modelica://AixLib.Fluid.Movers.Validation.PowerExact\">AixLib.Fluid.Movers.Validation.PowerExact</a>
  for an illustration of this error.
</p>
<p>
  These performance curves are implemented in <a href=
  \"modelica://AixLib.Fluid.Movers.BaseClasses.Characteristics\">AixLib.Fluid.Movers.BaseClasses.Characteristics</a>,
  and are used in the performance records in the package <a href=
  \"modelica://AixLib.Fluid.Movers.Data\">AixLib.Fluid.Movers.Data</a>.
  The package <a href=
  \"modelica://AixLib.Fluid.Movers.Data\">AixLib.Fluid.Movers.Data</a>
  contains different data records.
</p>
<h5>
  Models that use performance curves for pressure rise
</h5>
<p>
  The models <a href=
  \"modelica://AixLib.Fluid.Movers.SpeedControlled_y\">AixLib.Fluid.Movers.SpeedControlled_y</a>
  and <a href=
  \"modelica://AixLib.Fluid.Movers.SpeedControlled_Nrpm\">AixLib.Fluid.Movers.SpeedControlled_Nrpm</a>
  take as an input either a control signal between <i>0</i> and
  <i>1</i>, or the rotational speed in units of <i>[1/min]</i>. From
  this input and the current flow rate, they compute the pressure rise.
  This pressure rise is computed using a user-provided list of
  operating points that defines the fan or pump curve at full speed.
  For other speeds, similarity laws are used to scale the performance
  curves, as described in <a href=
  \"modelica://AixLib.Fluid.Movers.BaseClasses.Characteristics.pressure\">
  AixLib.Fluid.Movers.BaseClasses.Characteristics.pressure</a>.
</p>
<p>
  For example, suppose a pump needs to be modeled whose pressure versus
  flow relation crosses, at full speed, the points shown in the table
  below.
</p>
<table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\"
style=\"border-collapse:collapse;\">
  <tr>
    <th>
      Volume flow rate [m<sup>3</sup>⁄s]
    </th>
    <th>
      Head [Pa]
    </th>
  </tr>
  <tr>
    <td>
      0.0003
    </td>
    <td>
      45000
    </td>
  </tr>
  <tr>
    <td>
      0.0006
    </td>
    <td>
      35000
    </td>
  </tr>
  <tr>
    <td>
      0.0008
    </td>
    <td>
      15000
    </td>
  </tr>
</table>
<p>
  Then, a declaration would be
</p>
<pre>
  AixLib.Fluid.Movers.SpeedControlled_y pum(
    redeclare package Medium = Medium,
    per.pressure(V_flow={0.0003,0.0006,0.0008},
                 dp    ={45,35,15}*1000))
    \"Circulation pump\";
</pre>
<p>
  This will model the following pump curve for the pump input signal
  <code>y=1</code>.
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/Movers/UsersGuide/pumpCurve.png\">
</p>
<h5>
  Models that directly control the head or the mass flow rate
</h5>
<p>
  The models <a href=
  \"modelica://AixLib.Fluid.Movers.FlowControlled_dp\">AixLib.Fluid.Movers.FlowControlled_dp</a>
  and <a href=
  \"modelica://AixLib.Fluid.Movers.FlowControlled_m_flow\">AixLib.Fluid.Movers.FlowControlled_m_flow</a>
  take as an input the pressure difference or the mass flow rate. This
  pressure difference or mass flow rate will be provided by the fan or
  pump, i.e., the fan or pump has idealized perfect control and
  infinite capacity. Using these models that take as an input the head
  or the mass flow rate often leads to smaller system of equations
  compared to using the models that take as an input the speed.
</p>
<p>
  These models can be configured for three different control inputs.
  For <a href=
  \"modelica://AixLib.Fluid.Movers.FlowControlled_dp\">AixLib.Fluid.Movers.FlowControlled_dp</a>,
  the head is as follows:
</p>
<ul>
  <li>
    <p>
      If the parameter
      <code>inputType==AixLib.Fluid.Types.InputType.Continuous</code>,
      the head is <code>dp=dp_in</code>, where <code>dp_in</code> is an
      input connector.
    </p>
  </li>
  <li>
    <p>
      If the parameter
      <code>inputType==AixLib.Fluid.Types.InputType.Constant</code>,
      the head is <code>dp=constantHead</code>, where
      <code>constantHead</code> is a parameter.
    </p>
  </li>
  <li>
    <p>
      If the parameter
      <code>inputType==AixLib.Fluid.Types.InputType.Stages</code>, the
      head is <code>dp=heads</code>, where <code>heads</code> is a
      vectorized parameter. For example, if a mover has two stages and
      the head of the first stage should be <i>60%</i> of the nominal
      head and the second stage equal to <code>dp_nominal</code>, set
      <code>heads={0.6, 1}*dp_nominal</code>. Then, the mover will have
      the following heads:
    </p>
    <table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\"
    style=\"border-collapse:collapse;\">
      <tr>
        <th>
          input signal <code>stage</code>
        </th>
        <th>
          Head [Pa]
        </th>
      </tr>
      <tr>
        <td>
          0
        </td>
        <td>
          0
        </td>
      </tr>
      <tr>
        <td>
          1
        </td>
        <td>
          0.6*dp_nominal
        </td>
      </tr>
      <tr>
        <td>
          2
        </td>
        <td>
          dp_nominal
        </td>
      </tr>
    </table>
  </li>
</ul>
<p>
  Similarly, for <a href=
  \"modelica://AixLib.Fluid.Movers.FlowControlled_m_flow\">AixLib.Fluid.Movers.FlowControlled_m_flow</a>,
  the mass flow rate is as follows:
</p>
<ul>
  <li>
    <p>
      If the parameter
      <code>inputType==AixLib.Fluid.Types.InputType.Continuous</code>,
      the mass flow rate is <code>m_flow=m_flow_in</code>, where
      <code>m_flow_in</code> is an input connector.
    </p>
  </li>
  <li>
    <p>
      If the parameter
      <code>inputType==AixLib.Fluid.Types.InputType.Constant</code>,
      the mass flow rate is <code>m_flow=constantMassFlowRate</code>,
      where <code>constantMassFlowRate</code> is a parameter.
    </p>
  </li>
  <li>
    <p>
      If the parameter
      <code>inputType==AixLib.Fluid.Types.InputType.Stages</code>, the
      mass flow rate is <code>m_flow=massFlowRates</code>, where
      <code>massFlowRates</code> is a vectorized parameter. For
      example, if a mover has two stages and the mass flow rate of the
      first stage should be <i>60%</i> of the nominal mass flow rate
      and the second stage equal to <code>m_flow_nominal</code>, set
      <code>massFlowRates={0.6, 1}*m_flow_nominal</code>. Then, the
      mover will have the following mass flow rates:
    </p>
    <table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\"
    style=\"border-collapse:collapse;\">
      <tr>
        <th>
          input signal <code>stage</code>
        </th>
        <th>
          Mass flow rates [kg/s]
        </th>
      </tr>
      <tr>
        <td>
          0
        </td>
        <td>
          0
        </td>
      </tr>
      <tr>
        <td>
          1
        </td>
        <td>
          0.6*m_flow_nominal
        </td>
      </tr>
      <tr>
        <td>
          2
        </td>
        <td>
          m_flow_nominal
        </td>
      </tr>
    </table>
  </li>
</ul>
<p>
  These two models do not need to use a performance curve for the flow
  characteristics. The reason is that
</p>
<ul>
  <li>for given pressure rise (or mass flow rate), the mass flow rate
  (or pressure rise) is computed from the flow resistance of the duct
  or piping network, and
  </li>
  <li>at zero pressure difference, solving for the flow rate and the
  revolution leads to a singularity.
  </li>
</ul>
<p>
  However, the computation of the electrical power consumption requires
  the mover speed to be known and the computation of the mover speed
  requires the performance curves for the flow and efficiency/power
  characteristics. Therefore these performance curves do need to be
  provided if the user desires a correct electrical power computation.
  If the curves are not provided, a simplified computation is used,
  where the efficiency curve is used and assumed to be correct for all
  speeds. This loss of accuracy has the advantage that it allows to use
  the mover models without requiring flow and efficiency/power
  characteristics.
</p>
<p>
  The model <a href=
  \"modelica://AixLib.Fluid.Movers.FlowControlled_dp\">AixLib.Fluid.Movers.FlowControlled_dp</a>
  has an option to control the mover such that the pressure difference
  set point is obtained across two remote points in the system. To use
  this functionality parameter <code>prescribeSystemPressure</code> has
  to be enabled and a differential pressure measurement must be
  connected to the pump input <code>dpMea</code>. This functionality is
  demonstrated in <a href=
  \"AixLib.Fluid.Movers.Validation.FlowControlled_dpSystem\">AixLib.Fluid.Movers.Validation.FlowControlled_dpSystem</a>.
</p>
<p>
  The models <a href=
  \"modelica://AixLib.Fluid.Movers.FlowControlled_dp\">AixLib.Fluid.Movers.FlowControlled_dp</a>
  and <a href=
  \"modelica://AixLib.Fluid.Movers.FlowControlled_m_flow\">AixLib.Fluid.Movers.FlowControlled_m_flow</a>
  both have a parameter <code>m_flow_nominal</code>. For <a href=
  \"modelica://AixLib.Fluid.Movers.FlowControlled_m_flow\">AixLib.Fluid.Movers.FlowControlled_m_flow</a>,
  this parameter is used for convenience to set a default value for the
  parameters <code>constantMassFlowRate</code> and
  <code>massFlowRates</code>. For both models, the value is also used
  for the following:
</p>
<ul>
  <li>To compute the size of the fluid volume that can be used to
  approximate the inertia of the mover if the energy dynamics is
  selected to be dynamic.
  </li>
  <li>To compute a default pressure curve if no pressure curve has been
  specified in the record <code>per.pressure</code>. The default
  pressure curve is the line that intersects <code>(dp, V_flow) =
  (dp_nominal, 0)</code> and <code>(dp, V_flow) =
  (m_flow_nominal/rho_default, 0)</code>.
  </li>
  <li>To regularize the equations near zero flow rate to ensure a
  numerically robust model.
  </li>
</ul>
<p>
  However, otherwise <code>m_flow_nominal</code> does not affect the
  mass flow rate of the mover as the mass flow rate is determined by
  the input signal or the above explained parameters.
</p>
<h5>
  Start-up and shut-down transients
</h5>
<p>
  All models have a parameter <code>use_inputFilter</code>. This
  parameter affects the fan output as follows:
</p>
<ol>
  <li>If <code>use_inputFilter=false</code>, then the input signal
  <code>y</code> (or <code>Nrpm</code>, <code>m_flow_in</code>, or
  <code>dp_in</code>) is equal to the fan speed (or the mass flow rate
  or pressure rise). Thus, a step change in the input signal causes a
  step change in the fan speed (or mass flow rate or pressure rise).
  </li>
  <li>If <code>use_inputFilter=true</code>, which is the default, then
  the fan speed (or the mass flow rate or the pressure rise) is equal
  to the output of a filter. This filter is implemented as a 2nd order
  differential equation and can be thought of as approximating the
  inertia of the rotor and the fluid. Thus, a step change in the fan
  input signal will cause a gradual change in the fan speed. The filter
  has a parameter <code>riseTime</code>, which by default is set to <i>
    30</i> seconds. The rise time is the time required to reach
    <i>99.6%</i> of the full speed, or, if the fan is switched off, to
    reach a fan speed of <i>0.4%</i>.
  </li>
</ol>
<p>
  The figure below shows for a fan with
  <code>use_inputFilter=true</code> and <code>riseTime=30</code>
  seconds the speed input signal and the actual speed.
</p>
<p align=\"center\">
  <img alt=\"image\" src=
  \"modelica://AixLib/Resources/Images/Fluid/Movers/UsersGuide/fanSpeedFiltered.png\">
</p>
<p>
  Although many simulations do not require such a detailed model that
  approximates the transients of fans or pumps, it turns out that using
  this filter can reduce computing time and can lead to fewer
  convergence problems in large system models. With a filter, any
  sudden change in control signal, such as when a fan switches on, is
  damped before it affects the air flow rate. This continuous change in
  flow rate turns out to be easier, and in some cases faster, to
  simulate compared to a step change. For most simulations, we
  therefore recommend to use the default settings of
  <code>use_inputFilter=true</code> and <code>riseTime=30</code>
  seconds. An exception are situations in which the fan or pump is
  operated at a fixed speed during the whole simulation. In this case,
  set <code>use_inputFilter=false</code>.
</p>
<p>
  Note that if the fan is part of a closed loop control, then the
  filter affects the transient response of the control. When changing
  the value of <code>use_inputFilter</code>, the control gains may need
  to be retuned. We now present values control parameters that seem to
  work in most cases. Suppose there is a closed loop control with a
  PI-controller <a href=
  \"modelica://AixLib.Controls.Continuous.LimPID\">AixLib.Controls.Continuous.LimPID</a>
  and a fan or pump, configured with <code>use_inputFilter=true</code>
  and <code>riseTime=30</code> seconds. Assume that the transient
  response of the other dynamic elements in the control loop is fast
  compared to the rise time of the filter. Then, a proportional gain of
  <code>k=0.5</code> and an integrator time constant of
  <code>Ti=15</code> seconds often yields satisfactory closed loop
  control performance. These values may need to be changed for
  different applications as they are also a function of the loop gain.
  If the control loop shows oscillatory behavior, then reduce
  <code>k</code> and/or increase <code>Ti</code>. If the control loop
  reacts too slow, do the opposite.
</p>
<h5>
  Efficiency and electrical power consumption
</h5>
<p>
  All models compute the motor power draw <i>P<sub>ele</sub></i>, the
  hydraulic power input <i>W<sub>hyd</sub></i>, the flow work
  <i>W<sub>flo</sub></i> and the heat dissipated into the medium
  <i>Q</i>. Based on the first law, the flow work is
</p>
<p align=\"center\" style=\"font-style:italic;\">
  W<sub>flo</sub> = | V̇ Δp |,
</p>
<p>
  where <i>V̇</i> is the volume flow rate and <i>Δp</i> is the pressure
  rise. The heat dissipated into the medium is as follows: If the motor
  is cooled by the fluid, as indicated by
  <code>per.motorCooledByFluid=true</code>, then the heat dissipated
  into the medium is
</p>
<p align=\"center\" style=\"font-style:italic;\">
  Q = P<sub>ele</sub> - W<sub>flo</sub>.
</p>
<p>
  If <code>per.motorCooledByFluid=false</code>, then the motor is
  outside the fluid stream, and only the shaft, or hydraulic, work
  <i>W<sub>hyd</sub></i> enters the thermodynamic control volume.
  Hence,
</p>
<p align=\"center\" style=\"font-style:italic;\">
  Q = W<sub>hyd</sub> - W<sub>flo</sub>.
</p>
<p>
  The efficiencies are computed as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  η = W<sub>flo</sub> ⁄ P<sub>ele</sub> = η<sub>hyd</sub> &#160;
  η<sub>mot</sub><br/>
  η<sub>hyd</sub> = W<sub>flo</sub> ⁄ W<sub>hyd</sub><br/>
  η<sub>mot</sub> = W<sub>hyd</sub> ⁄ P<sub>ele</sub><br/>
</p>
<p>
  where <i>η<sub>hyd</sub></i> is the hydraulic efficiency,
  <i>η<sub>mot</sub></i> is the motor efficiency and <i>Q</i> is the
  heat released by the motor.
</p>
<p>
  If <code>per.use_powerCharacteristic=true</code>, then a set of data
  points for the power <i>P<sub>ele</sub></i> for different volume flow
  rates at full speed needs to be provided by the user. Using the flow
  work <i>W<sub>flo</sub></i> and the electrical power input
  <i>P<sub>ele</sub></i>, the total efficiency is computed as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  η = W<sub>flo</sub> ⁄ P<sub>ele</sub>,<br/>
</p>
<p>
  and the two efficiencies <i>η<sub>hyd</sub></i> and
  <i>η<sub>mot</sub></i> are computed as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  η<sub>hyd</sub> = 1,<br/>
  η<sub>mot</sub> = η.
</p>
<p>
  However, if <code>per.use_powerCharacteristic=false</code>, then
  performance data for <i>η<sub>hyd</sub></i> and
  <i>η<sub>mot</sub></i> need to be provided by the user, and hence the
  model computes
</p>
<p align=\"center\" style=\"font-style:italic;\">
  η = η<sub>hyd</sub> &#160; η<sub>mot</sub><br/>
  P<sub>ele</sub> = W<sub>flo</sub> ⁄ η.
</p>
<p>
  The efficiency data for the motor are a list of points <i>V̇</i> and
  <i>η<sub>mot</sub></i>.
</p>
<h5>
  Fluid volume of the component
</h5>
<p>
  All models can be configured to have a fluid volume at the
  low-pressure side. Adding such a volume sometimes helps the solver to
  find a solution during initialization and time integration of large
  models.
</p>
<h5>
  Enthalpy change of the component
</h5>
<p>
  If <code>per.motorCooledByFluid=true</code>, then the enthalpy change
  between the inlet and outlet fluid port is equal to the electrical
  power <i>P<sub>ele</sub></i> that is consumed by the component.
  Otherwise, it is equal to the hydraulic work <i>W<sub>hyd</sub></i>.
  The parameter <code>addPowerToMedium</code>, which is by default set
  to <code>true</code>, can be used to simplify the equations. If
  <code>addPowerToMedium = false</code>, then no enthalpy change occurs
  between inlet and outlet. This can lead to simpler equations, but the
  temperature rise across the component will be zero. In particular for
  fans, this simplification may not be permissible.
</p>
<h4>
  Differences to models in Modelica.Fluid.Machines
</h4>
<p>
  The models in this package differ from <a href=
  \"Modelica.Fluid.Machines\">Modelica.Fluid.Machines</a> primarily in
  the following points:
</p>
<ul>
  <li>They use a different base class, which allows to have zero mass
  flow rate. The models in <code>Modelica.Fluid</code> restrict the
  number of revolutions, and hence the flow rate, to be non-zero.
  </li>
  <li>For the model with prescribed pressure, the input signal is the
  pressure difference between the two ports, and not the absolute
  pressure at <code>port_b</code>.
  </li>
  <li>The pressure calculations are based on total pressure in Pascals
  instead of the pump head in meters. This change was done to avoid
  ambiguities in the parameterization if the models are used as a fan
  with air as the medium. The original formulation in <a href=
  \"Modelica.Fluid.Machines\">Modelica.Fluid.Machines</a> converts head
  to pressure using the density <code>medium.d</code>. Therefore, for
  fans, head would be converted to pressure using the density of air.
  However, for pumps, manufacturers typically publish the head in
  millimeters water (mmH<sub>2</sub>O). Therefore, to avoid confusion
  when using these models with media other than water, we changed the
  models to use total pressure in Pascals instead of head in meters.
  </li>
  <li>The performance data are interpolated using cubic hermite splines
  instead of polynomials. These functions are implemented in <a href=
  \"modelica://AixLib.Fluid.Movers.BaseClasses.Characteristics\">AixLib.Fluid.Movers.BaseClasses.Characteristics</a>.
  </li>
</ul>
<h4>
  References
</h4>
<p>
  Michael Wetter. <a href=
  \"modelica://AixLib/Resources/Images/Fluid/Movers/UsersGuide/2013-IBPSA-Wetter.pdf\">
  Fan and pump model that has a unique solution for any pressure
  boundary condition and control signal.</a> <i>Proc. of the 13th
  Conference of the International Building Performance Simulation
  Association</i>, p. 3505-3512. Chambery, France. August 2013.
</p>

-------- Errors --------
line 38 column 1 - Warning: The summary attribute on the <table> element is obsolete in HTML5
line 126 column 3 - Warning: The summary attribute on the <table> element is obsolete in HTML5
line 205 column 3 - Warning: The summary attribute on the <table> element is obsolete in HTML5
line 254 column 3 - Warning: The summary attribute on the <table> element is obsolete in HTML5
line 15 column 1 - Warning: <p> attribute "align" not allowed for HTML5
line 158 column 1 - Warning: <p> attribute "align" not allowed for HTML5
line 380 column 1 - Warning: <p> attribute "align" not allowed for HTML5
line 425 column 1 - Warning: <p> attribute "align" not allowed for HTML5
line 435 column 1 - Warning: <p> attribute "align" not allowed for HTML5
line 444 column 1 - Warning: <p> attribute "align" not allowed for HTML5
line 448 column 1 - Warning: <p> attribute "align" not allowed for HTML5
line 465 column 1 - Warning: <p> attribute "align" not allowed for HTML5
line 473 column 1 - Warning: <p> attribute "align" not allowed for HTML5
line 484 column 1 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Controls/Continuous/Examples/NumberOfRequests.mo ----
-------- HTML Code --------

 <ul>
 <li>
 January 12, 2017, by Thierry S. Nouidui:<br/>
 Modified example to prevent simultaneous events
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/646\">#646</a>.
 </li>
 <li>
 November 21, 2011, by Michael Wetter:<br/>
 Added documentation.
 </li>
 </ul>
 
 <p>
 Example that demonstrates the use of the block
 <a href=\"modelica://AixLib.Controls.Continuous.NumberOfRequests\">
 AixLib.Controls.Continuous.NumberOfRequests</a>.
 The parameters of the block are such that the output is incremented
 for each input signal that is strictly larger than <i>0</i>.
 The figure below shows the inputs and the output of the block.
 </p>
 <p align=\"center\">
 <img alt=\"Simulation results\" src=\"modelica://AixLib/Resources/Images/Controls/Continuous/Examples/NumberOfRequests.png\" border=\"1\" />
 </p>
 
-------- Corrected Code --------
<ul>
  <li>January 12, 2017, by Thierry S. Nouidui:<br/>
    Modified example to prevent simultaneous events This is for
    <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/646\">#646</a>.
  </li>
  <li>November 21, 2011, by Michael Wetter:<br/>
    Added documentation.
  </li>
</ul>
<p>
  Example that demonstrates the use of the block <a href=
  \"modelica://AixLib.Controls.Continuous.NumberOfRequests\">AixLib.Controls.Continuous.NumberOfRequests</a>.
  The parameters of the block are such that the output is incremented
  for each input signal that is strictly larger than <i>0</i>. The
  figure below shows the inputs and the output of the block.
</p>
<p align=\"center\">
  <img alt=\"Simulation results\" src=
  \"modelica://AixLib/Resources/Images/Controls/Continuous/Examples/NumberOfRequests.png\"
  border=\"1\">
</p>

-------- Errors --------
line 10 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Movers/BaseClasses/Characteristics/power.mo ----
-------- HTML Code --------

 <p>
 This function computes the fan power consumption for given volume flow rate,
 speed and performance data. The power consumption is
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   P = r<sub>N</sub><sup>3</sup> &nbsp; s(V&#775;/r<sub>N</sub>, d),
 </p>
 <p>
 where
 <i>P</i> is the power consumption,
 <i>r<sub>N</sub></i> is the normalized fan speed,
 <i>V&#775;</i> is the volume flow rate and
 <i>d</i> are performance data for fan or pump power consumption at <i>r<sub>N</sub>=1</i>.
 </p>
 <h4>Implementation</h4>
 <p>
 The function <i>s(&middot;, &middot;)</i> is a cubic hermite spline.
 If the data <i>d</i> define a monotone decreasing sequence, then
 <i>s(&middot;, d)</i> is a monotone decreasing function.
 </p>
 
 <ul>
 <li>
 February 26, 2014, by Filip Jorissen:<br/>
 Changed polynomial to be evaluated at <code>V_flow/r_N</code>
 instead of <code>V_flow</code> to properly account for the
 scaling law. See
 <a href=\"https://github.com/lbl-srg/modelica-buildings/pull/202\">#202</a>
 for a discussion and validation.
 </li>
 <li>
 September 28, 2011, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This function computes the fan power consumption for given volume
  flow rate, speed and performance data. The power consumption is
</p>
<p align=\"center\" style=\"font-style:italic;\">
  P = r<sub>N</sub><sup>3</sup> &#160; s(V̇/r<sub>N</sub>, d),
</p>
<p>
  where <i>P</i> is the power consumption, <i>r<sub>N</sub></i> is the
  normalized fan speed, <i>V̇</i> is the volume flow rate and <i>d</i>
  are performance data for fan or pump power consumption at
  <i>r<sub>N</sub>=1</i>.
</p>
<h4>
  Implementation
</h4>
<p>
  The function <i>s(·, ·)</i> is a cubic hermite spline. If the data
  <i>d</i> define a monotone decreasing sequence, then <i>s(·, d)</i>
  is a monotone decreasing function.
</p>
<ul>
  <li>February 26, 2014, by Filip Jorissen:<br/>
    Changed polynomial to be evaluated at <code>V_flow/r_N</code>
    instead of <code>V_flow</code> to properly account for the scaling
    law. See <a href=
    \"https://github.com/lbl-srg/modelica-buildings/pull/202\">#202</a>
    for a discussion and validation.
  </li>
  <li>September 28, 2011, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 6 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/BaseClasses/FlowModels/basicFlowFunction_m_flow.mo ----
-------- HTML Code --------

 <p>
 Function that computes the pressure drop of flow elements as
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   &Delta;p = sign(m) (m &frasl; k)<sup>2</sup>
 </p>
 <p>
 with regularization near the origin.
 Therefore, the flow coefficient is
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   k = m &frasl; &radic;<span style=\"text-decoration:overline;\">&nbsp;&Delta;p &nbsp;</span>
 </p>
 <p>
 The input <code>m_flow_turbulent</code> determines the location of the regularization.
 </p>
 
 <ul>
 <li>
 December 9, 2019, by Michael Wetter:<br/>
 Added <code>smooth(2, . )</code>, similar to
 <a href=\"modelica://AixLib.Fluid.BaseClasses.FlowModels.basicFlowFunction_dp\">
 AixLib.Fluid.BaseClasses.FlowModels.basicFlowFunction_dp</a>.<br/>
 See <a href=\"https://github.com/ibpsa/modelica-ibpsa/pull/1240\">#1240</a>.
 </li>
 <li>
 January 4, 2019, by Michael Wetter:<br/>
 Set `Inline=false`.<br/>
 See <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1070\">#1070</a>.
 </li>
 <li>
 May 1, 2017, by Filip Jorissen:<br/>
 Revised implementation such that
 <a href=\"modelica://AixLib.Fluid.BaseClasses.FlowModels.basicFlowFunction_m_flow\">
 AixLib.Fluid.BaseClasses.FlowModels.basicFlowFunction_m_flow</a>
 is C2 continuous.
 See <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/725\">#725</a>.
 </li>
 <li>
 January 22, 2016, by Michael Wetter:<br/>
 Corrected type declaration of pressure difference.
 This is
 for <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/404\">#404</a>.
 </li>
 <li>
 July 28, 2015, by Michael Wetter:<br/>
 Removed double declaration of <code>smooth(..)</code> and <code>smoothOrder</code>
 and changed <code>Inline=true</code> to <code>LateInline=true</code>.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/301\">issue 301</a>.
 </li>
 <li>
 July 15, 2015, by Filip Jorissen:<br/>
 New, more efficient implementation based on regularisation using simple polynomial.
 Expanded common subexpressions for function inlining to be possible.
 Set <code>Inline=true</code> for inlining to occur.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/279\">#279</a>.
 </li>
 <li>
 August 10, 2011, by Michael Wetter:<br/>
 Removed <code>if-then</code> optimization that set <code>dp=0</code> if <code>m_flow=0</code>,
 as this causes the derivative to be discontinuous at <code>m_flow=0</code>.
 </li>
 <li>
 August 4, 2011, by Michael Wetter:<br/>
 Removed option to use a linear function. The linear implementation is now done
 in models that call this function. With the previous implementation,
 the symbolic processor may not rearrange the equations, which can lead
 to coupled equations instead of an explicit solution.
 </li>
 <li>
 April 13, 2009, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Function that computes the pressure drop of flow elements as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  Δp = sign(m) (m ⁄ k)<sup>2</sup>
</p>
<p>
  with regularization near the origin. Therefore, the flow coefficient
  is
</p>
<p align=\"center\" style=\"font-style:italic;\">
  k = m ⁄ √<span style=\"text-decoration:overline;\">&#160;Δp
  &#160;</span>
</p>
<p>
  The input <code>m_flow_turbulent</code> determines the location of
  the regularization.
</p>
<ul>
  <li>December 9, 2019, by Michael Wetter:<br/>
    Added <code>smooth(2, . )</code>, similar to <a href=
    \"modelica://AixLib.Fluid.BaseClasses.FlowModels.basicFlowFunction_dp\">
    AixLib.Fluid.BaseClasses.FlowModels.basicFlowFunction_dp</a>.<br/>
    See <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/pull/1240\">#1240</a>.
  </li>
  <li>January 4, 2019, by Michael Wetter:<br/>
    Set `Inline=false`.<br/>
    See <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1070\">#1070</a>.
  </li>
  <li>May 1, 2017, by Filip Jorissen:<br/>
    Revised implementation such that <a href=
    \"modelica://AixLib.Fluid.BaseClasses.FlowModels.basicFlowFunction_m_flow\">
    AixLib.Fluid.BaseClasses.FlowModels.basicFlowFunction_m_flow</a> is
    C2 continuous. See <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/725\">#725</a>.
  </li>
  <li>January 22, 2016, by Michael Wetter:<br/>
    Corrected type declaration of pressure difference. This is for
    <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/404\">#404</a>.
  </li>
  <li>July 28, 2015, by Michael Wetter:<br/>
    Removed double declaration of <code>smooth(..)</code> and
    <code>smoothOrder</code> and changed <code>Inline=true</code> to
    <code>LateInline=true</code>. This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/301\">issue 301</a>.
  </li>
  <li>July 15, 2015, by Filip Jorissen:<br/>
    New, more efficient implementation based on regularisation using
    simple polynomial. Expanded common subexpressions for function
    inlining to be possible. Set <code>Inline=true</code> for inlining
    to occur. This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/279\">#279</a>.
  </li>
  <li>August 10, 2011, by Michael Wetter:<br/>
    Removed <code>if-then</code> optimization that set
    <code>dp=0</code> if <code>m_flow=0</code>, as this causes the
    derivative to be discontinuous at <code>m_flow=0</code>.
  </li>
  <li>August 4, 2011, by Michael Wetter:<br/>
    Removed option to use a linear function. The linear implementation
    is now done in models that call this function. With the previous
    implementation, the symbolic processor may not rearrange the
    equations, which can lead to coupled equations instead of an
    explicit solution.
  </li>
  <li>April 13, 2009, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 5 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 12 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Utilities/Math/Functions/quadraticLinear.mo ----
-------- HTML Code --------

 This function computes
 <p align=\"center\" style=\"font-style:italic;\">
   y =   a<sub>1</sub> + a<sub>2</sub>  x<sub>1</sub>
         + a<sub>3</sub> x<sub>1</sub><sup>2</sup>
         + (a<sub>4</sub> + a<sub>5</sub>  x<sub>1</sub>
         + a<sub>6</sub> x<sub>1</sub><sup>2</sup>)  x<sub>2</sub>
 </p>
 
 <ul>
 <li>
 February 29, 2009 by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
This function computes
<p align=\"center\" style=\"font-style:italic;\">
  y = a<sub>1</sub> + a<sub>2</sub> x<sub>1</sub> + a<sub>3</sub>
  x<sub>1</sub><sup>2</sup> + (a<sub>4</sub> + a<sub>5</sub>
  x<sub>1</sub> + a<sub>6</sub> x<sub>1</sub><sup>2</sup>)
  x<sub>2</sub>
</p>
<ul>
  <li>February 29, 2009 by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 3 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Storage/UsersGuide.mo ----
-------- HTML Code --------

<p>
This user's guide describes the storage tank models.
There are three storage tank models in the this package.
</p>
<table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\" style=\"border-collapse:collapse;\">
<tr><th>Model name</th>       <th>Description</th>     </tr>
<tr>
<td>
<a href=\"modelica://AixLib.Fluid.Storage.Stratified\">
AixLib.Fluid.Storage.Stratified</a>
</td>
<td>
<p>
This is a model of a stratified storage tank as shown in the figure below.
</p>
<p align=\"center\">
<img alt=\"Image of a storage tank\"
src=\"modelica://AixLib/Resources/Images/Fluid/Storage/Stratified.png\"
width=\"387\" height=\"453\"/>
</p>
<p>
The tank uses several volumes to model the stratification.
Heat conduction is modeled between the volumes through the fluid,
and between the volumes and the ambient.
</p>
<p>
The heat port <code>heaPorVol</code> may be used to connect a temperature sensor
that measures the fluid temperature of an individual volume. It may also
be used to add heat to individual volumes, for example if the tank contains
an electrical resistance heater.
</p>
<p>
Similarly, the fluid port <code>fluPorVol</code> may be used to connect a fluid pipe
to an individual volume. This allows for example to draw water from that volume whose temperature
is close to the temperature required by the consumer.
Conversely, water could be added to that tank volume whose temperature is close to the
inlet water temperature.
If you don't use such a pipe, simply leave the ports unconnected.
</p>
<p>
The tank has <code>nSeg</code> fluid volumes. The top segment has the index <code>1</code>.
Thus, to add a heating element to the bottom element, connect a heat input to
<code>heaPorVol[nSeg]</code>.
</p>
<p>
The heat ports outside the tank insulation can be
used to specify an ambient temperature.
Leave these ports unconnected to force adiabatic boundary conditions.
Note, however, that all heat conduction elements through the tank wall (but not the top and bottom) are connected to the
heat port <code>heaPorSid</code>. Thus, not connecting
<code>heaPorSid</code> means an adiabatic boundary condition in the sense
that <code>heaPorSid.Q_flow = 0</code>. This, however, still allows heat to flow
through the tank walls, modeled by <code>conWal</code>, from one fluid volume
to another one.
</p>
</td>
</tr>
<tr>
<td>
<a href=\"modelica://AixLib.Fluid.Storage.StratifiedEnhanced\">
AixLib.Fluid.Storage.StratifiedEnhanced</a>
</td>
<td>
<p>
The model is identical to
<a href=\"modelica://AixLib.Fluid.Storage.Stratified\">
AixLib.Fluid.Storage.Stratified</a>,
except for the following:
</p>
<ul>
<li>
It adds a correction that reduces the numerical dissipation.
</li>
<li>
It does not contain the fluid ports <code>fluPorVol</code> that
connect from the outside to the individual volumes.
</li>
</ul>
<p>
The correction uses a third order upwind scheme to compute the
outlet temperatures of the segments in the tank. This model
is implemented in
<a href=\"modelica://AixLib.Fluid.Storage.BaseClasses.ThirdOrderStratifier\">
AixLib.Fluid.Storage.BaseClasses.ThirdOrderStratifier</a>.
</p>
</td>
</tr>
<tr>
<td>
<a href=\"modelica://AixLib.Fluid.Storage.StratifiedEnhancedInternalHex\">
AixLib.Fluid.Storage.StratifiedEnhancedInternalHex</a>
</td>
<td>
<p>
This model is identical to
<a href=\"modelica://AixLib.Fluid.Storage.StratifiedEnhanced\">
AixLib.Fluid.Storage.StratifiedEnhanced</a>
except that it adds a heat exchanger to the tank.
</p>
<p>
The modifications consist of adding a heat exchanger
and fluid ports to connect to the heat exchanger.
The modifications allow to run a fluid through the tank causing heat transfer to the stored fluid.
A typical example is a storage tank in a solar hot water system.
</p>
<p>
The heat exchanger model assumes flow through the inside of a helical coil heat exchanger,
and stagnant fluid on the outside. Parameters are used to describe the
heat transfer on the inside of the heat exchanger at nominal conditions, and
geometry of the outside of the heat exchanger. This information is used to compute
an <i>hA</i>-value for each side of the coil.
Convection calculations are then performed to identify heat transfer
between the heat transfer fluid and the fluid in the tank.
</p>
<p>
The location of the heat exchanger can be parameterized as follows:
The parameters <code>hHex_a</code> and <code>hHex_b</code> are the heights
of the heat exchanger ports <code>portHex_a</code> and <code>portHex_b</code>,
measured from the bottom of the tank.
For example, to place the port <code>portHex_b</code> at the bottom of the tank,
set <code>hHexB_b=0</code>.
The parameters <code>hHex_a</code> and <code>hHex_b</code> are then used to provide
a default value for the parameters
<code>segHex_a</code> and <code>segHex_b</code>, which are the numbers of the tank
segments to which the heat exchanger ports <code>portHex_a</code> and <code>portHex_b</code>
are connected.
</p>
<p align=\"center\">
<img alt=\"Image of a storage tank\"
src=\"modelica://AixLib/Resources/Images/Fluid/Storage/StratifiedHex.png\"
width=\"458\" height=\"456\"/>
</p>
<p>
Optionally, this model computes a dynamic response of the heat exchanger.
This can be configured using the parameters
<code>energyDynamicsHexSolid</code>,
<code>energyDynamicsHex</code> and
<code>massDynamicsHex</code>.
For this computation, the fluid volume inside the heat exchanger
and the heat capacity of the heat
exchanger wall <code>CHex</code> are approximated.
Both depend on the length <code>lHex</code>
of the heat exchanger.
The model provides default values for these
parameters, as well as for the heat exchanger material which is
assumed to be steel. These default values can be overwritten by the user.
The default values for the heat exchanger geometry are computed assuming
that there is a cylindrical heat exchanger
made of steel whose diameter is half the diameter of the tank, e.g.,
<i>r<sub>Hex</sub>=r<sub>Tan</sub>/2</i>.
Hence, the length of the heat exchanger is approximated as
<i>l<sub>Hex</sub> = 2 r<sub>Hex</sub> &pi; h = 2 r<sub>Tan</sub>/2 &pi; h</i>,
where <i>h</i> is the distance between the heat exchanger inlet and outlet.
The wall thickness is assumed to be <i>10%</i> of the heat exchanger
outer diameter.
For typical applications, users do not need to change these values.
</p>
<p>
Setting <code>energyDynamicsHexSolid</code> to a dynamic balance and
<code>energyDynamicsHex</code> to a steady-state balance may be of interest
to remove very fast dynamics of the fluid, while still modeling slower
dynamics that arises from the metal of the heat exchanger.
By default, <code>energyDynamicsHexSolid</code> is set
to the same value as <code>energyDynamicsHex</code>
as this seems to be the typical configuration.
</p>
<p>
The heat exchanger is implemented in
<a href=\"AixLib.Fluid.Storage.BaseClasses.IndirectTankHeatExchanger\">
AixLib.Fluid.Storage.BaseClasses.IndirectTankHeatExchanger</a>.
</p>
</td>
</tr>
</table>

-------- Corrected Code --------
<p>
  This user's guide describes the storage tank models. There are three
  storage tank models in the this package.
</p>
<table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\"
style=\"border-collapse:collapse;\">
  <tr>
    <th>
      Model name
    </th>
    <th>
      Description
    </th>
  </tr>
  <tr>
    <td>
      <a href=
      \"modelica://AixLib.Fluid.Storage.Stratified\">AixLib.Fluid.Storage.Stratified</a>
    </td>
    <td>
      <p>
        This is a model of a stratified storage tank as shown in the
        figure below.
      </p>
      <p align=\"center\">
        <img alt=\"Image of a storage tank\" src=
        \"modelica://AixLib/Resources/Images/Fluid/Storage/Stratified.png\"
        width=\"387\" height=\"453\">
      </p>
      <p>
        The tank uses several volumes to model the stratification. Heat
        conduction is modeled between the volumes through the fluid,
        and between the volumes and the ambient.
      </p>
      <p>
        The heat port <code>heaPorVol</code> may be used to connect a
        temperature sensor that measures the fluid temperature of an
        individual volume. It may also be used to add heat to
        individual volumes, for example if the tank contains an
        electrical resistance heater.
      </p>
      <p>
        Similarly, the fluid port <code>fluPorVol</code> may be used to
        connect a fluid pipe to an individual volume. This allows for
        example to draw water from that volume whose temperature is
        close to the temperature required by the consumer. Conversely,
        water could be added to that tank volume whose temperature is
        close to the inlet water temperature. If you don't use such a
        pipe, simply leave the ports unconnected.
      </p>
      <p>
        The tank has <code>nSeg</code> fluid volumes. The top segment
        has the index <code>1</code>. Thus, to add a heating element to
        the bottom element, connect a heat input to
        <code>heaPorVol[nSeg]</code>.
      </p>
      <p>
        The heat ports outside the tank insulation can be used to
        specify an ambient temperature. Leave these ports unconnected
        to force adiabatic boundary conditions. Note, however, that all
        heat conduction elements through the tank wall (but not the top
        and bottom) are connected to the heat port
        <code>heaPorSid</code>. Thus, not connecting
        <code>heaPorSid</code> means an adiabatic boundary condition in
        the sense that <code>heaPorSid.Q_flow = 0</code>. This,
        however, still allows heat to flow through the tank walls,
        modeled by <code>conWal</code>, from one fluid volume to
        another one.
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <a href=
      \"modelica://AixLib.Fluid.Storage.StratifiedEnhanced\">AixLib.Fluid.Storage.StratifiedEnhanced</a>
    </td>
    <td>
      <p>
        The model is identical to <a href=
        \"modelica://AixLib.Fluid.Storage.Stratified\">AixLib.Fluid.Storage.Stratified</a>,
        except for the following:
      </p>
      <ul>
        <li>It adds a correction that reduces the numerical
        dissipation.
        </li>
        <li>It does not contain the fluid ports <code>fluPorVol</code>
        that connect from the outside to the individual volumes.
        </li>
      </ul>
      <p>
        The correction uses a third order upwind scheme to compute the
        outlet temperatures of the segments in the tank. This model is
        implemented in <a href=
        \"modelica://AixLib.Fluid.Storage.BaseClasses.ThirdOrderStratifier\">
        AixLib.Fluid.Storage.BaseClasses.ThirdOrderStratifier</a>.
      </p>
    </td>
  </tr>
  <tr>
    <td>
      <a href=
      \"modelica://AixLib.Fluid.Storage.StratifiedEnhancedInternalHex\">AixLib.Fluid.Storage.StratifiedEnhancedInternalHex</a>
    </td>
    <td>
      <p>
        This model is identical to <a href=
        \"modelica://AixLib.Fluid.Storage.StratifiedEnhanced\">AixLib.Fluid.Storage.StratifiedEnhanced</a>
        except that it adds a heat exchanger to the tank.
      </p>
      <p>
        The modifications consist of adding a heat exchanger and fluid
        ports to connect to the heat exchanger. The modifications allow
        to run a fluid through the tank causing heat transfer to the
        stored fluid. A typical example is a storage tank in a solar
        hot water system.
      </p>
      <p>
        The heat exchanger model assumes flow through the inside of a
        helical coil heat exchanger, and stagnant fluid on the outside.
        Parameters are used to describe the heat transfer on the inside
        of the heat exchanger at nominal conditions, and geometry of
        the outside of the heat exchanger. This information is used to
        compute an <i>hA</i>-value for each side of the coil.
        Convection calculations are then performed to identify heat
        transfer between the heat transfer fluid and the fluid in the
        tank.
      </p>
      <p>
        The location of the heat exchanger can be parameterized as
        follows: The parameters <code>hHex_a</code> and
        <code>hHex_b</code> are the heights of the heat exchanger ports
        <code>portHex_a</code> and <code>portHex_b</code>, measured
        from the bottom of the tank. For example, to place the port
        <code>portHex_b</code> at the bottom of the tank, set
        <code>hHexB_b=0</code>. The parameters <code>hHex_a</code> and
        <code>hHex_b</code> are then used to provide a default value
        for the parameters <code>segHex_a</code> and
        <code>segHex_b</code>, which are the numbers of the tank
        segments to which the heat exchanger ports
        <code>portHex_a</code> and <code>portHex_b</code> are
        connected.
      </p>
      <p align=\"center\">
        <img alt=\"Image of a storage tank\" src=
        \"modelica://AixLib/Resources/Images/Fluid/Storage/StratifiedHex.png\"
        width=\"458\" height=\"456\">
      </p>
      <p>
        Optionally, this model computes a dynamic response of the heat
        exchanger. This can be configured using the parameters
        <code>energyDynamicsHexSolid</code>,
        <code>energyDynamicsHex</code> and
        <code>massDynamicsHex</code>. For this computation, the fluid
        volume inside the heat exchanger and the heat capacity of the
        heat exchanger wall <code>CHex</code> are approximated. Both
        depend on the length <code>lHex</code> of the heat exchanger.
        The model provides default values for these parameters, as well
        as for the heat exchanger material which is assumed to be
        steel. These default values can be overwritten by the user. The
        default values for the heat exchanger geometry are computed
        assuming that there is a cylindrical heat exchanger made of
        steel whose diameter is half the diameter of the tank, e.g.,
        <i>r<sub>Hex</sub>=r<sub>Tan</sub>/2</i>. Hence, the length of
        the heat exchanger is approximated as <i>l<sub>Hex</sub> = 2
        r<sub>Hex</sub> π h = 2 r<sub>Tan</sub>/2 π h</i>, where
        <i>h</i> is the distance between the heat exchanger inlet and
        outlet. The wall thickness is assumed to be <i>10%</i> of the
        heat exchanger outer diameter. For typical applications, users
        do not need to change these values.
      </p>
      <p>
        Setting <code>energyDynamicsHexSolid</code> to a dynamic
        balance and <code>energyDynamicsHex</code> to a steady-state
        balance may be of interest to remove very fast dynamics of the
        fluid, while still modeling slower dynamics that arises from
        the metal of the heat exchanger. By default,
        <code>energyDynamicsHexSolid</code> is set to the same value as
        <code>energyDynamicsHex</code> as this seems to be the typical
        configuration.
      </p>
      <p>
        The heat exchanger is implemented in <a href=
        \"AixLib.Fluid.Storage.BaseClasses.IndirectTankHeatExchanger\">AixLib.Fluid.Storage.BaseClasses.IndirectTankHeatExchanger</a>.
      </p>
    </td>
  </tr>
</table>

-------- Errors --------
line 6 column 1 - Warning: The summary attribute on the <table> element is obsolete in HTML5
line 17 column 1 - Warning: <p> attribute "align" not allowed for HTML5
line 129 column 1 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/FixedResistances/BaseClasses/PlugFlowHeatLoss.mo ----
-------- HTML Code --------

 <p>
 Component that calculates the heat losses at the end of a plug flow pipe
 when the flow goes in the design direction.
 </p>
 <h4>Main equations</h4>
 <p>
 The governing equations are
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 T<sub>out</sub> = T<sub>b</sub> + (T<sub>in</sub> - T<sub>b</sub>)
 exp((t<sub>out</sub> - t<sub>in</sub>)/tau<sub>char</sub>)
 </p>
 <p>
 with
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 tau<sub>char</sub> = R C
 </p>
 <h4>Assumptions and limitations</h4>
 <p>
 This model is based on the following assumptions:
 </p>
 <ul>
 <li>The water temperature is uniform in the cross section.</li>
 <li>There is no axial heat transfer in the water or surrounding.</li>
 <li>The boundary temperature along the pipe is uniform.</li>
 <li>Heat losses are steady-state.</li>
 </ul>
 <h4>Implementation</h4>
 <p>
 Heat losses are only considered in design flow direction.
 For heat loss consideration in both directions, use one of these models at
 both ends of a
 <a href=\"modelica://AixLib.Fluid.FixedResistances.BaseClasses.PlugFlow\">
 AixLib.Fluid.FixedResistances.BaseClasses.PlugFlow</a> model.
 The outlet temperature is calculated as in the equation above,
 using the inlet temperature at <code>port_a</code> and the instantaneous
 time delay and boundary temperature.
 The boundary temperature can be either the air temperature
 or the undisturbed ground temperature, depending on the definition of the
 thermal resistance <i>R</i>.
 </p>
 <p>
 This component requires the delay time and the instantaneous ambient temperature
 as an input.
 This component is to be used in single pipes or in more advanced configurations
 where no influence from other pipes is considered.</p>
 
 <ul>
 <li>
 December 6, 2017, by Michael Wetter:<br/>
 Reformulated call to medium function.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/869\">
 issue 869</a>.
 </li>
 <li>
 October 20, 2017, by Michael Wetter:<br/>
 Revised implementation to avoid graphical and textual modeling.
 Revised variable names and documentation to follow guidelines.
 </li>
 <li>
 November 6, 2015 by Bram van der Heijde:<br/>
 Make time delay input instead of calculation inside this model.
 </li>
 <li>
 September, 2015 by Marcus Fuchs:<br/>
 First implementation.</li>
 </ul>
 
-------- Corrected Code --------
<p>
  Component that calculates the heat losses at the end of a plug flow
  pipe when the flow goes in the design direction.
</p>
<h4>
  Main equations
</h4>
<p>
  The governing equations are
</p>
<p align=\"center\" style=\"font-style:italic;\">
  T<sub>out</sub> = T<sub>b</sub> + (T<sub>in</sub> - T<sub>b</sub>)
  exp((t<sub>out</sub> - t<sub>in</sub>)/tau<sub>char</sub>)
</p>
<p>
  with
</p>
<p align=\"center\" style=\"font-style:italic;\">
  tau<sub>char</sub> = R C
</p>
<h4>
  Assumptions and limitations
</h4>
<p>
  This model is based on the following assumptions:
</p>
<ul>
  <li>The water temperature is uniform in the cross section.
  </li>
  <li>There is no axial heat transfer in the water or surrounding.
  </li>
  <li>The boundary temperature along the pipe is uniform.
  </li>
  <li>Heat losses are steady-state.
  </li>
</ul>
<h4>
  Implementation
</h4>
<p>
  Heat losses are only considered in design flow direction. For heat
  loss consideration in both directions, use one of these models at
  both ends of a <a href=
  \"modelica://AixLib.Fluid.FixedResistances.BaseClasses.PlugFlow\">AixLib.Fluid.FixedResistances.BaseClasses.PlugFlow</a>
  model. The outlet temperature is calculated as in the equation above,
  using the inlet temperature at <code>port_a</code> and the
  instantaneous time delay and boundary temperature. The boundary
  temperature can be either the air temperature or the undisturbed
  ground temperature, depending on the definition of the thermal
  resistance <i>R</i>.
</p>
<p>
  This component requires the delay time and the instantaneous ambient
  temperature as an input. This component is to be used in single pipes
  or in more advanced configurations where no influence from other
  pipes is considered.
</p>
<ul>
  <li>December 6, 2017, by Michael Wetter:<br/>
    Reformulated call to medium function.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/869\">issue 869</a>.
  </li>
  <li>October 20, 2017, by Michael Wetter:<br/>
    Revised implementation to avoid graphical and textual modeling.
    Revised variable names and documentation to follow guidelines.
  </li>
  <li>November 6, 2015 by Bram van der Heijde:<br/>
    Make time delay input instead of calculation inside this model.
  </li>
  <li>September, 2015 by Marcus Fuchs:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 10 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 17 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Utilities/IO/SignalExchange/SignalTypes/SignalsForKPIs.mo ----
-------- HTML Code --------

 <p>
 This enumeration defines the signal types that are used by BOPTEST
 to compute the key performance indices (KPI).
 </p>
 <p>
 The following signal types are supported.
 </p>
 <table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\" style=\"border-collapse:collapse;\">
 <tr><th>Value</th>
     <th>Description</th>
 </tr>
 <tr><td><code>None</code></td>
     <td>Not used for KPI</td>
 </tr>
 <tr><td><code>AirZoneTemperature</code></td>
     <td>Air zone temperature</td>
 </tr>
 <tr><td><code>RadiativeZoneTemperature</code></td>
     <td>Radiative zone temperature</td>
 </tr>
 <tr><td><code>OperativeZoneTemperature</code></td>
     <td>Operative zone temperature</td>
 </tr>
 <tr><td><code>RelativeHumidity</code></td>
     <td>Relative humidity</td>
 </tr>
 <tr><td><code>CO2Concentration</code></td>
     <td>CO<sub>2</sub> concentration</td>
 </tr>
 <tr><td><code>ElectricPower</code></td>
     <td>Electric power from grid</td>
 </tr>
 <tr><td><code>DistrictHeatingPower</code></td>
     <td>Thermal power from district heating</td>
 </tr>
 <tr><td><code>GasPower</code></td>
     <td>Thermal power from natural gas</td>
 </tr>
 <tr><td><code>BiomassPower</code></td>
     <td>Thermal power from biomass</td>
 </tr>
 <tr><td><code>SolarThermalPower</code></td>
     <td>Thermal power from solar thermal</td>
 </tr>
 <tr><td><code>FreshWaterFlowRate</code></td>
     <td>FreshWaterFlowRate</td>
 </tr>
 </table>
 
 <ul>
 <li>
 July 17, 2019, by Michael Wetter:<br/>
 Added documentation.
 </li>
 <li>
 April 10, 2019, by Javier Arroyo:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This enumeration defines the signal types that are used by BOPTEST to
  compute the key performance indices (KPI).
</p>
<p>
  The following signal types are supported.
</p>
<table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\"
style=\"border-collapse:collapse;\">
  <tr>
    <th>
      Value
    </th>
    <th>
      Description
    </th>
  </tr>
  <tr>
    <td>
      <code>None</code>
    </td>
    <td>
      Not used for KPI
    </td>
  </tr>
  <tr>
    <td>
      <code>AirZoneTemperature</code>
    </td>
    <td>
      Air zone temperature
    </td>
  </tr>
  <tr>
    <td>
      <code>RadiativeZoneTemperature</code>
    </td>
    <td>
      Radiative zone temperature
    </td>
  </tr>
  <tr>
    <td>
      <code>OperativeZoneTemperature</code>
    </td>
    <td>
      Operative zone temperature
    </td>
  </tr>
  <tr>
    <td>
      <code>RelativeHumidity</code>
    </td>
    <td>
      Relative humidity
    </td>
  </tr>
  <tr>
    <td>
      <code>CO2Concentration</code>
    </td>
    <td>
      CO<sub>2</sub> concentration
    </td>
  </tr>
  <tr>
    <td>
      <code>ElectricPower</code>
    </td>
    <td>
      Electric power from grid
    </td>
  </tr>
  <tr>
    <td>
      <code>DistrictHeatingPower</code>
    </td>
    <td>
      Thermal power from district heating
    </td>
  </tr>
  <tr>
    <td>
      <code>GasPower</code>
    </td>
    <td>
      Thermal power from natural gas
    </td>
  </tr>
  <tr>
    <td>
      <code>BiomassPower</code>
    </td>
    <td>
      Thermal power from biomass
    </td>
  </tr>
  <tr>
    <td>
      <code>SolarThermalPower</code>
    </td>
    <td>
      Thermal power from solar thermal
    </td>
  </tr>
  <tr>
    <td>
      <code>FreshWaterFlowRate</code>
    </td>
    <td>
      FreshWaterFlowRate
    </td>
  </tr>
</table>
<ul>
  <li>July 17, 2019, by Michael Wetter:<br/>
    Added documentation.
  </li>
  <li>April 10, 2019, by Javier Arroyo:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 9 column 2 - Warning: The summary attribute on the <table> element is obsolete in HTML5


---- AixLib/Fluid/FixedResistances/Validation/PlugFlowPipes/MSLAIT.mo ----
-------- HTML Code --------

 <p>
 The example contains
 <a href=\"modelica://AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.Data.PipeDataAIT151218\">
 experimental data</a> from a real district heating network.
 This data is used to validate this library's
 <a href=\"modelica://AixLib.Fluid.FixedResistances.PlugFlowPipe\">
 AixLib.Fluid.FixedResistances.PlugFlowPipe</a> in
 <a href=\"modelica://AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.PlugFlowAIT\">
 AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.PlugFlowAIT</a>.
 This model compares its performance with the original Modelica Standard Library
 pipes, using one discretization element per unit length of pipe.
 For a coarser discretization, please refer to
 <a href=\"modelica://AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.MSLAIT2Nodes\">
 MSLAIT2Nodes</a>.
 </p>
 <p>
 Note that these three models are identical, except for the pipe model that is used:
 </p>
 <ul>
 <li>
 The model
 <a href=\"modelica://AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.MSLAIT\">
 AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.MSLAIT</a>
 uses the pipe model from the Modelica Standard Library, with a fine discretization.
 See the parameter <code>nNodes</code>.
 </li>
 <li>
 The model
 <a href=\"modelica://AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.MSLAIT2Nodes\">
 AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.MSLAIT2Nodes</a>
 uses the same model as above, but sets <code>nNodes=2</code>.
 </li>
 <li>
 The model
 <a href=\"modelica://AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.PlugFlowAIT\">
 AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.PlugFlowAIT</a>
 uses the plug flow model
 <a href=\"modelica://AixLib.Fluid.FixedResistances.PlugFlowPipe\">
 AixLib.Fluid.FixedResistances.PlugFlowPipe</a>.
 </li>
 </ul>
 <p>
 This comparison between different discretization levels and pipe models is made
 to check the influence of the discretization and pipe model on computation time
 and simulation accuracy.
 </p>
 <p>The pipes' temperatures are not initialized, thus results of outflow
 temperature before approximately the first 10000 seconds should not be considered.
 </p>
 <h4>Test bench schematic</h4>
 <p><img alt=\"Schematic of test district heating network\" src=\"modelica://AixLib/Resources/Images/Fluid/FixedResistances/Validation/PlugFlowPipes/AITTestBench.png\"/> </p>
 <h4>Calibration</h4>
 <p>To calculate the length specific thermal resistance <code>R</code> of the
 pipe, the thermal resistance of the surrounding ground is added. </p>
 <p align=\"center\"style=\"font-style:italic;\">
 R=1/(0.208)+1/(2 &nbsp; lambda_g &nbsp; Modelica.Constants.pi) &nbsp; log(1/0.18)</p>
 <p>
 Where the thermal conductivity of the ground <code>lambda_g</code> = 2.4 W/(m K).
 </p>
 
 <ul>
 <li>
 March 7, 2020, by Michael Wetter:<br/>
 Replaced measured data from specification in Modelica file to external table,
 as this reduces the computing time.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1289\"> #1289</a>.
 </li>
 <li>
 May 15, 2019, by Jianjun Hu:<br/>
 Replaced fluid source. This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1072\"> #1072</a>.
 </li>
 <li>November 28, 2016 by Bram van der Heijde:<br/>Remove <code>pipVol.</code>
 </li>
 <li>August 24, 2016 by Bram van der Heijde:<br/>
 Implement validation with MSL pipes for comparison, based on AIT validation.
 </li>
 <li>
 July 4, 2016 by Bram van der Heijde:<br/>Added parameters to test the
 influence of allowFlowReversal and the presence of explicit volumes in the pipe.
 </li>
 <li>January 26, 2016 by Carles Ribas:<br/>First implementation. </li>
 </ul>
 
-------- Corrected Code --------
<p>
  The example contains <a href=
  \"modelica://AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.Data.PipeDataAIT151218\">
  experimental data</a> from a real district heating network. This data
  is used to validate this library's <a href=
  \"modelica://AixLib.Fluid.FixedResistances.PlugFlowPipe\">AixLib.Fluid.FixedResistances.PlugFlowPipe</a>
  in <a href=
  \"modelica://AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.PlugFlowAIT\">
  AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.PlugFlowAIT</a>.
  This model compares its performance with the original Modelica
  Standard Library pipes, using one discretization element per unit
  length of pipe. For a coarser discretization, please refer to
  <a href=\"modelica://AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.MSLAIT2Nodes\">
  MSLAIT2Nodes</a>.
</p>
<p>
  Note that these three models are identical, except for the pipe model
  that is used:
</p>
<ul>
  <li>The model <a href=
  \"modelica://AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.MSLAIT\">
    AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.MSLAIT</a>
    uses the pipe model from the Modelica Standard Library, with a fine
    discretization. See the parameter <code>nNodes</code>.
  </li>
  <li>The model <a href=
  \"modelica://AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.MSLAIT2Nodes\">
    AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.MSLAIT2Nodes</a>
    uses the same model as above, but sets <code>nNodes=2</code>.
  </li>
  <li>The model <a href=
  \"modelica://AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.PlugFlowAIT\">
    AixLib.Fluid.FixedResistances.Validation.PlugFlowPipes.PlugFlowAIT</a>
    uses the plug flow model <a href=
    \"modelica://AixLib.Fluid.FixedResistances.PlugFlowPipe\">AixLib.Fluid.FixedResistances.PlugFlowPipe</a>.
  </li>
</ul>
<p>
  This comparison between different discretization levels and pipe
  models is made to check the influence of the discretization and pipe
  model on computation time and simulation accuracy.
</p>
<p>
  The pipes' temperatures are not initialized, thus results of outflow
  temperature before approximately the first 10000 seconds should not
  be considered.
</p>
<h4>
  Test bench schematic
</h4>
<p>
  <img alt=\"Schematic of test district heating network\" src=
  \"modelica://AixLib/Resources/Images/Fluid/FixedResistances/Validation/PlugFlowPipes/AITTestBench.png\">
</p>
<h4>
  Calibration
</h4>
<p>
  To calculate the length specific thermal resistance <code>R</code> of
  the pipe, the thermal resistance of the surrounding ground is added.
</p>
<p align=\"center\" style=\"font-style:italic;\">
  R=1/(0.208)+1/(2 &#160; lambda_g &#160; Modelica.Constants.pi) &#160;
  log(1/0.18)
</p>
<p>
  Where the thermal conductivity of the ground <code>lambda_g</code> =
  2.4 W/(m K).
</p>
<ul>
  <li>March 7, 2020, by Michael Wetter:<br/>
    Replaced measured data from specification in Modelica file to
    external table, as this reduces the computing time.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1289\">#1289</a>.
  </li>
  <li>May 15, 2019, by Jianjun Hu:<br/>
    Replaced fluid source. This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1072\">#1072</a>.
  </li>
  <li>November 28, 2016 by Bram van der Heijde:<br/>
    Remove <code>pipVol.</code>
  </li>
  <li>August 24, 2016 by Bram van der Heijde:<br/>
    Implement validation with MSL pipes for comparison, based on AIT
    validation.
  </li>
  <li>July 4, 2016 by Bram van der Heijde:<br/>
    Added parameters to test the influence of allowFlowReversal and the
    presence of explicit volumes in the pipe.
  </li>
  <li>January 26, 2016 by Carles Ribas:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 56 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/HeatExchangers/PrescribedOutlet.mo ----
-------- HTML Code --------

 <p>
 Model that allows specifying the temperature and mass fraction of the fluid
 that leaves the model from <code>port_b</code>.
 </p>
 <p>
 This model forces the outlet temperature at <code>port_b</code> to be equal to the temperature
 of the input signal <code>TSet</code>, subject to optional limits on the
 heating or cooling capacity <code>QMax_flow &ge; 0</code> and <code>QMin_flow &le; 0</code>.
 Similarly than for the temperature,
 this model also forces the outlet water mass fraction at <code>port_b</code> to be
 no lower than the
 input signal <code>X_wSet</code>, subject to optional limits on the
 maximum water vapor mass flow rate that is added, as
 described by the parameter <code>mWatMax_flow</code>.
 By default, the model has unlimited capacity, but control of temperature
 and humidity can be subject to capacity limits, or be disabled.
 </p>
 <p>
 The output signal <code>Q_flow</code> is the heat added (for heating) or subtracted (for cooling)
 to the medium if the flow rate is from <code>port_a</code> to <code>port_b</code>.
 If the flow is reversed, then <code>Q_flow=0</code>.
 </p>
 <p>
 The outlet conditions at <code>port_a</code> are not affected by this model.
 </p>
 <p>
 If the parameter <code>energyDynamics</code> is not equal to
 <code>Modelica.Fluid.Types.Dynamics.SteadyState</code>,
 the component models the dynamic response using a first order differential equation.
 The time constant of the component is equal to the parameter <code>tau</code>.
 This time constant is adjusted based on the mass flow rate using
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 &tau;<sub>eff</sub> = &tau; |m&#775;| &frasl; m&#775;<sub>nom</sub>
 </p>
 <p>
 where
 <i>&tau;<sub>eff</sub></i> is the effective time constant for the given mass flow rate
 <i>m&#775;</i> and
 <i>&tau;</i> is the time constant at the nominal mass flow rate
 <i>m&#775;<sub>nom</sub></i>.
 This type of dynamics is equal to the dynamics that a completely mixed
 control volume would have.
 </p>
 <p>
 Optionally, this model can have a flow resistance.
 If no flow resistance is requested, set <code>dp_nominal=0</code>.
 </p>
 <p>
 For a model that uses a control signal <i>u &isin; [0, 1]</i> and multiplies
 this with the nominal heating or cooling power, use
 <a href=\"modelica://AixLib.Fluid.HeatExchangers.HeaterCooler_u\">
 AixLib.Fluid.HeatExchangers.HeaterCooler_u</a>
 
 </p>
 <h4>Limitations</h4>
 <p>
 This model only adds or removes heat or water vapor for the flow from
 <code>port_a</code> to <code>port_b</code>.
 The enthalpy of the reverse flow is not affected by this model.
 </p>
 <p>
 If this model is used to cool air below the dew point temperature, the water mass fraction
 will not change.
 </p>
 <p>
 Note that for <code>use_TSet = false</code>, the enthalpy of the leaving fluid
 will not be changed, even if moisture is added. The enthalpy added (or removed)
 by the change in humidity is neglected. To properly account for change in enthalpy
 due to humidification, use instead
 <a href=\"AixLib.Fluid.Humidifiers.SprayAirWasher_X\">
 AixLib.Fluid.Humidifiers.SprayAirWasher_X</a>.
 </p>
 <h4>Validation</h4>
 <p>
 The model has been validated against the analytical solution in
 the examples
 <a href=\"modelica://AixLib.Fluid.HeatExchangers.Validation.PrescribedOutlet\">
 AixLib.Fluid.HeatExchangers.Validation.PrescribedOutlet</a>
 and
 <a href=\"modelica://AixLib.Fluid.HeatExchangers.Validation.PrescribedOutlet_dynamic\">
 AixLib.Fluid.HeatExchangers.Validation.PrescribedOutlet_dynamic</a>.
 </p>
 
 <ul>
 <li>
 March 3, 2022, by Michael Wetter:<br/>
 Removed <code>massDynamics</code>.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1542\">issue 1542</a>.
 </li>
 <li>
 May 3, 2017, by Michael Wetter:<br/>
 Updated protected model for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/763\">#763</a>.
 </li>
 <li>
 December 1, 2016, by Michael Wetter:<br/>
 Updated model as <code>use_dh</code> is no longer a parameter in the pressure drop model.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/480\">#480</a>.
 </li>
 <li>
 November 11, 2014, by Michael Wetter:<br/>
 Revised implementation.
 </li>
 <li>
 March 19, 2014, by Christoph Nytsch-Geusen:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Model that allows specifying the temperature and mass fraction of the
  fluid that leaves the model from <code>port_b</code>.
</p>
<p>
  This model forces the outlet temperature at <code>port_b</code> to be
  equal to the temperature of the input signal <code>TSet</code>,
  subject to optional limits on the heating or cooling capacity
  <code>QMax_flow ≥ 0</code> and <code>QMin_flow ≤ 0</code>. Similarly
  than for the temperature, this model also forces the outlet water
  mass fraction at <code>port_b</code> to be no lower than the input
  signal <code>X_wSet</code>, subject to optional limits on the maximum
  water vapor mass flow rate that is added, as described by the
  parameter <code>mWatMax_flow</code>. By default, the model has
  unlimited capacity, but control of temperature and humidity can be
  subject to capacity limits, or be disabled.
</p>
<p>
  The output signal <code>Q_flow</code> is the heat added (for heating)
  or subtracted (for cooling) to the medium if the flow rate is from
  <code>port_a</code> to <code>port_b</code>. If the flow is reversed,
  then <code>Q_flow=0</code>.
</p>
<p>
  The outlet conditions at <code>port_a</code> are not affected by this
  model.
</p>
<p>
  If the parameter <code>energyDynamics</code> is not equal to
  <code>Modelica.Fluid.Types.Dynamics.SteadyState</code>, the component
  models the dynamic response using a first order differential
  equation. The time constant of the component is equal to the
  parameter <code>tau</code>. This time constant is adjusted based on
  the mass flow rate using
</p>
<p align=\"center\" style=\"font-style:italic;\">
  τ<sub>eff</sub> = τ |ṁ| ⁄ ṁ<sub>nom</sub>
</p>
<p>
  where <i>τ<sub>eff</sub></i> is the effective time constant for the
  given mass flow rate <i>ṁ</i> and <i>τ</i> is the time constant at
  the nominal mass flow rate <i>ṁ<sub>nom</sub></i>. This type of
  dynamics is equal to the dynamics that a completely mixed control
  volume would have.
</p>
<p>
  Optionally, this model can have a flow resistance. If no flow
  resistance is requested, set <code>dp_nominal=0</code>.
</p>
<p>
  For a model that uses a control signal <i>u ∈ [0, 1]</i> and
  multiplies this with the nominal heating or cooling power, use
  <a href=
  \"modelica://AixLib.Fluid.HeatExchangers.HeaterCooler_u\">AixLib.Fluid.HeatExchangers.HeaterCooler_u</a>
</p>
<h4>
  Limitations
</h4>
<p>
  This model only adds or removes heat or water vapor for the flow from
  <code>port_a</code> to <code>port_b</code>. The enthalpy of the
  reverse flow is not affected by this model.
</p>
<p>
  If this model is used to cool air below the dew point temperature,
  the water mass fraction will not change.
</p>
<p>
  Note that for <code>use_TSet = false</code>, the enthalpy of the
  leaving fluid will not be changed, even if moisture is added. The
  enthalpy added (or removed) by the change in humidity is neglected.
  To properly account for change in enthalpy due to humidification, use
  instead <a href=
  \"AixLib.Fluid.Humidifiers.SprayAirWasher_X\">AixLib.Fluid.Humidifiers.SprayAirWasher_X</a>.
</p>
<h4>
  Validation
</h4>
<p>
  The model has been validated against the analytical solution in the
  examples <a href=
  \"modelica://AixLib.Fluid.HeatExchangers.Validation.PrescribedOutlet\">AixLib.Fluid.HeatExchangers.Validation.PrescribedOutlet</a>
  and <a href=
  \"modelica://AixLib.Fluid.HeatExchangers.Validation.PrescribedOutlet_dynamic\">
  AixLib.Fluid.HeatExchangers.Validation.PrescribedOutlet_dynamic</a>.
</p>
<ul>
  <li>March 3, 2022, by Michael Wetter:<br/>
    Removed <code>massDynamics</code>.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1542\">issue
    1542</a>.
  </li>
  <li>May 3, 2017, by Michael Wetter:<br/>
    Updated protected model for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/763\">#763</a>.
  </li>
  <li>December 1, 2016, by Michael Wetter:<br/>
    Updated model as <code>use_dh</code> is no longer a parameter in
    the pressure drop model.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/480\">#480</a>.
  </li>
  <li>November 11, 2014, by Michael Wetter:<br/>
    Revised implementation.
  </li>
  <li>March 19, 2014, by Christoph Nytsch-Geusen:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 34 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/Actuators/BaseClasses/PartialDamperExponential.mo ----
-------- HTML Code --------

 <p>
 Partial model for air dampers with exponential opening characteristics.
 This is the base model for air dampers.
 The model implements the functions that relate the opening signal and the
 flow coefficient.
 The model also defines parameters that are used by different air damper
 models.
 </p>
 <p>
 The model is as in ASHRAE 825-RP except that a control signal of
 <code>y=0</code> means the damper is closed, and <code>y=1</code> means
 the damper is open.
 This is opposite of the implementation of ASHRAE 825-RP, but used here
 for consistency within this library.
 </p>
 <p>
 For <code>yL &lt; y &lt; yU</code>, the damper characteristics is:
 </p>
 <p style=\"font-style:italic;\">
   k<sub>d</sub>(y) = exp(a+b (1-y))
 </p>
 <p>
 where <i>kd</i> is the loss coefficient (total pressure drop divided
 by dynamic pressure) and <i>y</i> is the fractional opening.
 </p>
 <p>
 Outside this range, the damper characteristics is defined by a quadratic polynomial that
 matches the damper resistance at <code>y=0</code> and <code>y=yL</code> or
 <code>y=yU</code> and <code>y=1</code>, respectively.
 In addition, the polynomials are such that <i>k<sub>d</sub>(y)</i> is differentiable in
 <i>y</i> and the derivative is continuous.
 </p>
 <p>
 The damper characteristics is then used to compute the flow coefficient <i>k(y)</i> as:
 </p>
 <p style=\"font-style:italic;\">
 k(y) = (2 &rho; &frasl; k<sub>d</sub>(y))<sup>1/2</sup> A
 </p>
 <p>
 where <i>A</i> is the face area, which is computed using the nominal
 mass flow rate <code>m_flow_nominal</code>, the nominal velocity
 <code>v_nominal</code> and the density of the medium.
 </p>
 <p>
 ASHRAE 825-RP lists the following parameter values as typical (note that the
 default values in the model correspond to opposed blades).
 <br/>
 </p>
 <table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\"
 style=\"border-collapse:collapse;\">
 <tr>
 <td></td><th>opposed blades</th><th>single blades</th>
 </tr>
 <tr>
 <td>yL</td><td>15/90</td><td>15/90</td>
 </tr>
 <tr>
 <td>yU</td><td>55/90</td><td>65/90</td>
 </tr>
 <tr>
 <td>k1</td><td>0.2 to 0.5</td><td>0.2 to 0.5</td>
 </tr>
 <tr>
 <td>a</td><td>-1.51</td><td>-1.51</td>
 </tr>
 <tr>
 <td>b</td><td>0.105*90</td><td>0.0842*90</td>
 </tr>
 </table>
 <p>
 (The loss coefficient in fully closed position <code>k0</code> is computed based on the leakage coefficient
 and the coefficient in fully open position.)
 </p>
 <h4>References</h4>
 <p>
 P. Haves, L. K. Norford, M. DeSimone and L. Mei,
 <i>A Standard Simulation Testbed for the Evaluation of Control Algorithms &amp; Strategies</i>,
 ASHRAE Final Report 825-RP, Atlanta, GA.
 </p>
 
 <ul>
 <li>
 September 21, 2021, by Michael Wetter:<br/>
 Corrected typo in comments.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1525\">#1525</a>.
 </li>
 <li>
 December 23, 2019, by Antoine Gautier:<br/>
 Removed the equations involving <code>m_flow</code> and <code>dp</code> that now need
 to be added in each derived damper model.<br/>
 Added the declaration of <code>dpDamper_nominal</code> and <code>dpFixed_nominal</code>.<br/>
 Replaced <code>k0</code> by leakage coefficient.<br/>
 Modified the limiting values for <code>k0</code> and <code>k1</code>.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1188\">#1188</a>.
 </li>
 <li>
 March 22, 2017, by Michael Wetter:<br/>
 Added back <code>v_nominal</code>, but set the assignment of <code>A</code>
 to be final. This allows scaling the model with <code>m_flow_nominal</code>,
 which is generally known in the flow leg,
 and <code>v_nominal</code>, for which a default value can be specified.<br/>
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/544\">#544</a>.
 </li>
 <li>
 October 12, 2016 by David Blum:<br/>
 Removed parameter <code>v_nominal</code> and variable <code>area</code>,
 to simplify parameterization of the model.
 Also added assertion statements upon initialization
 for parameters <code>k0</code> and <code>k1</code> so that they fall within
 suggested ranges found in ASHRAE 825-RP. This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/544\">#544</a>.
 </li>
 <li>
 January 27, 2015 by Michael Wetter:<br/>
 Set <code>Evaluate=true</code> for <code>use_constant_density</code>.
 This is a structural parameter. Adding this annotation leads to fewer
 numerical Jacobians for
 <code>Buildings.Examples.VAVReheat.ClosedLoop</code>
 with
 <code>Buildings.Media.PerfectGases.MoistAirUnsaturated</code>.
 </li>
 <li>
 December 14, 2012 by Michael Wetter:<br/>
 Renamed protected parameters for consistency with the naming conventions.
 </li>
 <li>
 January 16, 2012 by Michael Wetter:<br/>
 To simplify object inheritance tree, revised base classes
 <code>AixLib.Fluid.BaseClasses.PartialResistance</code>,
 <code>AixLib.Fluid.Actuators.BaseClasses.PartialTwoWayValve</code>,
 <code>AixLib.Fluid.Actuators.BaseClasses.PartialDamperExponential</code>,
 <code>AixLib.Fluid.Actuators.BaseClasses.PartialActuator</code>
 and model
 <code>AixLib.Fluid.FixedResistances.PressureDrop</code>.
 </li>
 <li>
 August 5, 2011, by Michael Wetter:<br/>
 Moved linearized pressure drop equation from the function body to the equation
 section. With the previous implementation,
 the symbolic processor may not rearrange the equations, which can lead
 to coupled equations instead of an explicit solution.
 </li>
 <li>
 June 22, 2008 by Michael Wetter:<br/>
 Extended range of control signal from 0 to 1 by implementing the function
 <a href=\"modelica://AixLib.Fluid.Actuators.BaseClasses.exponentialDamper\">
 exponentialDamper</a>.
 </li>
 <li>
 June 10, 2008 by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Partial model for air dampers with exponential opening
  characteristics. This is the base model for air dampers. The model
  implements the functions that relate the opening signal and the flow
  coefficient. The model also defines parameters that are used by
  different air damper models.
</p>
<p>
  The model is as in ASHRAE 825-RP except that a control signal of
  <code>y=0</code> means the damper is closed, and <code>y=1</code>
  means the damper is open. This is opposite of the implementation of
  ASHRAE 825-RP, but used here for consistency within this library.
</p>
<p>
  For <code>yL &lt; y &lt; yU</code>, the damper characteristics is:
</p>
<p style=\"font-style:italic;\">
  k<sub>d</sub>(y) = exp(a+b (1-y))
</p>
<p>
  where <i>kd</i> is the loss coefficient (total pressure drop divided
  by dynamic pressure) and <i>y</i> is the fractional opening.
</p>
<p>
  Outside this range, the damper characteristics is defined by a
  quadratic polynomial that matches the damper resistance at
  <code>y=0</code> and <code>y=yL</code> or <code>y=yU</code> and
  <code>y=1</code>, respectively. In addition, the polynomials are such
  that <i>k<sub>d</sub>(y)</i> is differentiable in <i>y</i> and the
  derivative is continuous.
</p>
<p>
  The damper characteristics is then used to compute the flow
  coefficient <i>k(y)</i> as:
</p>
<p style=\"font-style:italic;\">
  k(y) = (2 ρ ⁄ k<sub>d</sub>(y))<sup>1/2</sup> A
</p>
<p>
  where <i>A</i> is the face area, which is computed using the nominal
  mass flow rate <code>m_flow_nominal</code>, the nominal velocity
  <code>v_nominal</code> and the density of the medium.
</p>
<p>
  ASHRAE 825-RP lists the following parameter values as typical (note
  that the default values in the model correspond to opposed
  blades).<br/>
</p>
<table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\"
style=\"border-collapse:collapse;\">
  <tr>
    <td></td>
    <th>
      opposed blades
    </th>
    <th>
      single blades
    </th>
  </tr>
  <tr>
    <td>
      yL
    </td>
    <td>
      15/90
    </td>
    <td>
      15/90
    </td>
  </tr>
  <tr>
    <td>
      yU
    </td>
    <td>
      55/90
    </td>
    <td>
      65/90
    </td>
  </tr>
  <tr>
    <td>
      k1
    </td>
    <td>
      0.2 to 0.5
    </td>
    <td>
      0.2 to 0.5
    </td>
  </tr>
  <tr>
    <td>
      a
    </td>
    <td>
      -1.51
    </td>
    <td>
      -1.51
    </td>
  </tr>
  <tr>
    <td>
      b
    </td>
    <td>
      0.105*90
    </td>
    <td>
      0.0842*90
    </td>
  </tr>
</table>
<p>
  (The loss coefficient in fully closed position <code>k0</code> is
  computed based on the leakage coefficient and the coefficient in
  fully open position.)
</p>
<h4>
  References
</h4>
<p>
  P. Haves, L. K. Norford, M. DeSimone and L. Mei, <i>A Standard
  Simulation Testbed for the Evaluation of Control Algorithms &
  Strategies</i>, ASHRAE Final Report 825-RP, Atlanta, GA.
</p>
<ul>
  <li>September 21, 2021, by Michael Wetter:<br/>
    Corrected typo in comments.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1525\">#1525</a>.
  </li>
  <li>December 23, 2019, by Antoine Gautier:<br/>
    Removed the equations involving <code>m_flow</code> and
    <code>dp</code> that now need to be added in each derived damper
    model.<br/>
    Added the declaration of <code>dpDamper_nominal</code> and
    <code>dpFixed_nominal</code>.<br/>
    Replaced <code>k0</code> by leakage coefficient.<br/>
    Modified the limiting values for <code>k0</code> and
    <code>k1</code>.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1188\">#1188</a>.
  </li>
  <li>March 22, 2017, by Michael Wetter:<br/>
    Added back <code>v_nominal</code>, but set the assignment of
    <code>A</code> to be final. This allows scaling the model with
    <code>m_flow_nominal</code>, which is generally known in the flow
    leg, and <code>v_nominal</code>, for which a default value can be
    specified.<br/>
    This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/544\">#544</a>.
  </li>
  <li>October 12, 2016 by David Blum:<br/>
    Removed parameter <code>v_nominal</code> and variable
    <code>area</code>, to simplify parameterization of the model. Also
    added assertion statements upon initialization for parameters
    <code>k0</code> and <code>k1</code> so that they fall within
    suggested ranges found in ASHRAE 825-RP. This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/544\">#544</a>.
  </li>
  <li>January 27, 2015 by Michael Wetter:<br/>
    Set <code>Evaluate=true</code> for
    <code>use_constant_density</code>. This is a structural parameter.
    Adding this annotation leads to fewer numerical Jacobians for
    <code>Buildings.Examples.VAVReheat.ClosedLoop</code> with
    <code>Buildings.Media.PerfectGases.MoistAirUnsaturated</code>.
  </li>
  <li>December 14, 2012 by Michael Wetter:<br/>
    Renamed protected parameters for consistency with the naming
    conventions.
  </li>
  <li>January 16, 2012 by Michael Wetter:<br/>
    To simplify object inheritance tree, revised base classes
    <code>AixLib.Fluid.BaseClasses.PartialResistance</code>,
    <code>AixLib.Fluid.Actuators.BaseClasses.PartialTwoWayValve</code>,
    <code>AixLib.Fluid.Actuators.BaseClasses.PartialDamperExponential</code>,
    <code>AixLib.Fluid.Actuators.BaseClasses.PartialActuator</code> and
    model <code>AixLib.Fluid.FixedResistances.PressureDrop</code>.
  </li>
  <li>August 5, 2011, by Michael Wetter:<br/>
    Moved linearized pressure drop equation from the function body to
    the equation section. With the previous implementation, the
    symbolic processor may not rearrange the equations, which can lead
    to coupled equations instead of an explicit solution.
  </li>
  <li>June 22, 2008 by Michael Wetter:<br/>
    Extended range of control signal from 0 to 1 by implementing the
    function <a href=
    \"modelica://AixLib.Fluid.Actuators.BaseClasses.exponentialDamper\">exponentialDamper</a>.
  </li>
  <li>June 10, 2008 by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 50 column 2 - Warning: The summary attribute on the <table> element is obsolete in HTML5


---- AixLib/Media/Antifreeze/EthyleneGlycolWater.mo ----
-------- HTML Code --------

     <p>
     This base properties model is identical to
     <a href=\"modelica://Modelica.Media.Water.ConstantPropertyLiquidWater\">
     Modelica.Media.Water.ConstantPropertyLiquidWater</a>,
     except that the equation
     <code>u = cv_const*(T - reference_T)</code>
     has been replaced by <code>u=h</code> because
     <code>cp_const=cv_const</code>.
     Also, the model checks if the mass fraction of the mixture is within the
     allowed limits.
     </p>
 
   <p>
   Density of propylene antifreeze-water mixture at specified mass fraction
   and temperature, based on Melinder (2010).
   </p>
   <h4>References</h4>
   <p>
   Melinder, &#197;ke. 2010. Properties of Secondary Working Fluids (Secondary
   Refrigerants or Coolants, Heat Transfer Fluids) for Indirect Systems. Paris:
   IIR/IIF.
   </p>
   
   <ul>
   <li>
   May 2, 2018 by Massimo Cimmino:<br/>
   First implementation.
   This function is used by
   <a href=\"modelica://AixLib.Media.Antifreeze.EthyleneGlycolWater\">
   AixLib.Media.Antifreeze.EthyleneGlycolWater</a>.
   </li>
   </ul>
   
 <p>
 Dynamic viscosity of antifreeze-water mixture at specified mass fraction and
 temperature, based on Melinder (2010).
 </p>
 <h4>References</h4>
 <p>
 Melinder, &#197;ke. 2010. Properties of Secondary Working Fluids (Secondary
 Refrigerants or Coolants, Heat Transfer Fluids) for Indirect Systems. Paris:
 IIR/IIF.
 </p>
 
 <ul>
 <li>
 May 2, 2018 by Massimo Cimmino:<br/>
 First implementation.
 This function is used by
 <a href=\"modelica://AixLib.Media.Antifreeze.EthyleneGlycolWater\">
 AixLib.Media.Antifreeze.EthyleneGlycolWater</a>.
 </li>
 </ul>
 
 <p>
 Fusion temperature of antifreeze-water mixture at specified mass fraction and
 temperature, based on Melinder (2010).
 </p>
 <h4>References</h4>
 <p>
 Melinder, &#197;ke. 2010. Properties of Secondary Working Fluids (Secondary
 Refrigerants or Coolants, Heat Transfer Fluids) for Indirect Systems. Paris:
 IIR/IIF.
 </p>
 
 <ul>
 <li>
 May 2, 2018 by Massimo Cimmino:<br/>
 First implementation.
 This function is used by
 <a href=\"modelica://AixLib.Media.Antifreeze.EthyleneGlycolWater\">
 AixLib.Media.Antifreeze.EthyleneGlycolWater</a>.
 </li>
 </ul>
 
 <p>
 Evaluates a thermophysical property of a mixture, based on correlations proposed
 by Melinder (2010).
 </p>
 <p>
 The polynomial has the form
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
 f = a<sub>1</sub> (x-xm)<sup>0</sup>(y-ym)<sup>0</sup>
 + a<sub>2</sub> (x-xm)<sup>0</sup>(y-ym)<sup>1</sup>
 + ... +
 a<sub>ny[1]</sub> (x-xm)<sup>0</sup>(y-ym)<sup>ny[1]-1</sup>
 + ... +
 a<sub>ny[1])+1</sub> (x-xm)<sup>1</sup>(y-ym)<sup>0</sup>
 + ... +
 a<sub>ny[1]+ny[2]</sub> (x-xm)<sup>1</sup>(y-ym)<sup>ny[2]-1</sup>
 + ...
 </p>
 <h4>References</h4>
 <p>
 Melinder, &#197;ke. 2010. Properties of Secondary Working Fluids (Secondary
 Refrigerants or Coolants, Heat Transfer Fluids) for Indirect Systems. Paris:
 IIR/IIF.
 </p>
 
 <ul>
 <li>
 March 16, 2018 by Massimo Cimmino:<br/>
 First implementation.
 This function is used models in
 <a href=\"modelica://AixLib.Media.Antifreeze\">
 AixLib.Media.Antifreeze</a>.
 </li>
 </ul>
 
 <p>
 Specific heat capacity of antifreeze-water mixture at specified mass fraction
 and temperature, based on Melinder (2010).
 </p>
 <h4>References</h4>
 <p>
 Melinder, &#197;ke. 2010. Properties of Secondary Working Fluids (Secondary
 Refrigerants or Coolants, Heat Transfer Fluids) for Indirect Systems. Paris:
 IIR/IIF.
 </p>
 
 <ul>
 <li>
 March 16, 2018 by Massimo Cimmino:<br/>
 First implementation.
 This function is used by
 <a href=\"modelica://AixLib.Media.Antifreeze.EthyleneGlycolWater\">
 AixLib.Media.Antifreeze.EthyleneGlycolWater</a>.
 </li>
 </ul>
 
 <p>
 Thermal conductivity of antifreeze-water mixture at specified mass fraction and
 temperature, based on Melinder (2010).
 </p>
 <h4>References</h4>
 <p>
 Melinder, &#197;ke. 2010. Properties of Secondary Working Fluids (Secondary
 Refrigerants or Coolants, Heat Transfer Fluids) for Indirect Systems. Paris:
 IIR/IIF.
 </p>
 
 <ul>
 <li>
 March 16, 2018 by Massimo Cimmino:<br/>
 First implementation.
 This function is used by
 <a href=\"modelica://AixLib.Media.Antifreeze.EthyleneGlycolWater\">
 AixLib.Media.Antifreeze.EthyleneGlycolWater</a>.
 </li>
 </ul>
 
 <p>
 This medium package models ethylene glycol - water mixtures.
 </p>
 <p>
 The mass density, specific heat capacity, thermal conductivity and viscosity
 are assumed constant and evaluated at a set temperature and mass fraction of
 ethylene glycol within the mixture. The dependence of the four properties
 are shown on the figure below.
 </p>
 <p align=\"center\">
 <img src=\"modelica://AixLib/Resources/Images/Media/Antifreeze/EthyleneGlycolWaterProperties.png\" border=\"1\"
 alt=\"Relative variation of specific heat capacity with temperature\"/>
 </p>
 <p>
 The accuracy of the thermophysical properties is dependent on the temperature
 variations encountered during simulations.
 The figure below shows the relative error of the the four properties over a
 <i>10</i> &deg;C range around the temperature used to evaluate the constant
 properties. The maximum errors are <i>0.8</i> % for mass density, <i>2.7</i> %
 for specific heat capacity, <i>3.2</i> % for thermal conductivity and <i>160</i>
 % for dynamic viscosity.
 </p>
 <p align=\"center\">
 <img src=\"modelica://AixLib/Resources/Images/Media/Antifreeze/EthyleneGlycolWaterError10degC.png\" border=\"1\"
 alt=\"Relative variation of specific heat capacity with temperature\"/>
 </p>
 <p>
 The figure below shows the relative error of the the four properties over a
 <i>20</i> &deg;C range around the temperature used to evaluate the constant
 proepties. The maximum errors are <i>1.5</i> % for mass density, <i>5.3</i> %
 for specific heat capacity, <i>5.9</i> % for thermal conductivity and <i>500</i>
 % for dynamic viscosity.
 </p>
 <p align=\"center\">
 <img src=\"modelica://AixLib/Resources/Images/Media/Antifreeze/EthyleneGlycolWaterError20degC.png\" border=\"1\"
 alt=\"Relative variation of specific heat capacity with temperature\"/>
 </p>
 <p>
 The enthalpy is computed using the convention that <i>h=0</i>
 if <i>T=0</i> &deg;C.
 </p>
 <h4>Limitations</h4>
 <p>
 Density, specific heat capacity, thermal conductivity and viscosity are constant.
 The ethylene glycol/water mixture is modeled as an incompressible liquid.
 There are no phase changes. The medium is limited to temperatures below
 <i>100</i> &deg;C and mass fractions below <i>0.60</i>.
 As is the case for <a href=\"modelica://AixLib.Media.Water\">AixLib.Media.Water</a>,
 this medium package should not be used if
 the simulation relies on the dynamic viscosity.
 </p>
 <h4>Typical use and important parameters</h4>
 <p>
 The temperature and mass fraction must be specified for the evaluation of the
 constant thermophysical properties. A typical use of the package is (e.g. for
 a temperature of <i>20</i> &deg;C and a mass fraction of <i>0.40</i>):
 </p>
 <p>
 <code>Medium = AixLib.Media.Antifreeze.EthyleneGlycolWater(property_T=293.15, X_a=0.40)</code>
 </p>
 
 <ul>
 <li>
 August 05, 2020, by Wen HU:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  This base properties model is identical to <a href=
  \"modelica://Modelica.Media.Water.ConstantPropertyLiquidWater\">Modelica.Media.Water.ConstantPropertyLiquidWater</a>,
  except that the equation <code>u = cv_const*(T - reference_T)</code>
  has been replaced by <code>u=h</code> because
  <code>cp_const=cv_const</code>. Also, the model checks if the mass
  fraction of the mixture is within the allowed limits.
</p>
<p>
  Density of propylene antifreeze-water mixture at specified mass
  fraction and temperature, based on Melinder (2010).
</p>
<h4>
  References
</h4>
<p>
  Melinder, Åke. 2010. Properties of Secondary Working Fluids
  (Secondary Refrigerants or Coolants, Heat Transfer Fluids) for
  Indirect Systems. Paris: IIR/IIF.
</p>
<ul>
  <li>May 2, 2018 by Massimo Cimmino:<br/>
    First implementation. This function is used by <a href=
    \"modelica://AixLib.Media.Antifreeze.EthyleneGlycolWater\">AixLib.Media.Antifreeze.EthyleneGlycolWater</a>.
  </li>
</ul>
<p>
  Dynamic viscosity of antifreeze-water mixture at specified mass
  fraction and temperature, based on Melinder (2010).
</p>
<h4>
  References
</h4>
<p>
  Melinder, Åke. 2010. Properties of Secondary Working Fluids
  (Secondary Refrigerants or Coolants, Heat Transfer Fluids) for
  Indirect Systems. Paris: IIR/IIF.
</p>
<ul>
  <li>May 2, 2018 by Massimo Cimmino:<br/>
    First implementation. This function is used by <a href=
    \"modelica://AixLib.Media.Antifreeze.EthyleneGlycolWater\">AixLib.Media.Antifreeze.EthyleneGlycolWater</a>.
  </li>
</ul>
<p>
  Fusion temperature of antifreeze-water mixture at specified mass
  fraction and temperature, based on Melinder (2010).
</p>
<h4>
  References
</h4>
<p>
  Melinder, Åke. 2010. Properties of Secondary Working Fluids
  (Secondary Refrigerants or Coolants, Heat Transfer Fluids) for
  Indirect Systems. Paris: IIR/IIF.
</p>
<ul>
  <li>May 2, 2018 by Massimo Cimmino:<br/>
    First implementation. This function is used by <a href=
    \"modelica://AixLib.Media.Antifreeze.EthyleneGlycolWater\">AixLib.Media.Antifreeze.EthyleneGlycolWater</a>.
  </li>
</ul>
<p>
  Evaluates a thermophysical property of a mixture, based on
  correlations proposed by Melinder (2010).
</p>
<p>
  The polynomial has the form
</p>
<p align=\"center\" style=\"font-style:italic;\">
  f = a<sub>1</sub> (x-xm)<sup>0</sup>(y-ym)<sup>0</sup> +
  a<sub>2</sub> (x-xm)<sup>0</sup>(y-ym)<sup>1</sup> + ... +
  a<sub>ny[1]</sub> (x-xm)<sup>0</sup>(y-ym)<sup>ny[1]-1</sup> + ... +
  a<sub>ny[1])+1</sub> (x-xm)<sup>1</sup>(y-ym)<sup>0</sup> + ... +
  a<sub>ny[1]+ny[2]</sub> (x-xm)<sup>1</sup>(y-ym)<sup>ny[2]-1</sup> +
  ...
</p>
<h4>
  References
</h4>
<p>
  Melinder, Åke. 2010. Properties of Secondary Working Fluids
  (Secondary Refrigerants or Coolants, Heat Transfer Fluids) for
  Indirect Systems. Paris: IIR/IIF.
</p>
<ul>
  <li>March 16, 2018 by Massimo Cimmino:<br/>
    First implementation. This function is used models in <a href=
    \"modelica://AixLib.Media.Antifreeze\">AixLib.Media.Antifreeze</a>.
  </li>
</ul>
<p>
  Specific heat capacity of antifreeze-water mixture at specified mass
  fraction and temperature, based on Melinder (2010).
</p>
<h4>
  References
</h4>
<p>
  Melinder, Åke. 2010. Properties of Secondary Working Fluids
  (Secondary Refrigerants or Coolants, Heat Transfer Fluids) for
  Indirect Systems. Paris: IIR/IIF.
</p>
<ul>
  <li>March 16, 2018 by Massimo Cimmino:<br/>
    First implementation. This function is used by <a href=
    \"modelica://AixLib.Media.Antifreeze.EthyleneGlycolWater\">AixLib.Media.Antifreeze.EthyleneGlycolWater</a>.
  </li>
</ul>
<p>
  Thermal conductivity of antifreeze-water mixture at specified mass
  fraction and temperature, based on Melinder (2010).
</p>
<h4>
  References
</h4>
<p>
  Melinder, Åke. 2010. Properties of Secondary Working Fluids
  (Secondary Refrigerants or Coolants, Heat Transfer Fluids) for
  Indirect Systems. Paris: IIR/IIF.
</p>
<ul>
  <li>March 16, 2018 by Massimo Cimmino:<br/>
    First implementation. This function is used by <a href=
    \"modelica://AixLib.Media.Antifreeze.EthyleneGlycolWater\">AixLib.Media.Antifreeze.EthyleneGlycolWater</a>.
  </li>
</ul>
<p>
  This medium package models ethylene glycol - water mixtures.
</p>
<p>
  The mass density, specific heat capacity, thermal conductivity and
  viscosity are assumed constant and evaluated at a set temperature and
  mass fraction of ethylene glycol within the mixture. The dependence
  of the four properties are shown on the figure below.
</p>
<p align=\"center\">
  <img src=
  \"modelica://AixLib/Resources/Images/Media/Antifreeze/EthyleneGlycolWaterProperties.png\"
  border=\"1\" alt=
  \"Relative variation of specific heat capacity with temperature\">
</p>
<p>
  The accuracy of the thermophysical properties is dependent on the
  temperature variations encountered during simulations. The figure
  below shows the relative error of the the four properties over a
  <i>10</i> °C range around the temperature used to evaluate the
  constant properties. The maximum errors are <i>0.8</i> % for mass
  density, <i>2.7</i> % for specific heat capacity, <i>3.2</i> % for
  thermal conductivity and <i>160</i> % for dynamic viscosity.
</p>
<p align=\"center\">
  <img src=
  \"modelica://AixLib/Resources/Images/Media/Antifreeze/EthyleneGlycolWaterError10degC.png\"
  border=\"1\" alt=
  \"Relative variation of specific heat capacity with temperature\">
</p>
<p>
  The figure below shows the relative error of the the four properties
  over a <i>20</i> °C range around the temperature used to evaluate the
  constant proepties. The maximum errors are <i>1.5</i> % for mass
  density, <i>5.3</i> % for specific heat capacity, <i>5.9</i> % for
  thermal conductivity and <i>500</i> % for dynamic viscosity.
</p>
<p align=\"center\">
  <img src=
  \"modelica://AixLib/Resources/Images/Media/Antifreeze/EthyleneGlycolWaterError20degC.png\"
  border=\"1\" alt=
  \"Relative variation of specific heat capacity with temperature\">
</p>
<p>
  The enthalpy is computed using the convention that <i>h=0</i> if
  <i>T=0</i> °C.
</p>
<h4>
  Limitations
</h4>
<p>
  Density, specific heat capacity, thermal conductivity and viscosity
  are constant. The ethylene glycol/water mixture is modeled as an
  incompressible liquid. There are no phase changes. The medium is
  limited to temperatures below <i>100</i> °C and mass fractions below
  <i>0.60</i>. As is the case for <a href=
  \"modelica://AixLib.Media.Water\">AixLib.Media.Water</a>, this medium
  package should not be used if the simulation relies on the dynamic
  viscosity.
</p>
<h4>
  Typical use and important parameters
</h4>
<p>
  The temperature and mass fraction must be specified for the
  evaluation of the constant thermophysical properties. A typical use
  of the package is (e.g. for a temperature of <i>20</i> °C and a mass
  fraction of <i>0.40</i>):
</p>
<p>
  <code>Medium =
  AixLib.Media.Antifreeze.EthyleneGlycolWater(property_T=293.15,
  X_a=0.40)</code>
</p>
<ul>
  <li>August 05, 2020, by Wen HU:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 9 column 2 - Warning: <p> attribute "align" not allowed for HTML5


line 11 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 24 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 35 column 2 - Warning: <p> attribute "align" not allowed for HTML5


---- AixLib/Fluid/BaseClasses/FlowModels/basicFlowFunction_dp.mo ----
-------- HTML Code --------

 <p>
 Function that computes the pressure drop of flow elements as
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   m = sign(&Delta;p) k  &radic;<span style=\"text-decoration:overline;\">&nbsp;&Delta;p &nbsp;</span>
 </p>
 <p>
 with regularization near the origin.
 Therefore, the flow coefficient is
 </p>
 <p align=\"center\" style=\"font-style:italic;\">
   k = m &frasl; &radic;<span style=\"text-decoration:overline;\">&nbsp;&Delta;p &nbsp;</span>
 </p>
 <p>
 The input <code>m_flow_turbulent</code> determines the location of the regularization.
 </p>
 
 <ul>
 <li>
 November 9, 2019, by Filip Jorissen:<br/>
 Added <code>smooth(2, . )</code> for avoiding
 a warning in the check valve model.<br/>
 See <a href=\"https://github.com/ibpsa/modelica-ibpsa/pull/1240\">#1240</a>.
 </li>
 <li>
 January 4, 2019, by Michael Wetter:<br/>
 Set `Inline=false`.<br/>
 See <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1070\">#1070</a>.
 </li>
 <li>
 May 1, 2017, by Filip Jorissen:<br/>
 Revised implementation such that
 <a href=\"modelica://AixLib.Fluid.BaseClasses.FlowModels.basicFlowFunction_dp\">basicFlowFunction_dp</a>
 is C2 continuous.
 See <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/725\">#725</a>.
 </li>
 <li>
 March 19, 2016, by Michael Wetter:<br/>
 Added <code>abs</code> function for
 <code>AixLib.Fluid.FixedResistances.Validation.PressureDropsExplicit</code>
 to work in OpenModelica.
 See <a href=\"https://trac.openmodelica.org/OpenModelica/ticket/3778\">
 OpenModelica ticket 3778</a>.
 </li>
 <li>
 January 22, 2016, by Michael Wetter:<br/>
 Corrected type declaration of pressure difference.
 This is
 for <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/404\">#404</a>.
 </li>
 <li>
 July 28, 2015, by Michael Wetter:<br/>
 Removed double declaration of <code>smooth(..)</code> and <code>smoothOrder</code>
 and changed <code>Inline=true</code> to <code>LateInline=true</code>.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/301\">issue 301</a>.
 </li>
 <li>
 July 15, 2015, by Filip Jorissen:<br/>
 New, more efficient implementation based on regularisation using simple polynomial.
 Expanded common subexpressions for function inlining to be possible.
 Set <code>Inline=true</code> for inlining to occur.
 This is for
 <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/279\">#279</a>.
 </li>
 <li>
 January 9, 2014, by Michael Wetter:<br/>
 Correct revision section, of which there were two.
 </li>
 <li>
 August 10, 2011, by Michael Wetter:<br/>
 Removed <code>if-then</code> optimization that set <code>m_flow=0</code> if <code>dp=0</code>,
 as this causes the derivative to be discontinuous at <code>dp=0</code>.
 </li>
 <li>
 August 4, 2011, by Michael Wetter:<br/>
 Removed option to use a linear function. The linear implementation is now done
 in models that call this function. With the previous implementation,
 the symbolic processor may not rearrange the equations, which can lead
 to coupled equations instead of an explicit solution.
 </li>
 <li>
 March 29, 2010 by Michael Wetter:<br/>
 Changed implementation to allow <code>k=0</code>, which is
 the case for a closed valve with no leakage
 </li>
 <li>
 April 13, 2009, by Michael Wetter:<br/>
 First implementation.
 </li>
 </ul>
 
-------- Corrected Code --------
<p>
  Function that computes the pressure drop of flow elements as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  m = sign(Δp) k √<span style=\"text-decoration:overline;\">&#160;Δp
  &#160;</span>
</p>
<p>
  with regularization near the origin. Therefore, the flow coefficient
  is
</p>
<p align=\"center\" style=\"font-style:italic;\">
  k = m ⁄ √<span style=\"text-decoration:overline;\">&#160;Δp
  &#160;</span>
</p>
<p>
  The input <code>m_flow_turbulent</code> determines the location of
  the regularization.
</p>
<ul>
  <li>November 9, 2019, by Filip Jorissen:<br/>
    Added <code>smooth(2, . )</code> for avoiding a warning in the
    check valve model.<br/>
    See <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/pull/1240\">#1240</a>.
  </li>
  <li>January 4, 2019, by Michael Wetter:<br/>
    Set `Inline=false`.<br/>
    See <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/1070\">#1070</a>.
  </li>
  <li>May 1, 2017, by Filip Jorissen:<br/>
    Revised implementation such that <a href=
    \"modelica://AixLib.Fluid.BaseClasses.FlowModels.basicFlowFunction_dp\">
    basicFlowFunction_dp</a> is C2 continuous. See <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/725\">#725</a>.
  </li>
  <li>March 19, 2016, by Michael Wetter:<br/>
    Added <code>abs</code> function for
    <code>AixLib.Fluid.FixedResistances.Validation.PressureDropsExplicit</code>
    to work in OpenModelica. See <a href=
    \"https://trac.openmodelica.org/OpenModelica/ticket/3778\">OpenModelica
    ticket 3778</a>.
  </li>
  <li>January 22, 2016, by Michael Wetter:<br/>
    Corrected type declaration of pressure difference. This is for
    <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/404\">#404</a>.
  </li>
  <li>July 28, 2015, by Michael Wetter:<br/>
    Removed double declaration of <code>smooth(..)</code> and
    <code>smoothOrder</code> and changed <code>Inline=true</code> to
    <code>LateInline=true</code>. This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/301\">issue 301</a>.
  </li>
  <li>July 15, 2015, by Filip Jorissen:<br/>
    New, more efficient implementation based on regularisation using
    simple polynomial. Expanded common subexpressions for function
    inlining to be possible. Set <code>Inline=true</code> for inlining
    to occur. This is for <a href=
    \"https://github.com/ibpsa/modelica-ibpsa/issues/279\">#279</a>.
  </li>
  <li>January 9, 2014, by Michael Wetter:<br/>
    Correct revision section, of which there were two.
  </li>
  <li>August 10, 2011, by Michael Wetter:<br/>
    Removed <code>if-then</code> optimization that set
    <code>m_flow=0</code> if <code>dp=0</code>, as this causes the
    derivative to be discontinuous at <code>dp=0</code>.
  </li>
  <li>August 4, 2011, by Michael Wetter:<br/>
    Removed option to use a linear function. The linear implementation
    is now done in models that call this function. With the previous
    implementation, the symbolic processor may not rearrange the
    equations, which can lead to coupled equations instead of an
    explicit solution.
  </li>
  <li>March 29, 2010 by Michael Wetter:<br/>
    Changed implementation to allow <code>k=0</code>, which is the case
    for a closed valve with no leakage
  </li>
  <li>April 13, 2009, by Michael Wetter:<br/>
    First implementation.
  </li>
</ul>

-------- Errors --------
line 5 column 2 - Warning: <p> attribute "align" not allowed for HTML5
line 12 column 2 - Warning: <p> attribute "align" not allowed for HTML5

